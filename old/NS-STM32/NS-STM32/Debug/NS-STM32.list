
NS-STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000965c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080099e8  080099e8  000199e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080099ec  080099ec  000199ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000002c  20000004  080099f0  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 TIMERSERVER_CONTEXT 00000099  20000030  08009a1c  00020030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000044  200000cc  08009ab5  000200cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  20000110  08009af9  00020110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 BLE_APP_CONTEXT 00000094  20000124  08009b0a  00020124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000308  200001b8  08009b9e  000201b8  2**2
                  ALLOC
 11 ._user_heap_stack 00001400  200004c0  08009b9e  000204c0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00030000  2**2
                  ALLOC
 14 MB_MEM1       000001b7  20030028  20030028  00030000  2**2
                  ALLOC
 15 MB_MEM2       00000877  200301e0  200301e0  00030000  2**2
                  ALLOC
 16 .debug_info   0003cb28  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 00006c8a  00000000  00000000  0005cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002b40  00000000  00000000  000639a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00002878  00000000  00000000  000664e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002deb5  00000000  00000000  00068d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003076c  00000000  00000000  00096c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    0010a028  00000000  00000000  000c7379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000053  00000000  00000000  001d13a1  2**0
                  CONTENTS, READONLY
 24 .debug_frame  0000b5f4  00000000  00000000  001d13f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001b8 	.word	0x200001b8
 8000158:	00000000 	.word	0x00000000
 800015c:	08009780 	.word	0x08009780

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001bc 	.word	0x200001bc
 8000178:	08009780 	.word	0x08009780

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <APPD_EnableCPU2>:
/* USER CODE END APPD_Init */
  return;
}

void APPD_EnableCPU2( void )
{
 800018c:	b5b0      	push	{r4, r5, r7, lr}
 800018e:	b088      	sub	sp, #32
 8000190:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <APPD_EnableCPU2+0x34>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	c403      	stmia	r4!, {r0, r1}
 80001a2:	8022      	strh	r2, [r4, #0]
 80001a4:	3402      	adds	r4, #2
 80001a6:	0c13      	lsrs	r3, r2, #16
 80001a8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 80001aa:	f008 f95d 	bl	8008468 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4618      	mov	r0, r3
 80001b2:	f007 fd2e 	bl	8007c12 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 80001b6:	bf00      	nop
}
 80001b8:	3720      	adds	r7, #32
 80001ba:	46bd      	mov	sp, r7
 80001bc:	bdb0      	pop	{r4, r5, r7, pc}
 80001be:	bf00      	nop
 80001c0:	08009798 	.word	0x08009798

080001c4 <LL_C2_PWR_SetPowerMode>:
	 *         @arg @ref LL_PWR_MODE_STOP2
	 *         @arg @ref LL_PWR_MODE_STANDBY
	 *         @arg @ref LL_PWR_MODE_SHUTDOWN
	 * @retval None
	 */
	__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode) {
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	6078      	str	r0, [r7, #4]
		MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80001cc:	4b07      	ldr	r3, [pc, #28]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80001d2:	f023 0207 	bic.w	r2, r3, #7
 80001d6:	4905      	ldr	r1, [pc, #20]	; (80001ec <LL_C2_PWR_SetPowerMode+0x28>)
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	4313      	orrs	r3, r2
 80001dc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	}
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ea:	4770      	bx	lr
 80001ec:	58000400 	.word	0x58000400

080001f0 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b083      	sub	sp, #12
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80001f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80001fc:	689b      	ldr	r3, [r3, #8]
 80001fe:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000202:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000206:	687b      	ldr	r3, [r7, #4]
 8000208:	4313      	orrs	r3, r2
 800020a:	608b      	str	r3, [r1, #8]
}
 800020c:	bf00      	nop
 800020e:	370c      	adds	r7, #12
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <APPE_Init>:
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPE_Init(void) {
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
	SystemPower_Config(); /**< Configure the system Power Mode */
 800021c:	f000 f80a 	bl	8000234 <SystemPower_Config>

	HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8000220:	4903      	ldr	r1, [pc, #12]	; (8000230 <APPE_Init+0x18>)
 8000222:	2000      	movs	r0, #0
 8000224:	f000 f8c2 	bl	80003ac <HW_TS_Init>

	/* USER CODE BEGIN APPE_Init_1 */

	/* USER CODE END APPE_Init_1 */
	appe_Tl_Init(); /* Initialize all transport layers */
 8000228:	f000 f812 	bl	8000250 <appe_Tl_Init>
	 * This system event is received with APPE_SysUserEvtRx()
	 */
	/* USER CODE BEGIN APPE_Init_2 */

	/* USER CODE END APPE_Init_2 */
	return;
 800022c:	bf00      	nop
}
 800022e:	bd80      	pop	{r7, pc}
 8000230:	200003fc 	.word	0x200003fc

08000234 <SystemPower_Config>:
 * @note  This API configures the system to be ready for low power mode
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0

	/**
	 * Select HSI as system clock source after Wake Up from Stop mode
	 */
	LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8000238:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800023c:	f7ff ffd8 	bl	80001f0 <LL_RCC_SetClkAfterWakeFromStop>

	/* Initialize low power manager */
	UTIL_LPM_Init();
 8000240:	f009 f806 	bl	8009250 <UTIL_LPM_Init>
	/* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
	LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8000244:	2004      	movs	r0, #4
 8000246:	f7ff ffbd 	bl	80001c4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif

	return;
 800024a:	bf00      	nop
}
 800024c:	bd80      	pop	{r7, pc}
	...

08000250 <appe_Tl_Init>:

static void appe_Tl_Init(void) {
 8000250:	b580      	push	{r7, lr}
 8000252:	b088      	sub	sp, #32
 8000254:	af00      	add	r7, sp, #0
	TL_MM_Config_t tl_mm_config;
	SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
	/**< Reference table initialization */
	TL_Init();
 8000256:	f007 ffc3 	bl	80081e0 <TL_Init>

	/**< System channel initialization */
	UTIL_SEQ_RegTask(1 << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU,
 800025a:	4a11      	ldr	r2, [pc, #68]	; (80002a0 <appe_Tl_Init+0x50>)
 800025c:	2100      	movs	r1, #0
 800025e:	2008      	movs	r0, #8
 8000260:	f009 f91c 	bl	800949c <UTIL_SEQ_RegTask>
			shci_user_evt_proc);
	SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*) &SystemCmdBuffer;
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <appe_Tl_Init+0x54>)
 8000266:	603b      	str	r3, [r7, #0]
	SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <appe_Tl_Init+0x58>)
 800026a:	607b      	str	r3, [r7, #4]
	shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 800026c:	463b      	mov	r3, r7
 800026e:	4619      	mov	r1, r3
 8000270:	480e      	ldr	r0, [pc, #56]	; (80002ac <appe_Tl_Init+0x5c>)
 8000272:	f007 fe7b 	bl	8007f6c <shci_init>

	/**< Memory Manager channel initialization */
	tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 8000276:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <appe_Tl_Init+0x60>)
 8000278:	60bb      	str	r3, [r7, #8]
	tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 800027a:	4b0e      	ldr	r3, [pc, #56]	; (80002b4 <appe_Tl_Init+0x64>)
 800027c:	60fb      	str	r3, [r7, #12]
	tl_mm_config.p_AsynchEvtPool = EvtPool;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <appe_Tl_Init+0x68>)
 8000280:	613b      	str	r3, [r7, #16]
	tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8000282:	f240 533c 	movw	r3, #1340	; 0x53c
 8000286:	617b      	str	r3, [r7, #20]
	TL_MM_Init(&tl_mm_config);
 8000288:	f107 0308 	add.w	r3, r7, #8
 800028c:	4618      	mov	r0, r3
 800028e:	f008 f877 	bl	8008380 <TL_MM_Init>

	TL_Enable();
 8000292:	f007 ff9f 	bl	80081d4 <TL_Enable>

	return;
 8000296:	bf00      	nop
}
 8000298:	3720      	adds	r7, #32
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	08007fa5 	.word	0x08007fa5
 80002a4:	20030724 	.word	0x20030724
 80002a8:	080002bd 	.word	0x080002bd
 80002ac:	080002d3 	.word	0x080002d3
 80002b0:	2003093c 	.word	0x2003093c
 80002b4:	20030830 	.word	0x20030830
 80002b8:	200301e8 	.word	0x200301e8

080002bc <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status) {
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	71fb      	strb	r3, [r7, #7]
	UNUSED(status);
	return;
 80002c6:	bf00      	nop
}
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr

080002d2 <APPE_SysUserEvtRx>:
 *    - reported by the FUS (sysevt_ready_rsp == RSS_FW_RUNNING)
 * The buffer shall not be released
 * ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void *pPayload) {
 80002d2:	b580      	push	{r7, lr}
 80002d4:	b082      	sub	sp, #8
 80002d6:	af00      	add	r7, sp, #0
 80002d8:	6078      	str	r0, [r7, #4]
	UNUSED(pPayload);
	/* Traces channel initialization */
	APPD_EnableCPU2();
 80002da:	f7ff ff57 	bl	800018c <APPD_EnableCPU2>

	APP_BLE_Init();
 80002de:	f008 fa35 	bl	800874c <APP_BLE_Init>
	UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80002e2:	2100      	movs	r1, #0
 80002e4:	2001      	movs	r0, #1
 80002e6:	f008 ffc5 	bl	8009274 <UTIL_LPM_SetOffMode>
	return;
 80002ea:	bf00      	nop
}
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}

080002f2 <UTIL_SEQ_Idle>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/

void UTIL_SEQ_Idle(void) {
 80002f2:	b480      	push	{r7}
 80002f4:	af00      	add	r7, sp, #0
#if ( CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower( );
#endif
	return;
 80002f6:	bf00      	nop
}
 80002f8:	46bd      	mov	sp, r7
 80002fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fe:	4770      	bx	lr

08000300 <UTIL_SEQ_EvtIdle>:
 *         is pending.
 *
 * @param  evt_waited_bm : Event pending.
 * @retval None
 */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm) {
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	6039      	str	r1, [r7, #0]
	UTIL_SEQ_Run( UTIL_SEQ_DEFAULT);
 800030a:	f04f 30ff 	mov.w	r0, #4294967295
 800030e:	f008 ffe1 	bl	80092d4 <UTIL_SEQ_Run>
}
 8000312:	bf00      	nop
 8000314:	3708      	adds	r7, #8
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}

0800031a <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void *pdata) {
 800031a:	b580      	push	{r7, lr}
 800031c:	b082      	sub	sp, #8
 800031e:	af00      	add	r7, sp, #0
 8000320:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_SetTask(1 << CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8000322:	2100      	movs	r1, #0
 8000324:	2008      	movs	r0, #8
 8000326:	f009 f8db 	bl	80094e0 <UTIL_SEQ_SetTask>
	return;
 800032a:	bf00      	nop
}
 800032c:	3708      	adds	r7, #8
 800032e:	46bd      	mov	sp, r7
 8000330:	bd80      	pop	{r7, pc}

08000332 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag) {
 8000332:	b580      	push	{r7, lr}
 8000334:	b082      	sub	sp, #8
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 800033a:	2002      	movs	r0, #2
 800033c:	f009 f93c 	bl	80095b8 <UTIL_SEQ_SetEvt>
	return;
 8000340:	bf00      	nop
}
 8000342:	3708      	adds	r7, #8
 8000344:	46bd      	mov	sp, r7
 8000346:	bd80      	pop	{r7, pc}

08000348 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout) {
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 8000350:	2002      	movs	r0, #2
 8000352:	f009 f951 	bl	80095f8 <UTIL_SEQ_WaitEvt>
	return;
 8000356:	bf00      	nop
}
 8000358:	3708      	adds	r7, #8
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
	...

08000360 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 800036a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800036e:	4905      	ldr	r1, [pc, #20]	; (8000384 <LL_EXTI_EnableIT_0_31+0x24>)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4313      	orrs	r3, r2
 8000374:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr
 8000384:	58000800 	.word	0x58000800

08000388 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000388:	b480      	push	{r7}
 800038a:	b083      	sub	sp, #12
 800038c:	af00      	add	r7, sp, #0
 800038e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000390:	4b05      	ldr	r3, [pc, #20]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000392:	681a      	ldr	r2, [r3, #0]
 8000394:	4904      	ldr	r1, [pc, #16]	; (80003a8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4313      	orrs	r3, r2
 800039a:	600b      	str	r3, [r1, #0]

}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr
 80003a8:	58000800 	.word	0x58000800

080003ac <HW_TS_Init>:
	__HAL_RTC_WRITEPROTECTION_ENABLE(phrtc);

	return;
}

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *hrtc) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	4603      	mov	r3, r0
 80003b4:	6039      	str	r1, [r7, #0]
 80003b6:	71fb      	strb	r3, [r7, #7]
	uint32_t localmaxwakeuptimersetup;

	/**
	 * Get RTC handler
	 */
	phrtc = hrtc;
 80003b8:	4a61      	ldr	r2, [pc, #388]	; (8000540 <HW_TS_Init+0x194>)
 80003ba:	683b      	ldr	r3, [r7, #0]
 80003bc:	6013      	str	r3, [r2, #0]

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(phrtc);
 80003be:	4b60      	ldr	r3, [pc, #384]	; (8000540 <HW_TS_Init+0x194>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	22ca      	movs	r2, #202	; 0xca
 80003c6:	625a      	str	r2, [r3, #36]	; 0x24
 80003c8:	4b5d      	ldr	r3, [pc, #372]	; (8000540 <HW_TS_Init+0x194>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2253      	movs	r2, #83	; 0x53
 80003d0:	625a      	str	r2, [r3, #36]	; 0x24

	SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80003d2:	4b5c      	ldr	r3, [pc, #368]	; (8000544 <HW_TS_Init+0x198>)
 80003d4:	689b      	ldr	r3, [r3, #8]
 80003d6:	4a5b      	ldr	r2, [pc, #364]	; (8000544 <HW_TS_Init+0x198>)
 80003d8:	f043 0320 	orr.w	r3, r3, #32
 80003dc:	6093      	str	r3, [r2, #8]

	/**
	 * Readout the user config
	 */
	WakeupTimerDivider = (4 - ((uint32_t) (READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80003de:	4b59      	ldr	r3, [pc, #356]	; (8000544 <HW_TS_Init+0x198>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	f003 0307 	and.w	r3, r3, #7
 80003e8:	b2db      	uxtb	r3, r3
 80003ea:	f1c3 0304 	rsb	r3, r3, #4
 80003ee:	b2da      	uxtb	r2, r3
 80003f0:	4b55      	ldr	r3, [pc, #340]	; (8000548 <HW_TS_Init+0x19c>)
 80003f2:	701a      	strb	r2, [r3, #0]

	AsynchPrescalerUserConfig =
			(uint8_t) (READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A)
 80003f4:	4b53      	ldr	r3, [pc, #332]	; (8000544 <HW_TS_Init+0x198>)
 80003f6:	691b      	ldr	r3, [r3, #16]
 80003f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80003fc:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8000400:	60fa      	str	r2, [r7, #12]
	uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000402:	68fa      	ldr	r2, [r7, #12]
 8000404:	fa92 f2a2 	rbit	r2, r2
 8000408:	60ba      	str	r2, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
	return result;
 800040a:	68ba      	ldr	r2, [r7, #8]
					>> (uint32_t) POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	b2d2      	uxtb	r2, r2
 8000412:	40d3      	lsrs	r3, r2
			(uint8_t) (READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A)
 8000414:	b2db      	uxtb	r3, r3
					>> (uint32_t) POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8000416:	3301      	adds	r3, #1
 8000418:	b2da      	uxtb	r2, r3
	AsynchPrescalerUserConfig =
 800041a:	4b4c      	ldr	r3, [pc, #304]	; (800054c <HW_TS_Init+0x1a0>)
 800041c:	701a      	strb	r2, [r3, #0]

	SynchPrescalerUserConfig = (uint16_t) (READ_BIT(RTC->PRER,
 800041e:	4b49      	ldr	r3, [pc, #292]	; (8000544 <HW_TS_Init+0x198>)
 8000420:	691b      	ldr	r3, [r3, #16]
 8000422:	b29b      	uxth	r3, r3
 8000424:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000428:	b29b      	uxth	r3, r3
			RTC_PRER_PREDIV_S)) + 1;
 800042a:	3301      	adds	r3, #1
 800042c:	b29a      	uxth	r2, r3
	SynchPrescalerUserConfig = (uint16_t) (READ_BIT(RTC->PRER,
 800042e:	4b48      	ldr	r3, [pc, #288]	; (8000550 <HW_TS_Init+0x1a4>)
 8000430:	801a      	strh	r2, [r3, #0]

	/**
	 *  Margin is taken to avoid wrong calculation when the wrap around is there and some
	 *  application interrupts may have delayed the reading
	 */
	localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)
 8000432:	4b47      	ldr	r3, [pc, #284]	; (8000550 <HW_TS_Init+0x1a4>)
 8000434:	881b      	ldrh	r3, [r3, #0]
 8000436:	3b01      	subs	r3, #1
			* AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY)
 8000438:	4a44      	ldr	r2, [pc, #272]	; (800054c <HW_TS_Init+0x1a0>)
 800043a:	7812      	ldrb	r2, [r2, #0]
 800043c:	fb02 f303 	mul.w	r3, r2, r3
 8000440:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
			>> WakeupTimerDivider);
 8000444:	4a40      	ldr	r2, [pc, #256]	; (8000548 <HW_TS_Init+0x19c>)
 8000446:	7812      	ldrb	r2, [r2, #0]
	localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)
 8000448:	40d3      	lsrs	r3, r2
 800044a:	613b      	str	r3, [r7, #16]

	if (localmaxwakeuptimersetup >= 0xFFFF) {
 800044c:	693b      	ldr	r3, [r7, #16]
 800044e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8000452:	4293      	cmp	r3, r2
 8000454:	d904      	bls.n	8000460 <HW_TS_Init+0xb4>
		MaxWakeupTimerSetup = 0xFFFF;
 8000456:	4b3f      	ldr	r3, [pc, #252]	; (8000554 <HW_TS_Init+0x1a8>)
 8000458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800045c:	801a      	strh	r2, [r3, #0]
 800045e:	e003      	b.n	8000468 <HW_TS_Init+0xbc>
	} else {
		MaxWakeupTimerSetup = (uint16_t) localmaxwakeuptimersetup;
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	b29a      	uxth	r2, r3
 8000464:	4b3b      	ldr	r3, [pc, #236]	; (8000554 <HW_TS_Init+0x1a8>)
 8000466:	801a      	strh	r2, [r3, #0]
	}

	/**
	 * Configure EXTI module
	 */
	LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000468:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800046c:	f7ff ff8c 	bl	8000388 <LL_EXTI_EnableRisingTrig_0_31>
	LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8000470:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000474:	f7ff ff74 	bl	8000360 <LL_EXTI_EnableIT_0_31>

	if (TimerInitMode == hw_ts_InitMode_Full) {
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	2b00      	cmp	r3, #0
 800047c:	d143      	bne.n	8000506 <HW_TS_Init+0x15a>
		WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800047e:	4b36      	ldr	r3, [pc, #216]	; (8000558 <HW_TS_Init+0x1ac>)
 8000480:	2201      	movs	r2, #1
 8000482:	701a      	strb	r2, [r3, #0]
		SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8000484:	4b35      	ldr	r3, [pc, #212]	; (800055c <HW_TS_Init+0x1b0>)
 8000486:	f04f 32ff 	mov.w	r2, #4294967295
 800048a:	601a      	str	r2, [r3, #0]

		/**
		 * Initialize the timer server
		 */
		for (loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++) {
 800048c:	2300      	movs	r3, #0
 800048e:	75fb      	strb	r3, [r7, #23]
 8000490:	e00c      	b.n	80004ac <HW_TS_Init+0x100>
			aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8000492:	7dfa      	ldrb	r2, [r7, #23]
 8000494:	4932      	ldr	r1, [pc, #200]	; (8000560 <HW_TS_Init+0x1b4>)
 8000496:	4613      	mov	r3, r2
 8000498:	005b      	lsls	r3, r3, #1
 800049a:	4413      	add	r3, r2
 800049c:	00db      	lsls	r3, r3, #3
 800049e:	440b      	add	r3, r1
 80004a0:	330c      	adds	r3, #12
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
		for (loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++) {
 80004a6:	7dfb      	ldrb	r3, [r7, #23]
 80004a8:	3301      	adds	r3, #1
 80004aa:	75fb      	strb	r3, [r7, #23]
 80004ac:	7dfb      	ldrb	r3, [r7, #23]
 80004ae:	2b05      	cmp	r3, #5
 80004b0:	d9ef      	bls.n	8000492 <HW_TS_Init+0xe6>
		}

		CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; /**<  Set ID to non valid value */
 80004b2:	4b2c      	ldr	r3, [pc, #176]	; (8000564 <HW_TS_Init+0x1b8>)
 80004b4:	2206      	movs	r2, #6
 80004b6:	701a      	strb	r2, [r3, #0]

		__HAL_RTC_WAKEUPTIMER_DISABLE(phrtc); /**<  Disable the Wakeup Timer */
 80004b8:	4b21      	ldr	r3, [pc, #132]	; (8000540 <HW_TS_Init+0x194>)
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	689a      	ldr	r2, [r3, #8]
 80004c0:	4b1f      	ldr	r3, [pc, #124]	; (8000540 <HW_TS_Init+0x194>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80004ca:	609a      	str	r2, [r3, #8]
		__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(phrtc, RTC_FLAG_WUTF); /**<  Clear flag in RTC module */
 80004cc:	4b1c      	ldr	r3, [pc, #112]	; (8000540 <HW_TS_Init+0x194>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	b2da      	uxtb	r2, r3
 80004d6:	4b1a      	ldr	r3, [pc, #104]	; (8000540 <HW_TS_Init+0x194>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80004e0:	60da      	str	r2, [r3, #12]
		__HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80004e2:	4b21      	ldr	r3, [pc, #132]	; (8000568 <HW_TS_Init+0x1bc>)
 80004e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80004e8:	60da      	str	r2, [r3, #12]
		HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Clear pending bit in NVIC  */
 80004ea:	2003      	movs	r0, #3
 80004ec:	f002 ffd7 	bl	800349e <HAL_NVIC_ClearPendingIRQ>
		__HAL_RTC_WAKEUPTIMER_ENABLE_IT(phrtc, RTC_IT_WUT); /**<  Enable interrupt in RTC module  */
 80004f0:	4b13      	ldr	r3, [pc, #76]	; (8000540 <HW_TS_Init+0x194>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	689a      	ldr	r2, [r3, #8]
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <HW_TS_Init+0x194>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	e00a      	b.n	800051c <HW_TS_Init+0x170>
	} else {
		if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(phrtc, RTC_FLAG_WUTF) != RESET) {
 8000506:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <HW_TS_Init+0x194>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000512:	2b00      	cmp	r3, #0
 8000514:	d002      	beq.n	800051c <HW_TS_Init+0x170>
			/**
			 * Simulate that the Timer expired
			 */
			HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8000516:	2003      	movs	r0, #3
 8000518:	f002 ffb3 	bl	8003482 <HAL_NVIC_SetPendingIRQ>
		}
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(phrtc);
 800051c:	4b08      	ldr	r3, [pc, #32]	; (8000540 <HW_TS_Init+0x194>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	22ff      	movs	r2, #255	; 0xff
 8000524:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID,
 8000526:	2200      	movs	r2, #0
 8000528:	2103      	movs	r1, #3
 800052a:	2003      	movs	r0, #3
 800052c:	f002 ff75 	bl	800341a <HAL_NVIC_SetPriority>
			CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO,
			CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO); /**<  Set NVIC priority */
	HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8000530:	2003      	movs	r0, #3
 8000532:	f002 ff8c 	bl	800344e <HAL_NVIC_EnableIRQ>

	return;
 8000536:	bf00      	nop
}
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	200001d4 	.word	0x200001d4
 8000544:	40002800 	.word	0x40002800
 8000548:	200001d8 	.word	0x200001d8
 800054c:	200001d9 	.word	0x200001d9
 8000550:	200001da 	.word	0x200001da
 8000554:	200001dc 	.word	0x200001dc
 8000558:	200000c8 	.word	0x200000c8
 800055c:	200000c4 	.word	0x200000c4
 8000560:	20000030 	.word	0x20000030
 8000564:	200000c0 	.word	0x200000c0
 8000568:	58000800 	.word	0x58000800

0800056c <LL_RCC_LSE_SetDriveCapability>:
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000574:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800057c:	f023 0218 	bic.w	r2, r3, #24
 8000580:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	4313      	orrs	r3, r2
 8000588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800058c:	bf00      	nop
 800058e:	370c      	adds	r7, #12
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr

08000598 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  *         @arg @ref LL_AHB1_GRP1_PERIPH_TSC
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80005a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80005b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	4013      	ands	r3, r2
 80005ba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005bc:	68fb      	ldr	r3, [r7, #12]
}
 80005be:	bf00      	nop
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr

080005ca <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_ADC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005ca:	b480      	push	{r7}
 80005cc:	b085      	sub	sp, #20
 80005ce:	af00      	add	r7, sp, #0
 80005d0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80005d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005d8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4313      	orrs	r3, r2
 80005e0:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80005e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80005e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	4013      	ands	r3, r2
 80005ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ee:	68fb      	ldr	r3, [r7, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  *         @arg @ref LL_APB2_GRP1_PERIPH_SAI1
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b085      	sub	sp, #20
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000608:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800060a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000614:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000618:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4013      	ands	r3, r2
 800061e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000620:	68fb      	ldr	r3, [r7, #12]
}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr

0800062e <LL_SPI_SetStandard>:
 * @param  Standard This parameter can be one of the following values:
 *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
 *         @arg @ref LL_SPI_PROTOCOL_TI
 * @retval None
 */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard) {
 800062e:	b480      	push	{r7}
 8000630:	b083      	sub	sp, #12
 8000632:	af00      	add	r7, sp, #0
 8000634:	6078      	str	r0, [r7, #4]
 8000636:	6039      	str	r1, [r7, #0]
	MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	685b      	ldr	r3, [r3, #4]
 800063c:	f023 0210 	bic.w	r2, r3, #16
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	431a      	orrs	r2, r3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	605a      	str	r2, [r3, #4]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <LL_SPI_EnableNSSPulseMgt>:
 * @note   This bit should not be changed when communication is ongoing. This bit is not used in SPI TI mode.
 * @rmtoll CR2          NSSP          LL_SPI_EnableNSSPulseMgt
 * @param  SPIx SPI Instance
 * @retval None
 */
__STATIC_INLINE void LL_SPI_EnableNSSPulseMgt(SPI_TypeDef *SPIx) {
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	SET_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	685b      	ldr	r3, [r3, #4]
 8000660:	f043 0208 	orr.w	r2, r3, #8
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	605a      	str	r2, [r3, #4]
}
 8000668:	bf00      	nop
 800066a:	370c      	adds	r7, #12
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr

08000674 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000678:	f000 feee 	bl	8001458 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800067c:	f000 f816 	bl	80006ac <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000680:	f000 fb42 	bl	8000d08 <MX_GPIO_Init>
	MX_DMA_Init();
 8000684:	f000 fb2e 	bl	8000ce4 <MX_DMA_Init>
	MX_RF_Init();
 8000688:	f000 f9ac 	bl	80009e4 <MX_RF_Init>
	MX_RTC_Init();
 800068c:	f000 f9b2 	bl	80009f4 <MX_RTC_Init>
	MX_SPI1_Init();
 8000690:	f000 f9da 	bl	8000a48 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000694:	f000 faaa 	bl	8000bec <MX_TIM2_Init>
	MX_LPTIM2_Init();
 8000698:	f000 f976 	bl	8000988 <MX_LPTIM2_Init>
	MX_ADC1_Init();
 800069c:	f000 f8b4 	bl	8000808 <MX_ADC1_Init>
	MX_TIM1_Init();
 80006a0:	f000 fa3a 	bl	8000b18 <MX_TIM1_Init>
	/* USER CODE BEGIN 2 */

	/* USER CODE END 2 */

	/* Init code for STM32_WPAN */
	APPE_Init();
 80006a4:	f7ff fdb8 	bl	8000218 <APPE_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80006a8:	e7fe      	b.n	80006a8 <main+0x34>
	...

080006ac <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b0ae      	sub	sp, #184	; 0xb8
 80006b0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006b2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006b6:	2248      	movs	r2, #72	; 0x48
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f009 f858 	bl	8009770 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
 80006d0:	615a      	str	r2, [r3, #20]
 80006d2:	619a      	str	r2, [r3, #24]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2250      	movs	r2, #80	; 0x50
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f009 f848 	bl	8009770 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80006e0:	f003 fa38 	bl	8003b54 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff ff41 	bl	800056c <LL_RCC_LSE_SetDriveCapability>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ea:	4b46      	ldr	r3, [pc, #280]	; (8000804 <SystemClock_Config+0x158>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80006f2:	4a44      	ldr	r2, [pc, #272]	; (8000804 <SystemClock_Config+0x158>)
 80006f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <SystemClock_Config+0x158>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8000706:	2327      	movs	r3, #39	; 0x27
 8000708:	673b      	str	r3, [r7, #112]	; 0x70
			| RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_LSE
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800070a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800070e:	677b      	str	r3, [r7, #116]	; 0x74
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000710:	2301      	movs	r3, #1
 8000712:	67bb      	str	r3, [r7, #120]	; 0x78
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000718:	67fb      	str	r3, [r7, #124]	; 0x7c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800072c:	2360      	movs	r3, #96	; 0x60
 800072e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000732:	2302      	movs	r3, #2
 8000734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000738:	2301      	movs	r3, #1
 800073a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLN = 32;
 8000744:	2320      	movs	r3, #32
 8000746:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800074a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800074e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000752:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000756:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800075a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800075e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000762:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000766:	4618      	mov	r0, r3
 8000768:	f003 fd8e 	bl	8004288 <HAL_RCC_OscConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xca>
		Error_Handler();
 8000772:	f000 fb83 	bl	8000e7c <Error_Handler>
	}
	/** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4 | RCC_CLOCKTYPE_HCLK2
 8000776:	236f      	movs	r3, #111	; 0x6f
 8000778:	657b      	str	r3, [r7, #84]	; 0x54
			| RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1
			| RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800077a:	2303      	movs	r3, #3
 800077c:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000782:	2300      	movs	r3, #0
 8000784:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV2;
 800078a:	2380      	movs	r3, #128	; 0x80
 800078c:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	66fb      	str	r3, [r7, #108]	; 0x6c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8000792:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000796:	2103      	movs	r1, #3
 8000798:	4618      	mov	r0, r3
 800079a:	f004 f909 	bl	80049b0 <HAL_RCC_ClockConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0xfc>
		Error_Handler();
 80007a4:	f000 fb6a 	bl	8000e7c <Error_Handler>
	}
	/** Initializes the peripherals clocks
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS
 80007a8:	f643 4320 	movw	r3, #15392	; 0x3c20
 80007ac:	607b      	str	r3, [r7, #4]
			| RCC_PERIPHCLK_RFWAKEUP | RCC_PERIPHCLK_RTC | RCC_PERIPHCLK_LPTIM2
			| RCC_PERIPHCLK_ADC;
	PeriphClkInitStruct.PLLSAI1.PLLN = 24;
 80007ae:	2318      	movs	r3, #24
 80007b0:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLLSAI1.PLLP = RCC_PLLP_DIV2;
 80007b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80007b6:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLLSAI1.PLLQ = RCC_PLLQ_DIV2;
 80007b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80007bc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLLSAI1.PLLR = RCC_PLLR_DIV2;
 80007be:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007c2:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADCCLK;
 80007c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007c8:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.Lptim2ClockSelection = RCC_LPTIM2CLKSOURCE_PCLK;
 80007ca:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 80007ce:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80007d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80007d4:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 80007dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007e0:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSI;
 80007e2:	2300      	movs	r3, #0
 80007e4:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 80007e6:	2310      	movs	r3, #16
 80007e8:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	4618      	mov	r0, r3
 80007ee:	f004 fcf0 	bl	80051d2 <HAL_RCCEx_PeriphCLKConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x150>
		Error_Handler();
 80007f8:	f000 fb40 	bl	8000e7c <Error_Handler>
	}
	/* USER CODE BEGIN Smps */

	/* USER CODE END Smps */
}
 80007fc:	bf00      	nop
 80007fe:	37b8      	adds	r7, #184	; 0xb8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	58000400 	.word	0x58000400

08000808 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b09a      	sub	sp, #104	; 0x68
 800080c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_AnalogWDGConfTypeDef AnalogWDGConfig = { 0 };
 800080e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]
 800081e:	615a      	str	r2, [r3, #20]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000820:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]
 8000830:	615a      	str	r2, [r3, #20]
	ADC_InjectionConfTypeDef sConfigInjected = { 0 };
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	2234      	movs	r2, #52	; 0x34
 8000836:	2100      	movs	r1, #0
 8000838:	4618      	mov	r0, r3
 800083a:	f008 ff99 	bl	8009770 <memset>
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 800083e:	4b4d      	ldr	r3, [pc, #308]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000840:	4a4d      	ldr	r2, [pc, #308]	; (8000978 <MX_ADC1_Init+0x170>)
 8000842:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000844:	4b4b      	ldr	r3, [pc, #300]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800084a:	4b4a      	ldr	r3, [pc, #296]	; (8000974 <MX_ADC1_Init+0x16c>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000850:	4b48      	ldr	r3, [pc, #288]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000856:	4b47      	ldr	r3, [pc, #284]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000858:	2200      	movs	r2, #0
 800085a:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800085c:	4b45      	ldr	r3, [pc, #276]	; (8000974 <MX_ADC1_Init+0x16c>)
 800085e:	2204      	movs	r2, #4
 8000860:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8000862:	4b44      	ldr	r3, [pc, #272]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000864:	2200      	movs	r2, #0
 8000866:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000868:	4b42      	ldr	r3, [pc, #264]	; (8000974 <MX_ADC1_Init+0x16c>)
 800086a:	2200      	movs	r2, #0
 800086c:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 800086e:	4b41      	ldr	r3, [pc, #260]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000870:	2201      	movs	r2, #1
 8000872:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000874:	4b3f      	ldr	r3, [pc, #252]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000876:	2200      	movs	r2, #0
 8000878:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800087c:	4b3d      	ldr	r3, [pc, #244]	; (8000974 <MX_ADC1_Init+0x16c>)
 800087e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000884:	4b3b      	ldr	r3, [pc, #236]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000886:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800088a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800088c:	4b39      	ldr	r3, [pc, #228]	; (8000974 <MX_ADC1_Init+0x16c>)
 800088e:	2201      	movs	r2, #1
 8000890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000894:	4b37      	ldr	r3, [pc, #220]	; (8000974 <MX_ADC1_Init+0x16c>)
 8000896:	2200      	movs	r2, #0
 8000898:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800089a:	4b36      	ldr	r3, [pc, #216]	; (8000974 <MX_ADC1_Init+0x16c>)
 800089c:	2200      	movs	r2, #0
 800089e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80008a2:	4834      	ldr	r0, [pc, #208]	; (8000974 <MX_ADC1_Init+0x16c>)
 80008a4:	f001 f8c2 	bl	8001a2c <HAL_ADC_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ADC1_Init+0xaa>
		Error_Handler();
 80008ae:	f000 fae5 	bl	8000e7c <Error_Handler>
	}
	/** Disable Injected Queue
	 */
	HAL_ADCEx_DisableInjectedQueue(&hadc1);
 80008b2:	4830      	ldr	r0, [pc, #192]	; (8000974 <MX_ADC1_Init+0x16c>)
 80008b4:	f002 fc72 	bl	800319c <HAL_ADCEx_DisableInjectedQueue>
	/** Configure Analog WatchDog 1
	 */
	AnalogWDGConfig.WatchdogNumber = ADC_ANALOGWATCHDOG_1;
 80008b8:	4b30      	ldr	r3, [pc, #192]	; (800097c <MX_ADC1_Init+0x174>)
 80008ba:	653b      	str	r3, [r7, #80]	; 0x50
	AnalogWDGConfig.WatchdogMode = ADC_ANALOGWATCHDOG_SINGLE_INJEC;
 80008bc:	f04f 73a0 	mov.w	r3, #20971520	; 0x1400000
 80008c0:	657b      	str	r3, [r7, #84]	; 0x54
	AnalogWDGConfig.Channel = ADC_CHANNEL_8;
 80008c2:	4b2f      	ldr	r3, [pc, #188]	; (8000980 <MX_ADC1_Init+0x178>)
 80008c4:	65bb      	str	r3, [r7, #88]	; 0x58
	AnalogWDGConfig.ITMode = ENABLE;
 80008c6:	2301      	movs	r3, #1
 80008c8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	AnalogWDGConfig.HighThreshold = 3982;
 80008cc:	f640 738e 	movw	r3, #3982	; 0xf8e
 80008d0:	663b      	str	r3, [r7, #96]	; 0x60
	AnalogWDGConfig.LowThreshold = 113;
 80008d2:	2371      	movs	r3, #113	; 0x71
 80008d4:	667b      	str	r3, [r7, #100]	; 0x64
	if (HAL_ADC_AnalogWDGConfig(&hadc1, &AnalogWDGConfig) != HAL_OK) {
 80008d6:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80008da:	4619      	mov	r1, r3
 80008dc:	4825      	ldr	r0, [pc, #148]	; (8000974 <MX_ADC1_Init+0x16c>)
 80008de:	f001 fd25 	bl	800232c <HAL_ADC_AnalogWDGConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC1_Init+0xe4>
		Error_Handler();
 80008e8:	f000 fac8 	bl	8000e7c <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_ADC1_Init+0x17c>)
 80008ee:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80008f0:	2306      	movs	r3, #6
 80008f2:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008f4:	2300      	movs	r3, #0
 80008f6:	643b      	str	r3, [r7, #64]	; 0x40
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008f8:	237f      	movs	r3, #127	; 0x7f
 80008fa:	647b      	str	r3, [r7, #68]	; 0x44
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008fc:	2304      	movs	r3, #4
 80008fe:	64bb      	str	r3, [r7, #72]	; 0x48
	sConfig.Offset = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000904:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000908:	4619      	mov	r1, r3
 800090a:	481a      	ldr	r0, [pc, #104]	; (8000974 <MX_ADC1_Init+0x16c>)
 800090c:	f001 f9d4 	bl	8001cb8 <HAL_ADC_ConfigChannel>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_ADC1_Init+0x112>
		Error_Handler();
 8000916:	f000 fab1 	bl	8000e7c <Error_Handler>
	}
	/** Configure Injected Channel
	 */
	sConfigInjected.InjectedChannel = ADC_CHANNEL_8;
 800091a:	4b19      	ldr	r3, [pc, #100]	; (8000980 <MX_ADC1_Init+0x178>)
 800091c:	607b      	str	r3, [r7, #4]
	sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800091e:	2308      	movs	r3, #8
 8000920:	60bb      	str	r3, [r7, #8]
	sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8000922:	2303      	movs	r3, #3
 8000924:	60fb      	str	r3, [r7, #12]
	sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000926:	237f      	movs	r3, #127	; 0x7f
 8000928:	613b      	str	r3, [r7, #16]
	sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800092a:	2304      	movs	r3, #4
 800092c:	617b      	str	r3, [r7, #20]
	sConfigInjected.InjectedOffset = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	61bb      	str	r3, [r7, #24]
	sConfigInjected.InjectedNbrOfConversion = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	61fb      	str	r3, [r7, #28]
	sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	f887 3020 	strb.w	r3, [r7, #32]
	sConfigInjected.AutoInjectedConv = DISABLE;
 800093c:	2300      	movs	r3, #0
 800093e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	sConfigInjected.QueueInjectedContext = DISABLE;
 8000942:	2300      	movs	r3, #0
 8000944:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T2_TRGO;
 8000948:	2348      	movs	r3, #72	; 0x48
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigInjected.ExternalTrigInjecConvEdge =
 800094c:	2340      	movs	r3, #64	; 0x40
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
			ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
	sConfigInjected.InjecOversamplingMode = DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK) {
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	4619      	mov	r1, r3
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <MX_ADC1_Init+0x16c>)
 800095c:	f001 fff6 	bl	800294c <HAL_ADCEx_InjectedConfigChannel>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <MX_ADC1_Init+0x162>
		Error_Handler();
 8000966:	f000 fa89 	bl	8000e7c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	3768      	adds	r7, #104	; 0x68
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000300 	.word	0x20000300
 8000978:	50040000 	.word	0x50040000
 800097c:	7dc00000 	.word	0x7dc00000
 8000980:	21800100 	.word	0x21800100
 8000984:	04300002 	.word	0x04300002

08000988 <MX_LPTIM2_Init>:
/**
 * @brief LPTIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_LPTIM2_Init(void) {
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	/* USER CODE END LPTIM2_Init 0 */

	/* USER CODE BEGIN LPTIM2_Init 1 */

	/* USER CODE END LPTIM2_Init 1 */
	hlptim2.Instance = LPTIM2;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_LPTIM2_Init+0x54>)
 800098e:	4a14      	ldr	r2, [pc, #80]	; (80009e0 <MX_LPTIM2_Init+0x58>)
 8000990:	601a      	str	r2, [r3, #0]
	hlptim2.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8000992:	4b12      	ldr	r3, [pc, #72]	; (80009dc <MX_LPTIM2_Init+0x54>)
 8000994:	2200      	movs	r2, #0
 8000996:	605a      	str	r2, [r3, #4]
	hlptim2.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV128;
 8000998:	4b10      	ldr	r3, [pc, #64]	; (80009dc <MX_LPTIM2_Init+0x54>)
 800099a:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800099e:	609a      	str	r2, [r3, #8]
	hlptim2.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80009a0:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <MX_LPTIM2_Init+0x54>)
 80009a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a6:	615a      	str	r2, [r3, #20]
	hlptim2.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_LPTIM2_Init+0x54>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	621a      	str	r2, [r3, #32]
	hlptim2.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80009ae:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MX_LPTIM2_Init+0x54>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
	hlptim2.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80009b4:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_LPTIM2_Init+0x54>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
	hlptim2.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MX_LPTIM2_Init+0x54>)
 80009bc:	2200      	movs	r2, #0
 80009be:	62da      	str	r2, [r3, #44]	; 0x2c
	hlptim2.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 80009c0:	4b06      	ldr	r3, [pc, #24]	; (80009dc <MX_LPTIM2_Init+0x54>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_LPTIM_Init(&hlptim2) != HAL_OK) {
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_LPTIM2_Init+0x54>)
 80009c8:	f003 f830 	bl	8003a2c <HAL_LPTIM_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_LPTIM2_Init+0x4e>
		Error_Handler();
 80009d2:	f000 fa53 	bl	8000e7c <Error_Handler>
	}
	/* USER CODE BEGIN LPTIM2_Init 2 */

	/* USER CODE END LPTIM2_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20000364 	.word	0x20000364
 80009e0:	40009400 	.word	0x40009400

080009e4 <MX_RF_Init>:
/**
 * @brief RF Initialization Function
 * @param None
 * @retval None
 */
static void MX_RF_Init(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
	/* USER CODE END RF_Init 1 */
	/* USER CODE BEGIN RF_Init 2 */

	/* USER CODE END RF_Init 2 */

}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
	...

080009f4 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN RTC_Init 1 */

	/* USER CODE END RTC_Init 1 */
	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 80009f8:	4b11      	ldr	r3, [pc, #68]	; (8000a40 <MX_RTC_Init+0x4c>)
 80009fa:	4a12      	ldr	r2, [pc, #72]	; (8000a44 <MX_RTC_Init+0x50>)
 80009fc:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80009fe:	4b10      	ldr	r3, [pc, #64]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a06:	220f      	movs	r2, #15
 8000a08:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8000a0a:	4b0d      	ldr	r3, [pc, #52]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a0c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000a10:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a18:	4b09      	ldr	r3, [pc, #36]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a1e:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000a24:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8000a2a:	4805      	ldr	r0, [pc, #20]	; (8000a40 <MX_RTC_Init+0x4c>)
 8000a2c:	f004 fe58 	bl	80056e0 <HAL_RTC_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_RTC_Init+0x46>
		Error_Handler();
 8000a36:	f000 fa21 	bl	8000e7c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200003fc 	.word	0x200003fc
 8000a44:	40002800 	.word	0x40002800

08000a48 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b090      	sub	sp, #64	; 0x40
 8000a4c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 0 */

	/* USER CODE END SPI1_Init 0 */

	LL_SPI_InitTypeDef SPI_InitStruct = { 0 };
 8000a4e:	f107 0318 	add.w	r3, r7, #24
 8000a52:	2228      	movs	r2, #40	; 0x28
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f008 fe8a 	bl	8009770 <memset>

	LL_GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	2200      	movs	r2, #0
 8000a60:	601a      	str	r2, [r3, #0]
 8000a62:	605a      	str	r2, [r3, #4]
 8000a64:	609a      	str	r2, [r3, #8]
 8000a66:	60da      	str	r2, [r3, #12]
 8000a68:	611a      	str	r2, [r3, #16]
 8000a6a:	615a      	str	r2, [r3, #20]

	/* Peripheral clock enable */
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SPI1);
 8000a6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a70:	f7ff fdc4 	bl	80005fc <LL_APB2_GRP1_EnableClock>

	LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000a74:	2001      	movs	r0, #1
 8000a76:	f7ff fda8 	bl	80005ca <LL_AHB2_GRP1_EnableClock>
	/**SPI1 GPIO Configuration
	 PA4   ------> SPI1_NSS
	 PA5   ------> SPI1_SCK
	 PA7   ------> SPI1_MOSI
	 */
	GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000a8e:	2305      	movs	r3, #5
 8000a90:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a92:	463b      	mov	r3, r7
 8000a94:	4619      	mov	r1, r3
 8000a96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9a:	f005 ff10 	bl	80068be <LL_GPIO_Init>

	GPIO_InitStruct.Pin = LL_GPIO_PIN_5 | LL_GPIO_PIN_7;
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	603b      	str	r3, [r7, #0]
	GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000ab2:	2305      	movs	r3, #5
 8000ab4:	617b      	str	r3, [r7, #20]
	LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f005 fefe 	bl	80068be <LL_GPIO_Init>

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61bb      	str	r3, [r7, #24]
	SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000ac6:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000aca:	61fb      	str	r3, [r7, #28]
	SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_16BIT;
 8000acc:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000ad0:	623b      	str	r3, [r7, #32]
	SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
	SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
	SPI_InitStruct.NSS = LL_SPI_NSS_HARD_OUTPUT;
 8000ada:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV2;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
	SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	637b      	str	r3, [r7, #52]	; 0x34
	SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63bb      	str	r3, [r7, #56]	; 0x38
	SPI_InitStruct.CRCPoly = 7;
 8000aec:	2307      	movs	r3, #7
 8000aee:	63fb      	str	r3, [r7, #60]	; 0x3c
	LL_SPI_Init(SPI1, &SPI_InitStruct);
 8000af0:	f107 0318 	add.w	r3, r7, #24
 8000af4:	4619      	mov	r1, r3
 8000af6:	4807      	ldr	r0, [pc, #28]	; (8000b14 <MX_SPI1_Init+0xcc>)
 8000af8:	f005 ff73 	bl	80069e2 <LL_SPI_Init>
	LL_SPI_SetStandard(SPI1, LL_SPI_PROTOCOL_MOTOROLA);
 8000afc:	2100      	movs	r1, #0
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_SPI1_Init+0xcc>)
 8000b00:	f7ff fd95 	bl	800062e <LL_SPI_SetStandard>
	LL_SPI_EnableNSSPulseMgt(SPI1);
 8000b04:	4803      	ldr	r0, [pc, #12]	; (8000b14 <MX_SPI1_Init+0xcc>)
 8000b06:	f7ff fda5 	bl	8000654 <LL_SPI_EnableNSSPulseMgt>
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000b0a:	bf00      	nop
 8000b0c:	3740      	adds	r7, #64	; 0x40
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	40013000 	.word	0x40013000

08000b18 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b094      	sub	sp, #80	; 0x50
 8000b1c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000b1e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000b2c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
 8000b34:	605a      	str	r2, [r3, #4]
 8000b36:	609a      	str	r2, [r3, #8]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000b38:	463b      	mov	r3, r7
 8000b3a:	2234      	movs	r2, #52	; 0x34
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 fe16 	bl	8009770 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8000b44:	4b27      	ldr	r3, [pc, #156]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	; (8000be8 <MX_TIM1_Init+0xd0>)
 8000b48:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 639;
 8000b4a:	4b26      	ldr	r3, [pc, #152]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b4c:	f240 227f 	movw	r2, #639	; 0x27f
 8000b50:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b24      	ldr	r3, [pc, #144]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 50;
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b5a:	2232      	movs	r2, #50	; 0x32
 8000b5c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b5e:	4b21      	ldr	r3, [pc, #132]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6a:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8000b70:	481c      	ldr	r0, [pc, #112]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b72:	f004 fea3 	bl	80058bc <HAL_TIM_Base_Init>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0x68>
		Error_Handler();
 8000b7c:	f000 f97e 	bl	8000e7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b84:	643b      	str	r3, [r7, #64]	; 0x40
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8000b86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4815      	ldr	r0, [pc, #84]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000b8e:	f005 f85d 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x84>
		Error_Handler();
 8000b98:	f000 f970 	bl	8000e7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b9c:	2320      	movs	r3, #32
 8000b9e:	637b      	str	r3, [r7, #52]	; 0x34
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8000ba8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bac:	4619      	mov	r1, r3
 8000bae:	480d      	ldr	r0, [pc, #52]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000bb0:	f005 fc90 	bl	80064d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_TIM1_Init+0xa6>
			!= HAL_OK) {
		Error_Handler();
 8000bba:	f000 f95f 	bl	8000e7c <Error_Handler>
	}
	sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000bc6:	463b      	mov	r3, r7
 8000bc8:	4619      	mov	r1, r3
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <MX_TIM1_Init+0xcc>)
 8000bcc:	f005 fce2 	bl	8006594 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0xc2>
			!= HAL_OK) {
		Error_Handler();
 8000bd6:	f000 f951 	bl	8000e7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	; 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000420 	.word	0x20000420
 8000be8:	40012c00 	.word	0x40012c00

08000bec <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08e      	sub	sp, #56	; 0x38
 8000bf0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000bf2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000c00:	f107 031c 	add.w	r3, r7, #28
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
 8000c1a:	615a      	str	r2, [r3, #20]
 8000c1c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000c1e:	4b30      	ldr	r3, [pc, #192]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c24:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 15;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c28:	220f      	movs	r2, #15
 8000c2a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 0xffffff;
 8000c32:	4b2b      	ldr	r3, [pc, #172]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c34:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8000c38:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c40:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000c46:	4826      	ldr	r0, [pc, #152]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c48:	f004 fe38 	bl	80058bc <HAL_TIM_Base_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8000c52:	f000 f913 	bl	8000e7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000c5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c60:	4619      	mov	r1, r3
 8000c62:	481f      	ldr	r0, [pc, #124]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c64:	f004 fff2 	bl	8005c4c <HAL_TIM_ConfigClockSource>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_TIM2_Init+0x86>
		Error_Handler();
 8000c6e:	f000 f905 	bl	8000e7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8000c72:	481b      	ldr	r0, [pc, #108]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c74:	f004 fe79 	bl	800596a <HAL_TIM_PWM_Init>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <MX_TIM2_Init+0x96>
		Error_Handler();
 8000c7e:	f000 f8fd 	bl	8000e7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 8000c82:	2340      	movs	r3, #64	; 0x40
 8000c84:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c86:	2300      	movs	r3, #0
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000c92:	f005 fc1f 	bl	80064d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8000c9c:	f000 f8ee 	bl	8000e7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000ca0:	2370      	movs	r3, #112	; 0x70
 8000ca2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0xffffffff;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000caa:	2302      	movs	r3, #2
 8000cac:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4809      	ldr	r0, [pc, #36]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000cba:	f004 feb7 	bl	8005a2c <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0xdc>
			!= HAL_OK) {
		Error_Handler();
 8000cc4:	f000 f8da 	bl	8000e7c <Error_Handler>
	}
	__HAL_TIM_DISABLE_OCxPRELOAD(&htim2, TIM_CHANNEL_1);
 8000cc8:	4b05      	ldr	r3, [pc, #20]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	699a      	ldr	r2, [r3, #24]
 8000cce:	4b04      	ldr	r3, [pc, #16]	; (8000ce0 <MX_TIM2_Init+0xf4>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	f022 0208 	bic.w	r2, r2, #8
 8000cd6:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	3738      	adds	r7, #56	; 0x38
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	2000046c 	.word	0x2000046c

08000ce4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ce8:	2004      	movs	r0, #4
 8000cea:	f7ff fc55 	bl	8000598 <LL_AHB1_GRP1_EnableClock>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	2001      	movs	r0, #1
 8000cf0:	f7ff fc52 	bl	8000598 <LL_AHB1_GRP1_EnableClock>

	/* DMA interrupt init */
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 2, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2102      	movs	r1, #2
 8000cf8:	200c      	movs	r0, #12
 8000cfa:	f002 fb8e 	bl	800341a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000cfe:	200c      	movs	r0, #12
 8000d00:	f002 fba5 	bl	800344e <HAL_NVIC_EnableIRQ>

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1c:	2004      	movs	r0, #4
 8000d1e:	f7ff fc54 	bl	80005ca <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	2080      	movs	r0, #128	; 0x80
 8000d24:	f7ff fc51 	bl	80005ca <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d28:	2002      	movs	r0, #2
 8000d2a:	f7ff fc4e 	bl	80005ca <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fc4b 	bl	80005ca <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8000d34:	2010      	movs	r0, #16
 8000d36:	f7ff fc48 	bl	80005ca <LL_AHB2_GRP1_EnableClock>
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d3a:	2008      	movs	r0, #8
 8000d3c:	f7ff fc45 	bl	80005ca <LL_AHB2_GRP1_EnableClock>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LDAC_GPIO_Port, LDAC_Pin, GPIO_PIN_RESET);
 8000d40:	2200      	movs	r2, #0
 8000d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4a:	f002 fe33 	bl	80039b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000d4e:	2200      	movs	r2, #0
 8000d50:	21e7      	movs	r1, #231	; 0xe7
 8000d52:	4845      	ldr	r0, [pc, #276]	; (8000e68 <MX_GPIO_Init+0x160>)
 8000d54:	f002 fe2e 	bl	80039b4 <HAL_GPIO_WritePin>
			GPIO_PIN_2 | GPIO_PIN_0 | GPIO_PIN_1 | TOGGLE_Pin
					| SHORT_ELECTRODE_Pin | DUMMY_LOAD_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(STIM_EN_GPIO_Port, STIM_EN_Pin, GPIO_PIN_RESET);
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5e:	4843      	ldr	r0, [pc, #268]	; (8000e6c <MX_GPIO_Init+0x164>)
 8000d60:	f002 fe28 	bl	80039b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC13 PC1 PC2 PC3
	 PC4 PC5 PC6 PC11
	 PC12 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3
 8000d64:	f643 037e 	movw	r3, #14462	; 0x387e
 8000d68:	607b      	str	r3, [r7, #4]
			| GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	4619      	mov	r1, r3
 8000d76:	483d      	ldr	r0, [pc, #244]	; (8000e6c <MX_GPIO_Init+0x164>)
 8000d78:	f002 fcac 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PH3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d80:	2303      	movs	r3, #3
 8000d82:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d88:	1d3b      	adds	r3, r7, #4
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4838      	ldr	r0, [pc, #224]	; (8000e70 <MX_GPIO_Init+0x168>)
 8000d8e:	f002 fca1 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB8 PB9 PB10 PB11
	 PB12 PB13 PB14 PB15
	 PB4 */
	GPIO_InitStruct.Pin =
 8000d92:	f64f 7310 	movw	r3, #65296	; 0xff10
 8000d96:	607b      	str	r3, [r7, #4]
			GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12
					| GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 | GPIO_PIN_4;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	1d3b      	adds	r3, r7, #4
 8000da2:	4619      	mov	r1, r3
 8000da4:	4830      	ldr	r0, [pc, #192]	; (8000e68 <MX_GPIO_Init+0x160>)
 8000da6:	f002 fc95 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA0 PA1 PA2 PA6
	 PA8 PA10 PA11 PA12
	 PA15 */
	GPIO_InitStruct.Pin =
 8000daa:	f649 5347 	movw	r3, #40263	; 0x9d47
 8000dae:	607b      	str	r3, [r7, #4]
			GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_6 | GPIO_PIN_8
					| GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db0:	2303      	movs	r3, #3
 8000db2:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	1d3b      	adds	r3, r7, #4
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dc0:	f002 fc88 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LDAC_Pin */
	GPIO_InitStruct.Pin = LDAC_Pin;
 8000dc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dc8:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd2:	2303      	movs	r3, #3
 8000dd4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(LDAC_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dde:	f002 fc79 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000de2:	2304      	movs	r3, #4
 8000de4:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dea:	2301      	movs	r3, #1
 8000dec:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dee:	2303      	movs	r3, #3
 8000df0:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4619      	mov	r1, r3
 8000df6:	481c      	ldr	r0, [pc, #112]	; (8000e68 <MX_GPIO_Init+0x160>)
 8000df8:	f002 fc6c 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 PB1 TOGGLE_Pin SHORT_ELECTRODE_Pin
	 DUMMY_LOAD_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | TOGGLE_Pin
 8000dfc:	23e3      	movs	r3, #227	; 0xe3
 8000dfe:	607b      	str	r3, [r7, #4]
			| SHORT_ELECTRODE_Pin | DUMMY_LOAD_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0c:	1d3b      	adds	r3, r7, #4
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4815      	ldr	r0, [pc, #84]	; (8000e68 <MX_GPIO_Init+0x160>)
 8000e12:	f002 fc5f 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PE4 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000e16:	2310      	movs	r3, #16
 8000e18:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e1a:	2303      	movs	r3, #3
 8000e1c:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4619      	mov	r1, r3
 8000e26:	4813      	ldr	r0, [pc, #76]	; (8000e74 <MX_GPIO_Init+0x16c>)
 8000e28:	f002 fc54 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : STIM_EN_Pin */
	GPIO_InitStruct.Pin = STIM_EN_Pin;
 8000e2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e30:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(STIM_EN_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	4619      	mov	r1, r3
 8000e42:	480a      	ldr	r0, [pc, #40]	; (8000e6c <MX_GPIO_Init+0x164>)
 8000e44:	f002 fc46 	bl	80036d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD0 PD1 */
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	607b      	str	r3, [r7, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	4619      	mov	r1, r3
 8000e58:	4807      	ldr	r0, [pc, #28]	; (8000e78 <MX_GPIO_Init+0x170>)
 8000e5a:	f002 fc3b 	bl	80036d4 <HAL_GPIO_Init>

}
 8000e5e:	bf00      	nop
 8000e60:	3718      	adds	r7, #24
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	48000400 	.word	0x48000400
 8000e6c:	48000800 	.word	0x48000800
 8000e70:	48001c00 	.word	0x48001c00
 8000e74:	48001000 	.word	0x48001000
 8000e78:	48000c00 	.word	0x48000c00

08000e7c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000e8e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e96:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000e9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <LL_AHB2_GRP1_EnableClock>:
{
 8000eac:	b480      	push	{r7}
 8000eae:	b085      	sub	sp, #20
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ec4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ec8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	bf00      	nop
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <LL_AHB3_GRP1_EnableClock>:
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b085      	sub	sp, #20
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8000ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000eec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8000ef6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000efa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4013      	ands	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f02:	68fb      	ldr	r3, [r7, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <LL_APB1_GRP1_EnableClock>:
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4013      	ands	r3, r2
 8000f32:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f34:	68fb      	ldr	r3, [r7, #12]
}
 8000f36:	bf00      	nop
 8000f38:	3714      	adds	r7, #20
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <LL_APB1_GRP2_EnableClock>:
{
 8000f42:	b480      	push	{r7}
 8000f44:	b085      	sub	sp, #20
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000f4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f50:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000f5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f66:	68fb      	ldr	r3, [r7, #12]
}
 8000f68:	bf00      	nop
 8000f6a:	3714      	adds	r7, #20
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <LL_APB2_GRP1_EnableClock>:
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f80:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f82:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f90:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f98:	68fb      	ldr	r3, [r7, #12]
}
 8000f9a:	bf00      	nop
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_HSEM_CLK_ENABLE();
 8000faa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000fae:	f7ff ff96 	bl	8000ede <LL_AHB3_GRP1_EnableClock>

	/* System interrupt init*/

	/* Peripheral interrupt init */
	/* HSEM_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	202e      	movs	r0, #46	; 0x2e
 8000fb8:	f002 fa2f 	bl	800341a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8000fbc:	202e      	movs	r0, #46	; 0x2e
 8000fbe:	f002 fa46 	bl	800344e <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b088      	sub	sp, #32
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
	if (hadc->Instance == ADC1) {
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a2e      	ldr	r2, [pc, #184]	; (80010a0 <HAL_ADC_MspInit+0xd8>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d155      	bne.n	8001096 <HAL_ADC_MspInit+0xce>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC_CLK_ENABLE();
 8000fea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000fee:	f7ff ff5d 	bl	8000eac <LL_AHB2_GRP1_EnableClock>

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	2004      	movs	r0, #4
 8000ff4:	f7ff ff5a 	bl	8000eac <LL_AHB2_GRP1_EnableClock>
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ff57 	bl	8000eac <LL_AHB2_GRP1_EnableClock>
		/**ADC1 GPIO Configuration
		 PC0     ------> ADC1_IN1
		 PA3     ------> ADC1_IN8
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ffe:	2301      	movs	r3, #1
 8001000:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001002:	2303      	movs	r3, #3
 8001004:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100a:	f107 030c 	add.w	r3, r7, #12
 800100e:	4619      	mov	r1, r3
 8001010:	4824      	ldr	r0, [pc, #144]	; (80010a4 <HAL_ADC_MspInit+0xdc>)
 8001012:	f002 fb5f 	bl	80036d4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001016:	2308      	movs	r3, #8
 8001018:	60fb      	str	r3, [r7, #12]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800101a:	2303      	movs	r3, #3
 800101c:	613b      	str	r3, [r7, #16]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	f107 030c 	add.w	r3, r7, #12
 8001026:	4619      	mov	r1, r3
 8001028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800102c:	f002 fb52 	bl	80036d4 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA1_Channel2;
 8001030:	4b1d      	ldr	r3, [pc, #116]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001032:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <HAL_ADC_MspInit+0xe4>)
 8001034:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001036:	4b1c      	ldr	r3, [pc, #112]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001038:	2205      	movs	r2, #5
 800103a:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800103c:	4b1a      	ldr	r3, [pc, #104]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001042:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001048:	4b17      	ldr	r3, [pc, #92]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 800104a:	2280      	movs	r2, #128	; 0x80
 800104c:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800104e:	4b16      	ldr	r3, [pc, #88]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001050:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001054:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001058:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800105c:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001060:	2220      	movs	r2, #32
 8001062:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001064:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001066:	2200      	movs	r2, #0
 8001068:	621a      	str	r2, [r3, #32]
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 800106a:	480f      	ldr	r0, [pc, #60]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 800106c:	f002 fa26 	bl	80034bc <HAL_DMA_Init>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <HAL_ADC_MspInit+0xb2>
			Error_Handler();
 8001076:	f7ff ff01 	bl	8000e7c <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a0a      	ldr	r2, [pc, #40]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 800107e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001080:	4a09      	ldr	r2, [pc, #36]	; (80010a8 <HAL_ADC_MspInit+0xe0>)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6293      	str	r3, [r2, #40]	; 0x28

		/* ADC1 interrupt Init */
		HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8001086:	2200      	movs	r2, #0
 8001088:	2102      	movs	r1, #2
 800108a:	2012      	movs	r0, #18
 800108c:	f002 f9c5 	bl	800341a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001090:	2012      	movs	r0, #18
 8001092:	f002 f9dc 	bl	800344e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN ADC1_MspInit 1 */

		/* USER CODE END ADC1_MspInit 1 */
	}

}
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	50040000 	.word	0x50040000
 80010a4:	48000800 	.word	0x48000800
 80010a8:	2000039c 	.word	0x2000039c
 80010ac:	4002001c 	.word	0x4002001c

080010b0 <HAL_LPTIM_MspInit>:
 * @brief LPTIM MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hlptim: LPTIM handle pointer
 * @retval None
 */
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef *hlptim) {
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
	if (hlptim->Instance == LPTIM2) {
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_LPTIM_MspInit+0x30>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10a      	bne.n	80010d8 <HAL_LPTIM_MspInit+0x28>
		/* USER CODE BEGIN LPTIM2_MspInit 0 */

		/* USER CODE END LPTIM2_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_LPTIM2_CLK_ENABLE();
 80010c2:	2020      	movs	r0, #32
 80010c4:	f7ff ff3d 	bl	8000f42 <LL_APB1_GRP2_EnableClock>
		/* LPTIM2 interrupt Init */
		HAL_NVIC_SetPriority(LPTIM2_IRQn, 1, 0);
 80010c8:	2200      	movs	r2, #0
 80010ca:	2101      	movs	r1, #1
 80010cc:	2030      	movs	r0, #48	; 0x30
 80010ce:	f002 f9a4 	bl	800341a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(LPTIM2_IRQn);
 80010d2:	2030      	movs	r0, #48	; 0x30
 80010d4:	f002 f9bb 	bl	800344e <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN LPTIM2_MspInit 1 */

		/* USER CODE END LPTIM2_MspInit 1 */
	}

}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40009400 	.word	0x40009400

080010e4 <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b082      	sub	sp, #8
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
	if (hrtc->Instance == RTC) {
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a06      	ldr	r2, [pc, #24]	; (800110c <HAL_RTC_MspInit+0x28>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d105      	bne.n	8001102 <HAL_RTC_MspInit+0x1e>
		/* USER CODE BEGIN RTC_MspInit 0 */

		/* USER CODE END RTC_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 80010f6:	f7ff fec8 	bl	8000e8a <LL_RCC_EnableRTC>
		__HAL_RCC_RTCAPB_CLK_ENABLE();
 80010fa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80010fe:	f7ff ff07 	bl	8000f10 <LL_APB1_GRP1_EnableClock>
		/* USER CODE BEGIN RTC_MspInit 1 */

		/* USER CODE END RTC_MspInit 1 */
	}

}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40002800 	.word	0x40002800

08001110 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM1) {
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_TIM_Base_MspInit+0x44>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d104      	bne.n	800112c <HAL_TIM_Base_MspInit+0x1c>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8001122:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001126:	f7ff ff25 	bl	8000f74 <LL_APB2_GRP1_EnableClock>
		/* USER CODE BEGIN TIM2_MspInit 1 */

		/* USER CODE END TIM2_MspInit 1 */
	}

}
 800112a:	e00f      	b.n	800114c <HAL_TIM_Base_MspInit+0x3c>
	} else if (htim_base->Instance == TIM2) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001134:	d10a      	bne.n	800114c <HAL_TIM_Base_MspInit+0x3c>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8001136:	2001      	movs	r0, #1
 8001138:	f7ff feea 	bl	8000f10 <LL_APB1_GRP1_EnableClock>
		HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800113c:	2200      	movs	r2, #0
 800113e:	2100      	movs	r1, #0
 8001140:	201c      	movs	r0, #28
 8001142:	f002 f96a 	bl	800341a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001146:	201c      	movs	r0, #28
 8001148:	f002 f981 	bl	800344e <HAL_NVIC_EnableIRQ>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40012c00 	.word	0x40012c00

08001158 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */

	/* USER CODE END NonMaskableInt_IRQn 1 */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr

08001166 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8001166:	b480      	push	{r7}
 8001168:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800116a:	e7fe      	b.n	800116a <HardFault_Handler+0x4>

0800116c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8001170:	e7fe      	b.n	8001170 <MemManage_Handler+0x4>

08001172 <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8001172:	b480      	push	{r7}
 8001174:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8001176:	e7fe      	b.n	8001176 <BusFault_Handler+0x4>

08001178 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800117c:	e7fe      	b.n	800117c <UsageFault_Handler+0x4>

0800117e <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 80011ac:	f000 f9ae 	bl	800150c <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}

080011b4 <DMA1_Channel2_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 channel2 global interrupt.
 */
void DMA1_Channel2_IRQHandler(void) {
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0

	/* USER CODE END DMA1_Channel2_IRQn 0 */
	/* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

	/* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr

080011c2 <ADC1_IRQHandler>:

/**
 * @brief This function handles ADC1 global interrupt.
 */
void ADC1_IRQHandler(void) {
 80011c2:	b480      	push	{r7}
 80011c4:	af00      	add	r7, sp, #0

	/* USER CODE END ADC1_IRQn 0 */
	/* USER CODE BEGIN ADC1_IRQn 1 */

	/* USER CODE END ADC1_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

	/* USER CODE END TIM2_IRQn 0 */
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <HSEM_IRQHandler>:

/**
 * @brief This function handles HSEM global interrupt.
 */
void HSEM_IRQHandler(void) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HSEM_IRQn 0 */

	/* USER CODE END HSEM_IRQn 0 */
	HAL_HSEM_IRQHandler();
 80011e2:	f002 fbff 	bl	80039e4 <HAL_HSEM_IRQHandler>
	/* USER CODE BEGIN HSEM_IRQn 1 */

	/* USER CODE END HSEM_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}

080011ea <LPTIM2_IRQHandler>:

/**
 * @brief This function handles LPTIM2 global interrupt.
 */
void LPTIM2_IRQHandler(void) {
 80011ea:	b480      	push	{r7}
 80011ec:	af00      	add	r7, sp, #0

	/* USER CODE END LPTIM2_IRQn 0 */
	/* USER CODE BEGIN LPTIM2_IRQn 1 */

	/* USER CODE END LPTIM2_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <SystemInit+0xa0>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8001202:	4b25      	ldr	r3, [pc, #148]	; (8001298 <SystemInit+0xa0>)
 8001204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001208:	4a23      	ldr	r2, [pc, #140]	; (8001298 <SystemInit+0xa0>)
 800120a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800120e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8001222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001226:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800122a:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 800122c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <SystemInit+0xa4>)
 8001238:	4013      	ands	r3, r2
 800123a:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001240:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001244:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001248:	f023 0305 	bic.w	r3, r3, #5
 800124c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8001250:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001254:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001258:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800125c:	f023 0301 	bic.w	r3, r3, #1
 8001260:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8001264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <SystemInit+0xa8>)
 800126a:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 800126c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001270:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <SystemInit+0xa8>)
 8001272:	611a      	str	r2, [r3, #16]
#endif
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001274:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	e000ed00 	.word	0xe000ed00
 800129c:	faf6fefb 	.word	0xfaf6fefb
 80012a0:	22041000 	.word	0x22041000

080012a4 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b087      	sub	sp, #28
 80012a8:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllr, pllsource , pllm;

  /* Get MSI Range frequency--------------------------------------------------*/

  /*MSI frequency range in Hz*/
  msirange = MSIRangeTable[(RCC->CR & RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos];
 80012aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	091b      	lsrs	r3, r3, #4
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	4a47      	ldr	r2, [pc, #284]	; (80013d4 <SystemCoreClockUpdate+0x130>)
 80012b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012bc:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c2:	689b      	ldr	r3, [r3, #8]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b0c      	cmp	r3, #12
 80012ca:	d867      	bhi.n	800139c <SystemCoreClockUpdate+0xf8>
 80012cc:	a201      	add	r2, pc, #4	; (adr r2, 80012d4 <SystemCoreClockUpdate+0x30>)
 80012ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012d2:	bf00      	nop
 80012d4:	08001309 	.word	0x08001309
 80012d8:	0800139d 	.word	0x0800139d
 80012dc:	0800139d 	.word	0x0800139d
 80012e0:	0800139d 	.word	0x0800139d
 80012e4:	08001311 	.word	0x08001311
 80012e8:	0800139d 	.word	0x0800139d
 80012ec:	0800139d 	.word	0x0800139d
 80012f0:	0800139d 	.word	0x0800139d
 80012f4:	08001319 	.word	0x08001319
 80012f8:	0800139d 	.word	0x0800139d
 80012fc:	0800139d 	.word	0x0800139d
 8001300:	0800139d 	.word	0x0800139d
 8001304:	08001321 	.word	0x08001321
  {
    case 0x00:   /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001308:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <SystemCoreClockUpdate+0x134>)
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	6013      	str	r3, [r2, #0]
      break;
 800130e:	e049      	b.n	80013a4 <SystemCoreClockUpdate+0x100>

    case 0x04:  /* HSI used as system clock source */
      /* HSI used as system clock source */
        SystemCoreClock = HSI_VALUE;
 8001310:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <SystemCoreClockUpdate+0x134>)
 8001312:	4a32      	ldr	r2, [pc, #200]	; (80013dc <SystemCoreClockUpdate+0x138>)
 8001314:	601a      	str	r2, [r3, #0]
      break;
 8001316:	e045      	b.n	80013a4 <SystemCoreClockUpdate+0x100>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001318:	4b2f      	ldr	r3, [pc, #188]	; (80013d8 <SystemCoreClockUpdate+0x134>)
 800131a:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <SystemCoreClockUpdate+0x13c>)
 800131c:	601a      	str	r2, [r3, #0]
      break;
 800131e:	e041      	b.n	80013a4 <SystemCoreClockUpdate+0x100>

    case 0x0C: /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001320:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001324:	68db      	ldr	r3, [r3, #12]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1UL ;
 800132c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001330:	68db      	ldr	r3, [r3, #12]
 8001332:	091b      	lsrs	r3, r3, #4
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	3301      	adds	r3, #1
 800133a:	60bb      	str	r3, [r7, #8]

      if(pllsource == 0x02UL) /* HSI used as PLL clock source */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d105      	bne.n	800134e <SystemCoreClockUpdate+0xaa>
      {
        pllvco = (HSI_VALUE / pllm);
 8001342:	4a26      	ldr	r2, [pc, #152]	; (80013dc <SystemCoreClockUpdate+0x138>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	fbb2 f3f3 	udiv	r3, r2, r3
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	e00d      	b.n	800136a <SystemCoreClockUpdate+0xc6>
      }
      else if(pllsource == 0x03UL) /* HSE used as PLL clock source */
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b03      	cmp	r3, #3
 8001352:	d105      	bne.n	8001360 <SystemCoreClockUpdate+0xbc>
      {
        pllvco = (HSE_VALUE / pllm);
 8001354:	4a22      	ldr	r2, [pc, #136]	; (80013e0 <SystemCoreClockUpdate+0x13c>)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	fbb2 f3f3 	udiv	r3, r2, r3
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	e004      	b.n	800136a <SystemCoreClockUpdate+0xc6>
      }
      else /* MSI used as PLL clock source */
      {
        pllvco = (msirange / pllm);
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	68bb      	ldr	r3, [r7, #8]
 8001364:	fbb2 f3f3 	udiv	r3, r2, r3
 8001368:	617b      	str	r3, [r7, #20]
      }
      
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800136a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1UL);
 800137e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	0f5b      	lsrs	r3, r3, #29
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	3301      	adds	r3, #1
 800138c:	607b      	str	r3, [r7, #4]
      
      SystemCoreClock = pllvco/pllr;
 800138e:	697a      	ldr	r2, [r7, #20]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	fbb2 f3f3 	udiv	r3, r2, r3
 8001396:	4a10      	ldr	r2, [pc, #64]	; (80013d8 <SystemCoreClockUpdate+0x134>)
 8001398:	6013      	str	r3, [r2, #0]
      break;
 800139a:	e003      	b.n	80013a4 <SystemCoreClockUpdate+0x100>

    default:
      SystemCoreClock = msirange;
 800139c:	4a0e      	ldr	r2, [pc, #56]	; (80013d8 <SystemCoreClockUpdate+0x134>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6013      	str	r3, [r2, #0]
      break;
 80013a2:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK1 prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80013a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	091b      	lsrs	r3, r3, #4
 80013ac:	f003 030f 	and.w	r3, r3, #15
 80013b0:	4a0c      	ldr	r2, [pc, #48]	; (80013e4 <SystemCoreClockUpdate+0x140>)
 80013b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013b6:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock = SystemCoreClock / tmp;
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <SystemCoreClockUpdate+0x134>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c2:	4a05      	ldr	r2, [pc, #20]	; (80013d8 <SystemCoreClockUpdate+0x134>)
 80013c4:	6013      	str	r3, [r2, #0]

}
 80013c6:	bf00      	nop
 80013c8:	371c      	adds	r7, #28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	08009970 	.word	0x08009970
 80013d8:	20000004 	.word	0x20000004
 80013dc:	00f42400 	.word	0x00f42400
 80013e0:	01e84800 	.word	0x01e84800
 80013e4:	08009930 	.word	0x08009930

080013e8 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 80013e8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ea:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ec:	3304      	adds	r3, #4

080013ee <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013ee:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f0:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 80013f2:	d3f9      	bcc.n	80013e8 <CopyDataInit>
  bx lr
 80013f4:	4770      	bx	lr

080013f6 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 80013f6:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 80013f8:	3004      	adds	r0, #4

080013fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 80013fa:	4288      	cmp	r0, r1
  bcc FillZerobss
 80013fc:	d3fb      	bcc.n	80013f6 <FillZerobss>
  bx lr
 80013fe:	4770      	bx	lr

08001400 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8001402:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001404:	f7ff fef8 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8001408:	480b      	ldr	r0, [pc, #44]	; (8001438 <LoopForever+0x8>)
 800140a:	490c      	ldr	r1, [pc, #48]	; (800143c <LoopForever+0xc>)
 800140c:	4a0c      	ldr	r2, [pc, #48]	; (8001440 <LoopForever+0x10>)
 800140e:	2300      	movs	r3, #0
 8001410:	f7ff ffed 	bl	80013ee <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8001414:	480b      	ldr	r0, [pc, #44]	; (8001444 <LoopForever+0x14>)
 8001416:	490c      	ldr	r1, [pc, #48]	; (8001448 <LoopForever+0x18>)
 8001418:	2300      	movs	r3, #0
 800141a:	f7ff ffee 	bl	80013fa <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <LoopForever+0x1c>)
 8001420:	490b      	ldr	r1, [pc, #44]	; (8001450 <LoopForever+0x20>)
 8001422:	2300      	movs	r3, #0
 8001424:	f7ff ffe9 	bl	80013fa <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001428:	f008 f970 	bl	800970c <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 800142c:	f7ff f922 	bl	8000674 <main>

08001430 <LoopForever>:

LoopForever:
  b LoopForever
 8001430:	e7fe      	b.n	8001430 <LoopForever>
 8001432:	0000      	.short	0x0000
  ldr   r0, =_estack
 8001434:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8001438:	20000004 	.word	0x20000004
 800143c:	20000030 	.word	0x20000030
 8001440:	080099f0 	.word	0x080099f0
  INIT_BSS _sbss, _ebss
 8001444:	200001b8 	.word	0x200001b8
 8001448:	200004c0 	.word	0x200004c0
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 800144c:	200301e0 	.word	0x200301e0
 8001450:	20030a57 	.word	0x20030a57

08001454 <AES1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001454:	e7fe      	b.n	8001454 <AES1_IRQHandler>
	...

08001458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_Init+0x3c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_Init+0x3c>)
 8001468:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800146c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800146e:	2003      	movs	r0, #3
 8001470:	f001 ffc8 	bl	8003404 <HAL_NVIC_SetPriorityGrouping>
  
  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001474:	2000      	movs	r0, #0
 8001476:	f000 f80f 	bl	8001498 <HAL_InitTick>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d002      	beq.n	8001486 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	71fb      	strb	r3, [r7, #7]
 8001484:	e001      	b.n	800148a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001486:	f7ff fd8e 	bl	8000fa6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800148a:	79fb      	ldrb	r3, [r7, #7]
}
 800148c:	4618      	mov	r0, r3
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	58004000 	.word	0x58004000

08001498 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_InitTick+0x6c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d024      	beq.n	80014f6 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/ (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014ac:	f003 fc28 	bl	8004d00 <HAL_RCC_GetHCLKFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_InitTick+0x6c>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014bc:	fbb3 f3f1 	udiv	r3, r3, r1
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	4618      	mov	r0, r3
 80014c6:	f001 ffd0 	bl	800346a <HAL_SYSTICK_Config>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d10f      	bne.n	80014f0 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	d809      	bhi.n	80014ea <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d6:	2200      	movs	r2, #0
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	f04f 30ff 	mov.w	r0, #4294967295
 80014de:	f001 ff9c 	bl	800341a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014e2:	4a09      	ldr	r2, [pc, #36]	; (8001508 <HAL_InitTick+0x70>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	e007      	b.n	80014fa <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	73fb      	strb	r3, [r7, #15]
 80014ee:	e004      	b.n	80014fa <HAL_InitTick+0x62>
      }
    }
    else
    {  
      status = HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	e001      	b.n	80014fa <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000000c 	.word	0x2000000c
 8001508:	20000008 	.word	0x20000008

0800150c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <HAL_IncTick+0x20>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	461a      	mov	r2, r3
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_IncTick+0x24>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4413      	add	r3, r2
 800151c:	4a04      	ldr	r2, [pc, #16]	; (8001530 <HAL_IncTick+0x24>)
 800151e:	6013      	str	r3, [r2, #0]
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	2000000c 	.word	0x2000000c
 8001530:	200004b8 	.word	0x200004b8

08001534 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  return uwTick;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <HAL_GetTick+0x14>)
 800153a:	681b      	ldr	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	200004b8 	.word	0x200004b8

0800154c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_GetTickPrio+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000008 	.word	0x20000008

08001564 <LL_ADC_SetCommonClock>:
 *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
 *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
 * @retval None
 */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON,
		uint32_t CommonClock) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
	MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	609a      	str	r2, [r3, #8]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr

0800158a <LL_ADC_SetCommonPathInternalCh>:
 *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
 *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
 * @retval None
 */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(
		ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal) {
 800158a:	b480      	push	{r7}
 800158c:	b083      	sub	sp, #12
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
	MODIFY_REG(ADCxy_COMMON->CCR,
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	609a      	str	r2, [r3, #8]
			ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <LL_ADC_GetCommonPathInternalCh>:
 *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
 *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
 *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
 */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(
		ADC_Common_TypeDef *ADCxy_COMMON) {
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
	return (uint32_t) (READ_BIT(ADCxy_COMMON->CCR,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	689b      	ldr	r3, [r3, #8]
 80015bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
			ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_SetOffset>:
 *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
 * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
 * @retval None
 */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety,
		uint32_t Channel, uint32_t OffsetLevel) {
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
 80015d8:	603b      	str	r3, [r7, #0]
	__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3360      	adds	r3, #96	; 0x60
 80015de:	461a      	mov	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	4413      	add	r3, r2
 80015e6:	617b      	str	r3, [r7, #20]

	MODIFY_REG(*preg,
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b08      	ldr	r3, [pc, #32]	; (8001610 <LL_ADC_SetOffset+0x44>)
 80015ee:	4013      	ands	r3, r2
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015f6:	683a      	ldr	r2, [r7, #0]
 80015f8:	430a      	orrs	r2, r1
 80015fa:	4313      	orrs	r3, r2
 80015fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	601a      	str	r2, [r3, #0]
			ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
			ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001604:	bf00      	nop
 8001606:	371c      	adds	r7, #28
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	03fff000 	.word	0x03fff000

08001614 <LL_ADC_GetOffsetChannel>:
 *         (4) For ADC channel read back from ADC register,
 *             comparison with internal channel parameter to be done
 *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
 */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx,
		uint32_t Offsety) {
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
	const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	3360      	adds	r3, #96	; 0x60
 8001622:	461a      	mov	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	4413      	add	r3, r2
 800162a:	60fb      	str	r3, [r7, #12]

	return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001634:	4618      	mov	r0, r3
 8001636:	3714      	adds	r7, #20
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <LL_ADC_SetOffsetState>:
 *         @arg @ref LL_ADC_OFFSET_DISABLE
 *         @arg @ref LL_ADC_OFFSET_ENABLE
 * @retval None
 */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety,
		uint32_t OffsetState) {
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
	__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3360      	adds	r3, #96	; 0x60
 8001650:	461a      	mov	r2, r3
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	4413      	add	r3, r2
 8001658:	617b      	str	r3, [r7, #20]

	MODIFY_REG(*preg, ADC_OFR1_OFFSET1_EN, OffsetState);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	431a      	orrs	r2, r3
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	601a      	str	r2, [r3, #0]
}
 800166a:	bf00      	nop
 800166c:	371c      	adds	r7, #28
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <LL_ADC_REG_SetSequencerRanks>:
 *         (7) On STM32WB, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
 *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
 * @retval None
 */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx,
		uint32_t Rank, uint32_t Channel) {
 8001676:	b480      	push	{r7}
 8001678:	b087      	sub	sp, #28
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
	/* Set bits with content of parameter "Channel" with bits position          */
	/* in register and register position depending on parameter "Rank".         */
	/* Parameters "Rank" and "Channel" are used with masks because containing   */
	/* other bits reserved for other purpose.                                   */
	__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	3330      	adds	r3, #48	; 0x30
 8001686:	461a      	mov	r2, r3
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	f003 030c 	and.w	r3, r3, #12
 8001692:	4413      	add	r3, r2
 8001694:	617b      	str	r3, [r7, #20]
			((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

	MODIFY_REG(*preg,
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68bb      	ldr	r3, [r7, #8]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	211f      	movs	r1, #31
 80016a2:	fa01 f303 	lsl.w	r3, r1, r3
 80016a6:	43db      	mvns	r3, r3
 80016a8:	401a      	ands	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	0e9b      	lsrs	r3, r3, #26
 80016ae:	f003 011f 	and.w	r1, r3, #31
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	f003 031f 	and.w	r3, r3, #31
 80016b8:	fa01 f303 	lsl.w	r3, r1, r3
 80016bc:	431a      	orrs	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	601a      	str	r2, [r3, #0]
			ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
			((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <LL_ADC_SetChannelSamplingTime>:
 *         @arg @ref LL_ADC_SAMPLINGTIME_247CYCLES_5
 *         @arg @ref LL_ADC_SAMPLINGTIME_640CYCLES_5
 * @retval None
 */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx,
		uint32_t Channel, uint32_t SamplingTime) {
 80016ce:	b480      	push	{r7}
 80016d0:	b087      	sub	sp, #28
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	60f8      	str	r0, [r7, #12]
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
	/* Set bits with content of parameter "SamplingTime" with bits position     */
	/* in register and register position depending on parameter "Channel".      */
	/* Parameter "Channel" is used with masks because containing                */
	/* other bits reserved for other purpose.                                   */
	__IO uint32_t *preg =
			__ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	3314      	adds	r3, #20
 80016de:	461a      	mov	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	0e5b      	lsrs	r3, r3, #25
 80016e4:	009b      	lsls	r3, r3, #2
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	4413      	add	r3, r2
	__IO uint32_t *preg =
 80016ec:	617b      	str	r3, [r7, #20]
					((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

	MODIFY_REG(*preg,
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	0d1b      	lsrs	r3, r3, #20
 80016f6:	f003 031f 	and.w	r3, r3, #31
 80016fa:	2107      	movs	r1, #7
 80016fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001700:	43db      	mvns	r3, r3
 8001702:	401a      	ands	r2, r3
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	0d1b      	lsrs	r3, r3, #20
 8001708:	f003 031f 	and.w	r3, r3, #31
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	431a      	orrs	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	601a      	str	r2, [r3, #0]
			ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
			SamplingTime << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001718:	bf00      	nop
 800171a:	371c      	adds	r7, #28
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <LL_ADC_SetChannelSingleDiff>:
 *         @arg @ref LL_ADC_SINGLE_ENDED
 *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
 * @retval None
 */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx,
		uint32_t Channel, uint32_t SingleDiff) {
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
	/* Bits of channels in single or differential mode are set only for         */
	/* differential mode (for single mode, mask of bits allowed to be set is    */
	/* shifted out of range of bits of channels in single or differential mode. */
	MODIFY_REG(ADCx->DIFSEL, Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f003 0318 	and.w	r3, r3, #24
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001748:	40d9      	lsrs	r1, r3
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	400b      	ands	r3, r1
 800174e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001752:	431a      	orrs	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
			(Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800175a:	bf00      	nop
 800175c:	3714      	adds	r7, #20
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	0007ffff 	.word	0x0007ffff

0800176c <LL_ADC_SetAnalogWDMonitChannels>:
 *
 *         (0) On STM32WB, parameter available only on analog watchdog number: AWD1.
 * @retval None
 */
__STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx,
		uint32_t AWDy, uint32_t AWDChannelGroup) {
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	/* Set bits with content of parameter "AWDChannelGroup" with bits position  */
	/* in register and register position depending on parameter "AWDy".         */
	/* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
	/* containing other bits reserved for other purpose.                        */
	__IO uint32_t *preg =
			__ADC_PTR_REG_OFFSET(ADCx->CFGR,
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	330c      	adds	r3, #12
 800177c:	4618      	mov	r0, r3
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	0d1b      	lsrs	r3, r3, #20
 8001782:	f003 0103 	and.w	r1, r3, #3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	f003 0201 	and.w	r2, r3, #1
 800178c:	4613      	mov	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	4413      	add	r3, r2
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	440b      	add	r3, r1
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4403      	add	r3, r0
	__IO uint32_t *preg =
 800179a:	617b      	str	r3, [r7, #20]
					((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> ADC_AWD_CRX_REGOFFSET_POS) + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * ADC_AWD_CR12_REGOFFSETGAP_VAL));

	MODIFY_REG(*preg, (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	f023 4302 	bic.w	r3, r3, #2181038080	; 0x82000000
 80017a6:	f423 1360 	bic.w	r3, r3, #3670016	; 0x380000
 80017aa:	43db      	mvns	r3, r3
 80017ac:	401a      	ands	r2, r3
 80017ae:	6879      	ldr	r1, [r7, #4]
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	400b      	ands	r3, r1
 80017b4:	431a      	orrs	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	601a      	str	r2, [r3, #0]
			AWDChannelGroup & AWDy);
}
 80017ba:	bf00      	nop
 80017bc:	371c      	adds	r7, #28
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <LL_ADC_ConfigAnalogWDThresholds>:
 * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
 * @retval None
 */
__STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx,
		uint32_t AWDy, uint32_t AWDThresholdHighValue,
		uint32_t AWDThresholdLowValue) {
 80017c6:	b480      	push	{r7}
 80017c8:	b087      	sub	sp, #28
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	60f8      	str	r0, [r7, #12]
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	607a      	str	r2, [r7, #4]
 80017d2:	603b      	str	r3, [r7, #0]
	/* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
	/* position in register and register position depending on parameter        */
	/* "AWDy".                                                                  */
	/* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
	/* containing other bits reserved for other purpose.                        */
	__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->TR1,
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	3320      	adds	r3, #32
 80017d8:	461a      	mov	r2, r3
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	0d1b      	lsrs	r3, r3, #20
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	f003 030c 	and.w	r3, r3, #12
 80017e4:	4413      	add	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
			((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> ADC_AWD_TRX_REGOFFSET_POS));

	MODIFY_REG(*preg, ADC_TR1_HT1 | ADC_TR1_LT1,
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 22f0 	and.w	r2, r3, #4026593280	; 0xf000f000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	0419      	lsls	r1, r3, #16
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	430b      	orrs	r3, r1
 80017f8:	431a      	orrs	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	601a      	str	r2, [r3, #0]
			(AWDThresholdHighValue << ADC_TR1_HT1_BITOFFSET_POS) | AWDThresholdLowValue);
}
 80017fe:	bf00      	nop
 8001800:	371c      	adds	r7, #28
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr

0800180a <LL_ADC_DisableDeepPowerDown>:
 *         ADC must be ADC disabled.
 * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx) {
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
	/* Note: Write register with some additional bits forced to state reset     */
	/*       instead of modifying only the selected bit for this function,      */
	/*       to not interfere with bits with HW property "rs".                  */
	CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800181a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6093      	str	r3, [r2, #8]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_ADC_IsDeepPowerDownEnabled>:
 * @brief  Get the selected ADC instance deep power down state.
 * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
 * @param  ADCx ADC instance
 * @retval 0: deep power down is disabled, 1: deep power down is enabled.
 */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx) {
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800183e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001842:	d101      	bne.n	8001848 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001844:	2301      	movs	r3, #1
 8001846:	e000      	b.n	800184a <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_EnableInternalRegulator>:
 *         ADC must be ADC disabled.
 * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx) {
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
	/* Note: Write register with some additional bits forced to state reset     */
	/*       instead of modifying only the selected bit for this function,      */
	/*       to not interfere with bits with HW property "rs".                  */
	MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001866:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800186a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	609a      	str	r2, [r3, #8]
}
 8001872:	bf00      	nop
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <LL_ADC_IsInternalRegulatorEnabled>:
 * @brief  Get the selected ADC instance internal voltage regulator state.
 * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
 * @param  ADCx ADC instance
 * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
 */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx) {
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ?
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
			1UL : 0UL);
 800188e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001892:	d101      	bne.n	8001898 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <LL_ADC_IsEnabled>:
 *         (not only core clock: this ADC has a dual clock domain)
 * @rmtoll CR       ADEN           LL_ADC_IsEnabled
 * @param  ADCx ADC instance
 * @retval 0: ADC is disabled, 1: ADC is enabled.
 */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx) {
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 0301 	and.w	r3, r3, #1
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d101      	bne.n	80018be <LL_ADC_IsEnabled+0x18>
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <LL_ADC_IsEnabled+0x1a>
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <LL_ADC_REG_IsConversionOngoing>:
 * @brief  Get ADC group regular conversion state.
 * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
 * @param  ADCx ADC instance
 * @retval 0: no conversion is on going on ADC group regular.
 */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx) {
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b04      	cmp	r3, #4
 80018de:	d101      	bne.n	80018e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018e0:	2301      	movs	r3, #1
 80018e2:	e000      	b.n	80018e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <LL_ADC_INJ_IsConversionOngoing>:
 * @brief  Get ADC group injected conversion state.
 * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
 * @param  ADCx ADC instance
 * @retval 0: no conversion is on going on ADC group injected.
 */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx) {
 80018f2:	b480      	push	{r7}
 80018f4:	b083      	sub	sp, #12
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ?
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 0308 	and.w	r3, r3, #8
			1UL : 0UL);
 8001902:	2b08      	cmp	r3, #8
 8001904:	d101      	bne.n	800190a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <LL_ADC_ClearFlag_AWD1>:
 * @brief  Clear flag ADC analog watchdog 1.
 * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx) {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2280      	movs	r2, #128	; 0x80
 8001924:	601a      	str	r2, [r3, #0]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <LL_ADC_ClearFlag_AWD2>:
 * @brief  Clear flag ADC analog watchdog 2.
 * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx) {
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001940:	601a      	str	r2, [r3, #0]
}
 8001942:	bf00      	nop
 8001944:	370c      	adds	r7, #12
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr

0800194e <LL_ADC_ClearFlag_AWD3>:
 * @brief  Clear flag ADC analog watchdog 3.
 * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx) {
 800194e:	b480      	push	{r7}
 8001950:	b083      	sub	sp, #12
 8001952:	af00      	add	r7, sp, #0
 8001954:	6078      	str	r0, [r7, #4]
	WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f44f 7200 	mov.w	r2, #512	; 0x200
 800195c:	601a      	str	r2, [r3, #0]
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr

0800196a <LL_ADC_EnableIT_AWD1>:
 * @brief  Enable interruption ADC analog watchdog 1.
 * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx) {
 800196a:	b480      	push	{r7}
 800196c:	b083      	sub	sp, #12
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
	SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	605a      	str	r2, [r3, #4]
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <LL_ADC_EnableIT_AWD2>:
 * @brief  Enable interruption ADC analog watchdog 2.
 * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx) {
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
	SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	605a      	str	r2, [r3, #4]
}
 800199e:	bf00      	nop
 80019a0:	370c      	adds	r7, #12
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <LL_ADC_EnableIT_AWD3>:
 * @brief  Enable interruption ADC analog watchdog 3.
 * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx) {
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
	SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <LL_ADC_DisableIT_AWD1>:
 * @brief  Disable interruption ADC analog watchdog 1.
 * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx) {
 80019ca:	b480      	push	{r7}
 80019cc:	b083      	sub	sp, #12
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	605a      	str	r2, [r3, #4]
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr

080019ea <LL_ADC_DisableIT_AWD2>:
 * @brief  Disable interruption ADC analog watchdog 2.
 * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx) {
 80019ea:	b480      	push	{r7}
 80019ec:	b083      	sub	sp, #12
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	605a      	str	r2, [r3, #4]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <LL_ADC_DisableIT_AWD3>:
 * @brief  Disable interruption ADC analog watchdog 3.
 * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
 * @param  ADCx ADC instance
 * @retval None
 */
__STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx) {
 8001a0a:	b480      	push	{r7}
 8001a0c:	b083      	sub	sp, #12
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
	CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	605a      	str	r2, [r3, #4]
}
 8001a1e:	bf00      	nop
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b088      	sub	sp, #32
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e12a      	b.n	8001c9c <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	691b      	ldr	r3, [r3, #16]
 8001a4a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d109      	bne.n	8001a68 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff fab7 	bl	8000fc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fede 	bl	800182e <LL_ADC_IsDeepPowerDownEnabled>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d004      	beq.n	8001a82 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff fec4 	bl	800180a <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fef9 	bl	800187e <LL_ADC_IsInternalRegulatorEnabled>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d113      	bne.n	8001aba <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f7ff fedd 	bl	8001856 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a9c:	4b81      	ldr	r3, [pc, #516]	; (8001ca4 <HAL_ADC_Init+0x278>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	099b      	lsrs	r3, r3, #6
 8001aa2:	4a81      	ldr	r2, [pc, #516]	; (8001ca8 <HAL_ADC_Init+0x27c>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	099b      	lsrs	r3, r3, #6
 8001aaa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001aac:	e002      	b.n	8001ab4 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f9      	bne.n	8001aae <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fedd 	bl	800187e <LL_ADC_IsInternalRegulatorEnabled>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d10d      	bne.n	8001ae6 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ace:	f043 0210 	orr.w	r2, r3, #16
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ada:	f043 0201 	orr.w	r2, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff feee 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001af0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f040 80c5 	bne.w	8001c8a <HAL_ADC_Init+0x25e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80c1 	bne.w	8001c8a <HAL_ADC_Init+0x25e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b0c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b10:	f043 0202 	orr.w	r2, r3, #2
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff fec2 	bl	80018a6 <LL_ADC_IsEnabled>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d10b      	bne.n	8001b40 <HAL_ADC_Init+0x114>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001b28:	4860      	ldr	r0, [pc, #384]	; (8001cac <HAL_ADC_Init+0x280>)
 8001b2a:	f7ff febc 	bl	80018a6 <LL_ADC_IsEnabled>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d105      	bne.n	8001b40 <HAL_ADC_Init+0x114>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	485d      	ldr	r0, [pc, #372]	; (8001cb0 <HAL_ADC_Init+0x284>)
 8001b3c:	f7ff fd12 	bl	8001564 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	7e5b      	ldrb	r3, [r3, #25]
 8001b44:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b4a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b50:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b56:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b5e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d106      	bne.n	8001b7c <HAL_ADC_Init+0x150>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	3b01      	subs	r3, #1
 8001b74:	045b      	lsls	r3, r3, #17
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d009      	beq.n	8001b98 <HAL_ADC_Init+0x16c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b88:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	68da      	ldr	r2, [r3, #12]
 8001b9e:	4b45      	ldr	r3, [pc, #276]	; (8001cb4 <HAL_ADC_Init+0x288>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6812      	ldr	r2, [r2, #0]
 8001ba6:	69b9      	ldr	r1, [r7, #24]
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fe8b 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001bb6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff fe98 	bl	80018f2 <LL_ADC_INJ_IsConversionOngoing>
 8001bc2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d13d      	bne.n	8001c46 <HAL_ADC_Init+0x21a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d13a      	bne.n	8001c46 <HAL_ADC_Init+0x21a>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bd4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001bdc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bec:	f023 0302 	bic.w	r3, r3, #2
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	69b9      	ldr	r1, [r7, #24]
 8001bf6:	430b      	orrs	r3, r1
 8001bf8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d118      	bne.n	8001c36 <HAL_ADC_Init+0x20a>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c0e:	f023 0304 	bic.w	r3, r3, #4
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1a:	4311      	orrs	r1, r2
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001c20:	4311      	orrs	r1, r2
 8001c22:	687a      	ldr	r2, [r7, #4]
 8001c24:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c26:	430a      	orrs	r2, r1
 8001c28:	431a      	orrs	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	611a      	str	r2, [r3, #16]
 8001c34:	e007      	b.n	8001c46 <HAL_ADC_Init+0x21a>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f022 0201 	bic.w	r2, r2, #1
 8001c44:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d10c      	bne.n	8001c68 <HAL_ADC_Init+0x23c>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c54:	f023 010f 	bic.w	r1, r3, #15
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	69db      	ldr	r3, [r3, #28]
 8001c5c:	1e5a      	subs	r2, r3, #1
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	430a      	orrs	r2, r1
 8001c64:	631a      	str	r2, [r3, #48]	; 0x30
 8001c66:	e007      	b.n	8001c78 <HAL_ADC_Init+0x24c>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f022 020f 	bic.w	r2, r2, #15
 8001c76:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c7c:	f023 0303 	bic.w	r3, r3, #3
 8001c80:	f043 0201 	orr.w	r2, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54
 8001c88:	e007      	b.n	8001c9a <HAL_ADC_Init+0x26e>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	f043 0210 	orr.w	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c9a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3720      	adds	r7, #32
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000004 	.word	0x20000004
 8001ca8:	053e2d63 	.word	0x053e2d63
 8001cac:	50040000 	.word	0x50040000
 8001cb0:	50040300 	.word	0x50040300
 8001cb4:	fff0c007 	.word	0xfff0c007

08001cb8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b0a6      	sub	sp, #152	; 0x98
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d101      	bne.n	8001cda <HAL_ADC_ConfigChannel+0x22>
 8001cd6:	2302      	movs	r3, #2
 8001cd8:	e31e      	b.n	8002318 <HAL_ADC_ConfigChannel+0x660>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2201      	movs	r2, #1
 8001cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fdf0 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8303 	bne.w	80022fa <HAL_ADC_ConfigChannel+0x642>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6818      	ldr	r0, [r3, #0]
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	6859      	ldr	r1, [r3, #4]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	461a      	mov	r2, r3
 8001d02:	f7ff fcb8 	bl	8001676 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff fdde 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 8001d10:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f7ff fdea 	bl	80018f2 <LL_ADC_INJ_IsConversionOngoing>
 8001d1e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f040 8148 	bne.w	8001fbc <HAL_ADC_ConfigChannel+0x304>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	f040 8143 	bne.w	8001fbc <HAL_ADC_ConfigChannel+0x304>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f7ff fcc3 	bl	80016ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	695a      	ldr	r2, [r3, #20]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	08db      	lsrs	r3, r3, #3
 8001d54:	f003 0303 	and.w	r3, r3, #3
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	2b04      	cmp	r3, #4
 8001d68:	d00a      	beq.n	8001d80 <HAL_ADC_ConfigChannel+0xc8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6818      	ldr	r0, [r3, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	6919      	ldr	r1, [r3, #16]
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d7a:	f7ff fc27 	bl	80015cc <LL_ADC_SetOffset>
 8001d7e:	e11d      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x304>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff fc44 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10a      	bne.n	8001dac <HAL_ADC_ConfigChannel+0xf4>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fc39 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001da2:	4603      	mov	r3, r0
 8001da4:	0e9b      	lsrs	r3, r3, #26
 8001da6:	f003 021f 	and.w	r2, r3, #31
 8001daa:	e012      	b.n	8001dd2 <HAL_ADC_ConfigChannel+0x11a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc2e 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001db8:	4603      	mov	r3, r0
 8001dba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dbe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	67fb      	str	r3, [r7, #124]	; 0x7c
	return result;
 8001dc8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d105      	bne.n	8001dea <HAL_ADC_ConfigChannel+0x132>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	0e9b      	lsrs	r3, r3, #26
 8001de4:	f003 031f 	and.w	r3, r3, #31
 8001de8:	e00a      	b.n	8001e00 <HAL_ADC_ConfigChannel+0x148>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	67bb      	str	r3, [r7, #120]	; 0x78
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001df2:	fa93 f3a3 	rbit	r3, r3
 8001df6:	677b      	str	r3, [r7, #116]	; 0x74
	return result;
 8001df8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d106      	bne.n	8001e12 <HAL_ADC_ConfigChannel+0x15a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fc17 	bl	8001640 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	2101      	movs	r1, #1
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fbfb 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10a      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x186>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fbf0 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001e34:	4603      	mov	r3, r0
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	f003 021f 	and.w	r2, r3, #31
 8001e3c:	e010      	b.n	8001e60 <HAL_ADC_ConfigChannel+0x1a8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2101      	movs	r1, #1
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7ff fbe5 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	673b      	str	r3, [r7, #112]	; 0x70
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e50:	fa93 f3a3 	rbit	r3, r3
 8001e54:	66fb      	str	r3, [r7, #108]	; 0x6c
	return result;
 8001e56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	461a      	mov	r2, r3
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_ConfigChannel+0x1c0>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	0e9b      	lsrs	r3, r3, #26
 8001e72:	f003 031f 	and.w	r3, r3, #31
 8001e76:	e00a      	b.n	8001e8e <HAL_ADC_ConfigChannel+0x1d6>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	66bb      	str	r3, [r7, #104]	; 0x68
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	667b      	str	r3, [r7, #100]	; 0x64
	return result;
 8001e86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e88:	fab3 f383 	clz	r3, r3
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d106      	bne.n	8001ea0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2200      	movs	r2, #0
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f7ff fbd0 	bl	8001640 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff fbb4 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d10a      	bne.n	8001ecc <HAL_ADC_ConfigChannel+0x214>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2102      	movs	r1, #2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fba9 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	0e9b      	lsrs	r3, r3, #26
 8001ec6:	f003 021f 	and.w	r2, r3, #31
 8001eca:	e010      	b.n	8001eee <HAL_ADC_ConfigChannel+0x236>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2102      	movs	r1, #2
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fb9e 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	663b      	str	r3, [r7, #96]	; 0x60
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
	return result;
 8001ee4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ee6:	fab3 f383 	clz	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	461a      	mov	r2, r3
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_ADC_ConfigChannel+0x24e>
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	0e9b      	lsrs	r3, r3, #26
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	e00a      	b.n	8001f1c <HAL_ADC_ConfigChannel+0x264>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	65bb      	str	r3, [r7, #88]	; 0x58
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f0e:	fa93 f3a3 	rbit	r3, r3
 8001f12:	657b      	str	r3, [r7, #84]	; 0x54
	return result;
 8001f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001f16:	fab3 f383 	clz	r3, r3
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d106      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x276>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2200      	movs	r2, #0
 8001f26:	2102      	movs	r1, #2
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff fb89 	bl	8001640 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2103      	movs	r1, #3
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7ff fb6d 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x2a2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2103      	movs	r1, #3
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff fb62 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001f50:	4603      	mov	r3, r0
 8001f52:	0e9b      	lsrs	r3, r3, #26
 8001f54:	f003 021f 	and.w	r2, r3, #31
 8001f58:	e010      	b.n	8001f7c <HAL_ADC_ConfigChannel+0x2c4>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2103      	movs	r1, #3
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff fb57 	bl	8001614 <LL_ADC_GetOffsetChannel>
 8001f66:	4603      	mov	r3, r0
 8001f68:	653b      	str	r3, [r7, #80]	; 0x50
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f6c:	fa93 f3a3 	rbit	r3, r3
 8001f70:	64fb      	str	r3, [r7, #76]	; 0x4c
	return result;
 8001f72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f74:	fab3 f383 	clz	r3, r3
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d105      	bne.n	8001f94 <HAL_ADC_ConfigChannel+0x2dc>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	0e9b      	lsrs	r3, r3, #26
 8001f8e:	f003 031f 	and.w	r3, r3, #31
 8001f92:	e00a      	b.n	8001faa <HAL_ADC_ConfigChannel+0x2f2>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	64bb      	str	r3, [r7, #72]	; 0x48
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	647b      	str	r3, [r7, #68]	; 0x44
	return result;
 8001fa2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001fa4:	fab3 f383 	clz	r3, r3
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d106      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x304>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fb42 	bl	8001640 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff fc70 	bl	80018a6 <LL_ADC_IsEnabled>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f040 819f 	bne.w	800230c <HAL_ADC_ConfigChannel+0x654>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6818      	ldr	r0, [r3, #0]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6819      	ldr	r1, [r3, #0]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	461a      	mov	r2, r3
 8001fdc:	f7ff fba2 	bl	8001724 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4aab      	ldr	r2, [pc, #684]	; (8002294 <HAL_ADC_ConfigChannel+0x5dc>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	f040 80fd 	bne.w	80021e6 <HAL_ADC_ConfigChannel+0x52e>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x35c>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	0e9b      	lsrs	r3, r3, #26
 8002002:	3301      	adds	r3, #1
 8002004:	f003 031f 	and.w	r3, r3, #31
 8002008:	2b09      	cmp	r3, #9
 800200a:	bf94      	ite	ls
 800200c:	2301      	movls	r3, #1
 800200e:	2300      	movhi	r3, #0
 8002010:	b2db      	uxtb	r3, r3
 8002012:	e012      	b.n	800203a <HAL_ADC_ConfigChannel+0x382>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	643b      	str	r3, [r7, #64]	; 0x40
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	63fb      	str	r3, [r7, #60]	; 0x3c
	return result;
 8002022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	b2db      	uxtb	r3, r3
 800202a:	3301      	adds	r3, #1
 800202c:	f003 031f 	and.w	r3, r3, #31
 8002030:	2b09      	cmp	r3, #9
 8002032:	bf94      	ite	ls
 8002034:	2301      	movls	r3, #1
 8002036:	2300      	movhi	r3, #0
 8002038:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800203a:	2b00      	cmp	r3, #0
 800203c:	d064      	beq.n	8002108 <HAL_ADC_ConfigChannel+0x450>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002046:	2b00      	cmp	r3, #0
 8002048:	d107      	bne.n	800205a <HAL_ADC_ConfigChannel+0x3a2>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	0e9b      	lsrs	r3, r3, #26
 8002050:	3301      	adds	r3, #1
 8002052:	069b      	lsls	r3, r3, #26
 8002054:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002058:	e00e      	b.n	8002078 <HAL_ADC_ConfigChannel+0x3c0>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	63bb      	str	r3, [r7, #56]	; 0x38
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002062:	fa93 f3a3 	rbit	r3, r3
 8002066:	637b      	str	r3, [r7, #52]	; 0x34
	return result;
 8002068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	069b      	lsls	r3, r3, #26
 8002074:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x3e0>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	3301      	adds	r3, #1
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	e010      	b.n	80020ba <HAL_ADC_ConfigChannel+0x402>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	return result;
 80020a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	2101      	movs	r1, #1
 80020b6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ba:	ea42 0103 	orr.w	r1, r2, r3
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10a      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x428>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	0e9b      	lsrs	r3, r3, #26
 80020d0:	3301      	adds	r3, #1
 80020d2:	f003 021f 	and.w	r2, r3, #31
 80020d6:	4613      	mov	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	4413      	add	r3, r2
 80020dc:	051b      	lsls	r3, r3, #20
 80020de:	e011      	b.n	8002104 <HAL_ADC_ConfigChannel+0x44c>
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020e8:	fa93 f3a3 	rbit	r3, r3
 80020ec:	627b      	str	r3, [r7, #36]	; 0x24
	return result;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	fab3 f383 	clz	r3, r3
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f003 021f 	and.w	r2, r3, #31
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002104:	430b      	orrs	r3, r1
 8002106:	e069      	b.n	80021dc <HAL_ADC_ConfigChannel+0x524>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_ADC_ConfigChannel+0x46c>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	0e9b      	lsrs	r3, r3, #26
 800211a:	3301      	adds	r3, #1
 800211c:	069b      	lsls	r3, r3, #26
 800211e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002122:	e00e      	b.n	8002142 <HAL_ADC_ConfigChannel+0x48a>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	623b      	str	r3, [r7, #32]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	fa93 f3a3 	rbit	r3, r3
 8002130:	61fb      	str	r3, [r7, #28]
	return result;
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	3301      	adds	r3, #1
 800213c:	069b      	lsls	r3, r3, #26
 800213e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214a:	2b00      	cmp	r3, #0
 800214c:	d109      	bne.n	8002162 <HAL_ADC_ConfigChannel+0x4aa>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	0e9b      	lsrs	r3, r3, #26
 8002154:	3301      	adds	r3, #1
 8002156:	f003 031f 	and.w	r3, r3, #31
 800215a:	2101      	movs	r1, #1
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	e010      	b.n	8002184 <HAL_ADC_ConfigChannel+0x4cc>
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	617b      	str	r3, [r7, #20]
	return result;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	fab3 f383 	clz	r3, r3
 8002176:	b2db      	uxtb	r3, r3
 8002178:	3301      	adds	r3, #1
 800217a:	f003 031f 	and.w	r3, r3, #31
 800217e:	2101      	movs	r1, #1
 8002180:	fa01 f303 	lsl.w	r3, r1, r3
 8002184:	ea42 0103 	orr.w	r1, r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002190:	2b00      	cmp	r3, #0
 8002192:	d10d      	bne.n	80021b0 <HAL_ADC_ConfigChannel+0x4f8>
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	0e9b      	lsrs	r3, r3, #26
 800219a:	3301      	adds	r3, #1
 800219c:	f003 021f 	and.w	r2, r3, #31
 80021a0:	4613      	mov	r3, r2
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	4413      	add	r3, r2
 80021a6:	3b1e      	subs	r3, #30
 80021a8:	051b      	lsls	r3, r3, #20
 80021aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021ae:	e014      	b.n	80021da <HAL_ADC_ConfigChannel+0x522>
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	613b      	str	r3, [r7, #16]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	60fb      	str	r3, [r7, #12]
	return result;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	fab3 f383 	clz	r3, r3
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	3301      	adds	r3, #1
 80021c8:	f003 021f 	and.w	r2, r3, #31
 80021cc:	4613      	mov	r3, r2
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	4413      	add	r3, r2
 80021d2:	3b1e      	subs	r3, #30
 80021d4:	051b      	lsls	r3, r3, #20
 80021d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021da:	430b      	orrs	r3, r1
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	6892      	ldr	r2, [r2, #8]
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7ff fa74 	bl	80016ce <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	4b2b      	ldr	r3, [pc, #172]	; (8002298 <HAL_ADC_ConfigChannel+0x5e0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 808c 	beq.w	800230c <HAL_ADC_ConfigChannel+0x654>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021f4:	4829      	ldr	r0, [pc, #164]	; (800229c <HAL_ADC_ConfigChannel+0x5e4>)
 80021f6:	f7ff f9db 	bl	80015b0 <LL_ADC_GetCommonPathInternalCh>
 80021fa:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021fe:	4828      	ldr	r0, [pc, #160]	; (80022a0 <HAL_ADC_ConfigChannel+0x5e8>)
 8002200:	f7ff fb51 	bl	80018a6 <LL_ADC_IsEnabled>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d16d      	bne.n	80022e6 <HAL_ADC_ConfigChannel+0x62e>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a25      	ldr	r2, [pc, #148]	; (80022a4 <HAL_ADC_ConfigChannel+0x5ec>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d126      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x5aa>
 8002214:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d120      	bne.n	8002262 <HAL_ADC_ConfigChannel+0x5aa>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1e      	ldr	r2, [pc, #120]	; (80022a0 <HAL_ADC_ConfigChannel+0x5e8>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d170      	bne.n	800230c <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800222a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800222e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002232:	4619      	mov	r1, r3
 8002234:	4819      	ldr	r0, [pc, #100]	; (800229c <HAL_ADC_ConfigChannel+0x5e4>)
 8002236:	f7ff f9a8 	bl	800158a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <HAL_ADC_ConfigChannel+0x5f0>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	099b      	lsrs	r3, r3, #6
 8002240:	4a1a      	ldr	r2, [pc, #104]	; (80022ac <HAL_ADC_ConfigChannel+0x5f4>)
 8002242:	fba2 2303 	umull	r2, r3, r2, r3
 8002246:	099a      	lsrs	r2, r3, #6
 8002248:	4613      	mov	r3, r2
 800224a:	005b      	lsls	r3, r3, #1
 800224c:	4413      	add	r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 8002252:	e002      	b.n	800225a <HAL_ADC_ConfigChannel+0x5a2>
              {
                wait_loop_index--;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	3b01      	subs	r3, #1
 8002258:	60bb      	str	r3, [r7, #8]
              while(wait_loop_index != 0UL)
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1f9      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x59c>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002260:	e054      	b.n	800230c <HAL_ADC_ConfigChannel+0x654>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a12      	ldr	r2, [pc, #72]	; (80022b0 <HAL_ADC_ConfigChannel+0x5f8>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d123      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x5fc>
 800226c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002270:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d11d      	bne.n	80022b4 <HAL_ADC_ConfigChannel+0x5fc>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_ADC_ConfigChannel+0x5e8>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d144      	bne.n	800230c <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002282:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800228a:	4619      	mov	r1, r3
 800228c:	4803      	ldr	r0, [pc, #12]	; (800229c <HAL_ADC_ConfigChannel+0x5e4>)
 800228e:	f7ff f97c 	bl	800158a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002292:	e03b      	b.n	800230c <HAL_ADC_ConfigChannel+0x654>
 8002294:	407f0000 	.word	0x407f0000
 8002298:	80080000 	.word	0x80080000
 800229c:	50040300 	.word	0x50040300
 80022a0:	50040000 	.word	0x50040000
 80022a4:	c7520000 	.word	0xc7520000
 80022a8:	20000004 	.word	0x20000004
 80022ac:	053e2d63 	.word	0x053e2d63
 80022b0:	cb840000 	.word	0xcb840000
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_ADC_ConfigChannel+0x668>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d126      	bne.n	800230c <HAL_ADC_ConfigChannel+0x654>
 80022be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d120      	bne.n	800230c <HAL_ADC_ConfigChannel+0x654>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_ADC_ConfigChannel+0x66c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d11b      	bne.n	800230c <HAL_ADC_ConfigChannel+0x654>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80022d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022dc:	4619      	mov	r1, r3
 80022de:	4812      	ldr	r0, [pc, #72]	; (8002328 <HAL_ADC_ConfigChannel+0x670>)
 80022e0:	f7ff f953 	bl	800158a <LL_ADC_SetCommonPathInternalCh>
 80022e4:	e012      	b.n	800230c <HAL_ADC_ConfigChannel+0x654>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ea:	f043 0220 	orr.w	r2, r3, #32
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80022f8:	e008      	b.n	800230c <HAL_ADC_ConfigChannel+0x654>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0220 	orr.w	r2, r3, #32
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002314:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002318:	4618      	mov	r0, r3
 800231a:	3798      	adds	r7, #152	; 0x98
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	80000001 	.word	0x80000001
 8002324:	50040000 	.word	0x50040000
 8002328:	50040300 	.word	0x50040300

0800232c <HAL_ADC_AnalogWDGConfig>:
  * @param hadc ADC handle
  * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *AnalogWDGConfig)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08c      	sub	sp, #48	; 0x30
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002336:	2300      	movs	r3, #0
 8002338:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
  assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
  assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));

  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002344:	d003      	beq.n	800234e <HAL_ADC_AnalogWDGConfig+0x22>
      (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
  if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
 800234a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
    assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADC_AnalogWDGConfig+0x30>
 8002358:	2302      	movs	r3, #2
 800235a:	e1da      	b.n	8002712 <HAL_ADC_AnalogWDGConfig+0x3e6>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on ADC groups regular and injected:                  */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff faaf 	bl	80018cc <LL_ADC_REG_IsConversionOngoing>
 800236e:	62b8      	str	r0, [r7, #40]	; 0x28
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fabc 	bl	80018f2 <LL_ADC_INJ_IsConversionOngoing>
 800237a:	6278      	str	r0, [r7, #36]	; 0x24
  if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800237c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800237e:	2b00      	cmp	r3, #0
 8002380:	f040 81b8 	bne.w	80026f4 <HAL_ADC_AnalogWDGConfig+0x3c8>
      && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	2b00      	cmp	r3, #0
 8002388:	f040 81b4 	bne.w	80026f4 <HAL_ADC_AnalogWDGConfig+0x3c8>
     )
  {
    /* Analog watchdog configuration */
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4aa2      	ldr	r2, [pc, #648]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	f040 80a2 	bne.w	80024dc <HAL_ADC_AnalogWDGConfig+0x1b0>
    {
      /* Configuration of analog watchdog:                                    */
      /*  - Set the analog watchdog enable mode: one or overall group of      */
      /*    channels, on groups regular and-or injected.                      */
      switch (AnalogWDGConfig->WatchdogMode)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80023a0:	d034      	beq.n	800240c <HAL_ADC_AnalogWDGConfig+0xe0>
 80023a2:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80023a6:	d856      	bhi.n	8002456 <HAL_ADC_AnalogWDGConfig+0x12a>
 80023a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ac:	d04b      	beq.n	8002446 <HAL_ADC_AnalogWDGConfig+0x11a>
 80023ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023b2:	d850      	bhi.n	8002456 <HAL_ADC_AnalogWDGConfig+0x12a>
 80023b4:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80023b8:	d01b      	beq.n	80023f2 <HAL_ADC_AnalogWDGConfig+0xc6>
 80023ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80023be:	d84a      	bhi.n	8002456 <HAL_ADC_AnalogWDGConfig+0x12a>
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023c4:	d037      	beq.n	8002436 <HAL_ADC_AnalogWDGConfig+0x10a>
 80023c6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023ca:	d844      	bhi.n	8002456 <HAL_ADC_AnalogWDGConfig+0x12a>
 80023cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023d0:	d029      	beq.n	8002426 <HAL_ADC_AnalogWDGConfig+0xfa>
 80023d2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023d6:	d13e      	bne.n	8002456 <HAL_ADC_AnalogWDGConfig+0x12a>
      {
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6818      	ldr	r0, [r3, #0]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80023e4:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 80023e8:	461a      	mov	r2, r3
 80023ea:	498c      	ldr	r1, [pc, #560]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 80023ec:	f7ff f9be 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR));
          break;
 80023f0:	e039      	b.n	8002466 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6818      	ldr	r0, [r3, #0]
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 80023fe:	f043 73a0 	orr.w	r3, r3, #20971520	; 0x1400000
 8002402:	461a      	mov	r2, r3
 8002404:	4985      	ldr	r1, [pc, #532]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 8002406:	f7ff f9b1 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_INJECTED));
          break;
 800240a:	e02c      	b.n	8002466 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GROUP(AnalogWDGConfig->Channel,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6818      	ldr	r0, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8002418:	f043 73e0 	orr.w	r3, r3, #29360128	; 0x1c00000
 800241c:	461a      	mov	r2, r3
 800241e:	497f      	ldr	r1, [pc, #508]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 8002420:	f7ff f9a4 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
                                          LL_ADC_GROUP_REGULAR_INJECTED));
          break;
 8002424:	e01f      	b.n	8002466 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REG:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a7d      	ldr	r2, [pc, #500]	; (8002620 <HAL_ADC_AnalogWDGConfig+0x2f4>)
 800242c:	497b      	ldr	r1, [pc, #492]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff f99c 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002434:	e017      	b.n	8002466 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_INJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a7a      	ldr	r2, [pc, #488]	; (8002624 <HAL_ADC_AnalogWDGConfig+0x2f8>)
 800243c:	4977      	ldr	r1, [pc, #476]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff f994 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002444:	e00f      	b.n	8002466 <HAL_ADC_AnalogWDGConfig+0x13a>

        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a77      	ldr	r2, [pc, #476]	; (8002628 <HAL_ADC_AnalogWDGConfig+0x2fc>)
 800244c:	4973      	ldr	r1, [pc, #460]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff f98c 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002454:	e007      	b.n	8002466 <HAL_ADC_AnalogWDGConfig+0x13a>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2200      	movs	r2, #0
 800245c:	496f      	ldr	r1, [pc, #444]	; (800261c <HAL_ADC_AnalogWDGConfig+0x2f0>)
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff f984 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 8002464:	bf00      	nop
      }

      /* Shift the offset in function of the selected ADC resolution:         */
      /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
      /* are set to 0                                                         */
      tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	08db      	lsrs	r3, r3, #3
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	fa02 f303 	lsl.w	r3, r2, r3
 800247c:	623b      	str	r3, [r7, #32]
      tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	695a      	ldr	r2, [r3, #20]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	08db      	lsrs	r3, r3, #3
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	61fb      	str	r3, [r7, #28]

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	f7ff f990 	bl	80017c6 <LL_ADC_ConfigAnalogWDThresholds>

      /* Update state, clear previous result related to AWD1 */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear flag ADC analog watchdog */
      /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
      /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
      /* (in case left enabled by previous ADC operations).                 */
      LL_ADC_ClearFlag_AWD1(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff fa2e 	bl	8001918 <LL_ADC_ClearFlag_AWD1>

      /* Configure ADC analog watchdog interrupt */
      if (AnalogWDGConfig->ITMode == ENABLE)
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	7b1b      	ldrb	r3, [r3, #12]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d105      	bne.n	80024d0 <HAL_ADC_AnalogWDGConfig+0x1a4>
      {
        LL_ADC_EnableIT_AWD1(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fa4e 	bl	800196a <LL_ADC_EnableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80024ce:	e11a      	b.n	8002706 <HAL_ADC_AnalogWDGConfig+0x3da>
      }
      else
      {
        LL_ADC_DisableIT_AWD1(hadc->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fa78 	bl	80019ca <LL_ADC_DisableIT_AWD1>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80024da:	e114      	b.n	8002706 <HAL_ADC_AnalogWDGConfig+0x3da>
      }
    }
    /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
    else
    {
      switch (AnalogWDGConfig->WatchdogMode)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80024e4:	d01a      	beq.n	800251c <HAL_ADC_AnalogWDGConfig+0x1f0>
 80024e6:	f1b3 7fe0 	cmp.w	r3, #29360128	; 0x1c00000
 80024ea:	d877      	bhi.n	80025dc <HAL_ADC_AnalogWDGConfig+0x2b0>
 80024ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024f0:	d06b      	beq.n	80025ca <HAL_ADC_AnalogWDGConfig+0x29e>
 80024f2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024f6:	d871      	bhi.n	80025dc <HAL_ADC_AnalogWDGConfig+0x2b0>
 80024f8:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80024fc:	d00e      	beq.n	800251c <HAL_ADC_AnalogWDGConfig+0x1f0>
 80024fe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8002502:	d86b      	bhi.n	80025dc <HAL_ADC_AnalogWDGConfig+0x2b0>
 8002504:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002508:	d05f      	beq.n	80025ca <HAL_ADC_AnalogWDGConfig+0x29e>
 800250a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800250e:	d865      	bhi.n	80025dc <HAL_ADC_AnalogWDGConfig+0x2b0>
 8002510:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002514:	d059      	beq.n	80025ca <HAL_ADC_AnalogWDGConfig+0x29e>
 8002516:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800251a:	d15f      	bne.n	80025dc <HAL_ADC_AnalogWDGConfig+0x2b0>
        case ADC_ANALOGWATCHDOG_SINGLE_REG:
        case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
        case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
          /* Update AWD by bitfield to keep the possibility to monitor        */
          /* several channels by successive calls of this function.           */
          if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a42      	ldr	r2, [pc, #264]	; (800262c <HAL_ADC_AnalogWDGConfig+0x300>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d128      	bne.n	8002578 <HAL_ADC_AnalogWDGConfig+0x24c>
          {
            SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800252e:	2b00      	cmp	r3, #0
 8002530:	d108      	bne.n	8002544 <HAL_ADC_AnalogWDGConfig+0x218>
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	0e9b      	lsrs	r3, r3, #26
 8002538:	f003 031f 	and.w	r3, r3, #31
 800253c:	2201      	movs	r2, #1
 800253e:	fa02 f303 	lsl.w	r3, r2, r3
 8002542:	e00f      	b.n	8002564 <HAL_ADC_AnalogWDGConfig+0x238>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254a:	69bb      	ldr	r3, [r7, #24]
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	617b      	str	r3, [r7, #20]
	return result;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	fab3 f383 	clz	r3, r3
 8002558:	b2db      	uxtb	r3, r3
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	2201      	movs	r2, #1
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6812      	ldr	r2, [r2, #0]
 8002570:	430b      	orrs	r3, r1
 8002572:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
          }
          else
          {
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
          }
          break;
 8002576:	e03a      	b.n	80025ee <HAL_ADC_AnalogWDGConfig+0x2c2>
            SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig->Channel) & 0x1FUL)));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002580:	2b00      	cmp	r3, #0
 8002582:	d108      	bne.n	8002596 <HAL_ADC_AnalogWDGConfig+0x26a>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	0e9b      	lsrs	r3, r3, #26
 800258a:	f003 031f 	and.w	r3, r3, #31
 800258e:	2201      	movs	r2, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	e00f      	b.n	80025b6 <HAL_ADC_AnalogWDGConfig+0x28a>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	613b      	str	r3, [r7, #16]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	fa93 f3a3 	rbit	r3, r3
 80025a2:	60fb      	str	r3, [r7, #12]
	return result;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	fab3 f383 	clz	r3, r3
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	f003 031f 	and.w	r3, r3, #31
 80025b0:	2201      	movs	r2, #1
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	430b      	orrs	r3, r1
 80025c4:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
          break;
 80025c8:	e011      	b.n	80025ee <HAL_ADC_AnalogWDGConfig+0x2c2>

        case ADC_ANALOGWATCHDOG_ALL_REG:
        case ADC_ANALOGWATCHDOG_ALL_INJEC:
        case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_ALL_CHANNELS_REG_INJ);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6818      	ldr	r0, [r3, #0]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a15      	ldr	r2, [pc, #84]	; (8002628 <HAL_ADC_AnalogWDGConfig+0x2fc>)
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7ff f8c9 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80025da:	e008      	b.n	80025ee <HAL_ADC_AnalogWDGConfig+0x2c2>

        default: /* ADC_ANALOGWATCHDOG_NONE */
          LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_AWD_DISABLE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6818      	ldr	r0, [r3, #0]
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2200      	movs	r2, #0
 80025e6:	4619      	mov	r1, r3
 80025e8:	f7ff f8c0 	bl	800176c <LL_ADC_SetAnalogWDMonitChannels>
          break;
 80025ec:	bf00      	nop
      }

      /* Shift the thresholds in function of the selected ADC resolution      */
      /* have to be left-aligned on bit 7, the LSB (right bits) are set to 0  */
      tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	f003 0318 	and.w	r3, r3, #24
 80025f8:	2b18      	cmp	r3, #24
 80025fa:	d019      	beq.n	8002630 <HAL_ADC_AnalogWDGConfig+0x304>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	691a      	ldr	r2, [r3, #16]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	08db      	lsrs	r3, r3, #3
 8002608:	f003 0303 	and.w	r3, r3, #3
 800260c:	f1c3 0302 	rsb	r3, r3, #2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	f003 031e 	and.w	r3, r3, #30
 8002616:	fa22 f303 	lsr.w	r3, r2, r3
 800261a:	e00c      	b.n	8002636 <HAL_ADC_AnalogWDGConfig+0x30a>
 800261c:	7dc00000 	.word	0x7dc00000
 8002620:	0087ffff 	.word	0x0087ffff
 8002624:	0107ffff 	.word	0x0107ffff
 8002628:	0187ffff 	.word	0x0187ffff
 800262c:	0017ffff 	.word	0x0017ffff
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	623b      	str	r3, [r7, #32]
      tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0318 	and.w	r3, r3, #24
 8002642:	2b18      	cmp	r3, #24
 8002644:	d00f      	beq.n	8002666 <HAL_ADC_AnalogWDGConfig+0x33a>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	08db      	lsrs	r3, r3, #3
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	f1c3 0302 	rsb	r3, r3, #2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	f003 031e 	and.w	r3, r3, #30
 8002660:	fa22 f303 	lsr.w	r3, r2, r3
 8002664:	e002      	b.n	800266c <HAL_ADC_AnalogWDGConfig+0x340>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	61fb      	str	r3, [r7, #28]

      /* Set ADC analog watchdog thresholds value of both thresholds high and low */
      LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHighThresholdShifted, tmpAWDLowThresholdShifted);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6818      	ldr	r0, [r3, #0]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	6a3a      	ldr	r2, [r7, #32]
 800267a:	f7ff f8a4 	bl	80017c6 <LL_ADC_ConfigAnalogWDThresholds>

      if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a26      	ldr	r2, [pc, #152]	; (800271c <HAL_ADC_AnalogWDGConfig+0x3f0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d11a      	bne.n	80026be <HAL_ADC_AnalogWDGConfig+0x392>
      {
        /* Update state, clear previous result related to AWD2 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD2(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff f94a 	bl	8001932 <LL_ADC_ClearFlag_AWD2>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	7b1b      	ldrb	r3, [r3, #12]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d105      	bne.n	80026b2 <HAL_ADC_AnalogWDGConfig+0x386>
        {
          LL_ADC_EnableIT_AWD2(hadc->Instance);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7ff f96d 	bl	800198a <LL_ADC_EnableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80026b0:	e029      	b.n	8002706 <HAL_ADC_AnalogWDGConfig+0x3da>
        }
        else
        {
          LL_ADC_DisableIT_AWD2(hadc->Instance);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f7ff f997 	bl	80019ea <LL_ADC_DisableIT_AWD2>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80026bc:	e023      	b.n	8002706 <HAL_ADC_AnalogWDGConfig+0x3da>
      }
      /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
      else
      {
        /* Update state, clear previous result related to AWD3 */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Clear flag ADC analog watchdog */
        /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
        /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
        /* (in case left enabled by previous ADC operations).                 */
        LL_ADC_ClearFlag_AWD3(hadc->Instance);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f93d 	bl	800194e <LL_ADC_ClearFlag_AWD3>

        /* Configure ADC analog watchdog interrupt */
        if (AnalogWDGConfig->ITMode == ENABLE)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7b1b      	ldrb	r3, [r3, #12]
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d105      	bne.n	80026e8 <HAL_ADC_AnalogWDGConfig+0x3bc>
        {
          LL_ADC_EnableIT_AWD3(hadc->Instance);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7ff f962 	bl	80019aa <LL_ADC_EnableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80026e6:	e00e      	b.n	8002706 <HAL_ADC_AnalogWDGConfig+0x3da>
        }
        else
        {
          LL_ADC_DisableIT_AWD3(hadc->Instance);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff f98c 	bl	8001a0a <LL_ADC_DisableIT_AWD3>
    if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
 80026f2:	e008      	b.n	8002706 <HAL_ADC_AnalogWDGConfig+0x3da>
  /* If a conversion is on going on ADC group regular or injected, no update  */
  /* could be done on neither of the AWD configuration structure parameters.  */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f8:	f043 0220 	orr.w	r2, r3, #32
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2200      	movs	r2, #0
 800270a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800270e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8002712:	4618      	mov	r0, r3
 8002714:	3730      	adds	r7, #48	; 0x30
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	0017ffff 	.word	0x0017ffff

08002720 <LL_ADC_SetCommonPathInternalCh>:
		ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal) {
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
	MODIFY_REG(ADCxy_COMMON->CCR,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	609a      	str	r2, [r3, #8]
}
 800273a:	bf00      	nop
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <LL_ADC_GetCommonPathInternalCh>:
		ADC_Common_TypeDef *ADCxy_COMMON) {
 8002746:	b480      	push	{r7}
 8002748:	b083      	sub	sp, #12
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
	return (uint32_t) (READ_BIT(ADCxy_COMMON->CCR,
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002756:	4618      	mov	r0, r3
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
	...

08002764 <LL_ADC_SetOffset>:
		uint32_t Channel, uint32_t OffsetLevel) {
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	60f8      	str	r0, [r7, #12]
 800276c:	60b9      	str	r1, [r7, #8]
 800276e:	607a      	str	r2, [r7, #4]
 8002770:	603b      	str	r3, [r7, #0]
	__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3360      	adds	r3, #96	; 0x60
 8002776:	461a      	mov	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	617b      	str	r3, [r7, #20]
	MODIFY_REG(*preg,
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	4b08      	ldr	r3, [pc, #32]	; (80027a8 <LL_ADC_SetOffset+0x44>)
 8002786:	4013      	ands	r3, r2
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	4313      	orrs	r3, r2
 8002794:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	601a      	str	r2, [r3, #0]
}
 800279c:	bf00      	nop
 800279e:	371c      	adds	r7, #28
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	03fff000 	.word	0x03fff000

080027ac <LL_ADC_GetOffsetChannel>:
		uint32_t Offsety) {
 80027ac:	b480      	push	{r7}
 80027ae:	b085      	sub	sp, #20
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
	const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3360      	adds	r3, #96	; 0x60
 80027ba:	461a      	mov	r2, r3
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	60fb      	str	r3, [r7, #12]
	return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <LL_ADC_SetOffsetState>:
		uint32_t OffsetState) {
 80027d8:	b480      	push	{r7}
 80027da:	b087      	sub	sp, #28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
	__IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	3360      	adds	r3, #96	; 0x60
 80027e8:	461a      	mov	r2, r3
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	617b      	str	r3, [r7, #20]
	MODIFY_REG(*preg, ADC_OFR1_OFFSET1_EN, OffsetState);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	431a      	orrs	r2, r3
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	601a      	str	r2, [r3, #0]
}
 8002802:	bf00      	nop
 8002804:	371c      	adds	r7, #28
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr

0800280e <LL_ADC_INJ_SetQueueMode>:
		uint32_t QueueMode) {
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
 8002816:	6039      	str	r1, [r7, #0]
	MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002820:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002824:	683a      	ldr	r2, [r7, #0]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	60da      	str	r2, [r3, #12]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <LL_ADC_SetChannelSamplingTime>:
		uint32_t Channel, uint32_t SamplingTime) {
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
			__ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	3314      	adds	r3, #20
 8002848:	461a      	mov	r2, r3
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	0e5b      	lsrs	r3, r3, #25
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	4413      	add	r3, r2
	__IO uint32_t *preg =
 8002856:	617b      	str	r3, [r7, #20]
	MODIFY_REG(*preg,
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0d1b      	lsrs	r3, r3, #20
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	2107      	movs	r1, #7
 8002866:	fa01 f303 	lsl.w	r3, r1, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	401a      	ands	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	0d1b      	lsrs	r3, r3, #20
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	6879      	ldr	r1, [r7, #4]
 8002878:	fa01 f303 	lsl.w	r3, r1, r3
 800287c:	431a      	orrs	r2, r3
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	601a      	str	r2, [r3, #0]
}
 8002882:	bf00      	nop
 8002884:	371c      	adds	r7, #28
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
	...

08002890 <LL_ADC_SetChannelSingleDiff>:
		uint32_t Channel, uint32_t SingleDiff) {
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
	MODIFY_REG(ADCx->DIFSEL, Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	43db      	mvns	r3, r3
 80028aa:	401a      	ands	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f003 0318 	and.w	r3, r3, #24
 80028b2:	4908      	ldr	r1, [pc, #32]	; (80028d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80028b4:	40d9      	lsrs	r1, r3
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	400b      	ands	r3, r1
 80028ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028be:	431a      	orrs	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80028c6:	bf00      	nop
 80028c8:	3714      	adds	r7, #20
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	0007ffff 	.word	0x0007ffff

080028d8 <LL_ADC_IsEnabled>:
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx) {
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d101      	bne.n	80028f0 <LL_ADC_IsEnabled+0x18>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <LL_ADC_IsEnabled+0x1a>
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <LL_ADC_REG_IsConversionOngoing>:
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx) {
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b04      	cmp	r3, #4
 8002910:	d101      	bne.n	8002916 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002912:	2301      	movs	r3, #1
 8002914:	e000      	b.n	8002918 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	370c      	adds	r7, #12
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_INJ_IsConversionOngoing>:
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx) {
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ?
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0308 	and.w	r3, r3, #8
			1UL : 0UL);
 8002934:	2b08      	cmp	r3, #8
 8002936:	d101      	bne.n	800293c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <HAL_ADCEx_InjectedConfigChannel>:
 * @param sConfigInjected Structure of ADC injected group and ADC channel for
 *         injected group.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
		ADC_InjectionConfTypeDef *sConfigInjected) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b0a8      	sub	sp, #160	; 0xa0
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	uint32_t tmpOffsetShifted;
	uint32_t tmp_config_internal_channel;
	uint32_t tmp_adc_is_conversion_on_going_regular;
	uint32_t tmp_adc_is_conversion_on_going_injected;
	__IO uint32_t wait_loop_index = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	60fb      	str	r3, [r7, #12]

	uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		assert_param(
				IS_ADC_DIFF_CHANNEL(hadc, sConfigInjected->InjectedChannel));
	}

	/* Process locked */
	__HAL_LOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800296c:	2b01      	cmp	r3, #1
 800296e:	d102      	bne.n	8002976 <HAL_ADCEx_InjectedConfigChannel+0x2a>
 8002970:	2302      	movs	r3, #2
 8002972:	f000 bc09 	b.w	8003188 <HAL_ADCEx_InjectedConfigChannel+0x83c>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	/*      injected channel rank. It is entered into queue only when all       */
	/*      injected ranks have been set.                                       */
	/*   Note: Scan mode is not present by hardware on this device, but used    */
	/*   by software for alignment over all STM32 devices.                      */

	if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <HAL_ADCEx_InjectedConfigChannel+0x42>
			|| (sConfigInjected->InjectedNbrOfConversion == 1U)) {
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d130      	bne.n	80029f0 <HAL_ADCEx_InjectedConfigChannel+0xa4>
		/*    (scan mode disabled, only rank 1 used)                              */
		/*  - external trigger to start conversion                                */
		/*  - external trigger polarity                                           */
		/*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */

		if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1) {
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	2b08      	cmp	r3, #8
 8002994:	d179      	bne.n	8002a8a <HAL_ADCEx_InjectedConfigChannel+0x13e>
			/* Enable external trigger if trigger selection is different of         */
			/* software start.                                                      */
			/* Note: This configuration keeps the hardware feature of parameter     */
			/*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
			/*       software start.                                                */
			if (sConfigInjected->ExternalTrigInjecConv
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	6a1b      	ldr	r3, [r3, #32]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d010      	beq.n	80029c0 <HAL_ADCEx_InjectedConfigChannel+0x74>
					!= ADC_INJECTED_SOFTWARE_START) {
				tmp_JSQR_ContextQueueBeingBuilt =
						(ADC_JSQR_RK(sConfigInjected->InjectedChannel,
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	0e9b      	lsrs	r3, r3, #26
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	f403 52f8 	and.w	r2, r3, #7936	; 0x1f00
								ADC_INJECTED_RANK_1)
								| (sConfigInjected->ExternalTrigInjecConv
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
										& ADC_JSQR_JEXTSEL)
 80029ae:	f003 033c 	and.w	r3, r3, #60	; 0x3c
								| (sConfigInjected->ExternalTrigInjecConv
 80029b2:	431a      	orrs	r2, r3
								| sConfigInjected->ExternalTrigInjecConvEdge);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				tmp_JSQR_ContextQueueBeingBuilt =
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80029be:	e007      	b.n	80029d0 <HAL_ADCEx_InjectedConfigChannel+0x84>
			} else {
				tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	021b      	lsls	r3, r3, #8
 80029c8:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 80029cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
						sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1));
			}

			MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029d6:	4ba4      	ldr	r3, [pc, #656]	; (8002c68 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 80029d8:	4013      	ands	r3, r2
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6812      	ldr	r2, [r2, #0]
 80029de:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80029e2:	430b      	orrs	r3, r1
 80029e4:	64d3      	str	r3, [r2, #76]	; 0x4c
					tmp_JSQR_ContextQueueBeingBuilt);
			/* For debug and informative reasons, hadc handle saves JSQR setting */
			hadc->InjectionConfig.ContextQueue =
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80029ec:	65da      	str	r2, [r3, #92]	; 0x5c
		if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1) {
 80029ee:	e04c      	b.n	8002a8a <HAL_ADCEx_InjectedConfigChannel+0x13e>
		/* 1. Start new context and set parameters related to all injected        */
		/*    channels: injected sequence length and trigger.                     */

		/* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
		/*   call of the context under setting                                    */
		if (hadc->InjectionConfig.ChannelCount == 0U) {
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d11d      	bne.n	8002a34 <HAL_ADCEx_InjectedConfigChannel+0xe8>
			/* Initialize number of channels that will be configured on the context */
			/*  being built                                                         */
			hadc->InjectionConfig.ChannelCount =
					sConfigInjected->InjectedNbrOfConversion;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	699a      	ldr	r2, [r3, #24]
			hadc->InjectionConfig.ChannelCount =
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	661a      	str	r2, [r3, #96]	; 0x60
			/* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
			 call, this context will be written in JSQR register at the last call.
			 At this point, the context is merely reset  */
			hadc->InjectionConfig.ContextQueue = 0x00000000U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	65da      	str	r2, [r3, #92]	; 0x5c
			/* Enable external trigger if trigger selection is different of         */
			/* software start.                                                      */
			/* Note: This configuration keeps the hardware feature of parameter     */
			/*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
			/*       software start.                                                */
			if (sConfigInjected->ExternalTrigInjecConv
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_ADCEx_InjectedConfigChannel+0xde>
					!= ADC_INJECTED_SOFTWARE_START) {
				tmp_JSQR_ContextQueueBeingBuilt =
						((sConfigInjected->InjectedNbrOfConversion - 1U)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	1e5a      	subs	r2, r3, #1
								| (sConfigInjected->ExternalTrigInjecConv
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	6a1b      	ldr	r3, [r3, #32]
										& ADC_JSQR_JEXTSEL)
 8002a18:	f003 033c 	and.w	r3, r3, #60	; 0x3c
								| (sConfigInjected->ExternalTrigInjecConv
 8002a1c:	431a      	orrs	r2, r3
								| sConfigInjected->ExternalTrigInjecConvEdge);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
				tmp_JSQR_ContextQueueBeingBuilt =
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a28:	e004      	b.n	8002a34 <HAL_ADCEx_InjectedConfigChannel+0xe8>
			} else {
				tmp_JSQR_ContextQueueBeingBuilt =
						((sConfigInjected->InjectedNbrOfConversion - 1U));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
				tmp_JSQR_ContextQueueBeingBuilt =
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		/* Clear the old JSQx bits for the selected rank */
		tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10,
				sConfigInjected->InjectedRank);

		/* Set the JSQx bits for the selected rank */
		tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	0e9b      	lsrs	r3, r3, #26
 8002a3a:	f003 021f 	and.w	r2, r3, #31
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f003 031f 	and.w	r3, r3, #31
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				sConfigInjected->InjectedChannel,
				sConfigInjected->InjectedRank);

		/* Decrease channel count  */
		hadc->InjectionConfig.ChannelCount--;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a58:	1e5a      	subs	r2, r3, #1
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	661a      	str	r2, [r3, #96]	; 0x60

		/* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
		 call, aggregate the setting to those already built during the previous
		 HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
		hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002a62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	65da      	str	r2, [r3, #92]	; 0x5c

		/* 4. End of context setting: if this is the last channel set, then write context
		 into register JSQR and make it enter into queue                   */
		if (hadc->InjectionConfig.ChannelCount == 0U) {
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10a      	bne.n	8002a8a <HAL_ADCEx_InjectedConfigChannel+0x13e>
			MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002a7a:	4b7b      	ldr	r3, [pc, #492]	; (8002c68 <HAL_ADCEx_InjectedConfigChannel+0x31c>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
 8002a82:	687a      	ldr	r2, [r7, #4]
 8002a84:	6812      	ldr	r2, [r2, #0]
 8002a86:	430b      	orrs	r3, r1
 8002a88:	64d3      	str	r3, [r2, #76]	; 0x4c
	/* conversion on going on injected group:                                   */
	/*  - Injected context queue: Queue disable (active context is kept) or     */
	/*    enable (context decremented, up to 2 contexts queued)                 */
	/*  - Injected discontinuous mode: can be enabled only if auto-injected     */
	/*    mode is disabled.                                                     */
	if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL) {
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff ff48 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d120      	bne.n	8002adc <HAL_ADCEx_InjectedConfigChannel+0x190>
		/* If auto-injected mode is disabled: no constraint                       */
		if (sConfigInjected->AutoInjectedConv == DISABLE) {
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	7f5b      	ldrb	r3, [r3, #29]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d110      	bne.n	8002ac4 <HAL_ADCEx_InjectedConfigChannel+0x178>
			MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68db      	ldr	r3, [r3, #12]
 8002aa8:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	7f9b      	ldrb	r3, [r3, #30]
 8002ab0:	055a      	lsls	r2, r3, #21
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	7f1b      	ldrb	r3, [r3, #28]
 8002ab6:	051b      	lsls	r3, r3, #20
 8002ab8:	431a      	orrs	r2, r3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	60da      	str	r2, [r3, #12]
 8002ac2:	e00b      	b.n	8002adc <HAL_ADCEx_InjectedConfigChannel+0x190>
					ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext) | ADC_CFGR_INJECT_DISCCONTINUOUS((uint32_t)sConfigInjected->InjectedDiscontinuousConvMode));
		}
		/* If auto-injected mode is enabled: Injected discontinuous setting is    */
		/* discarded.                                                             */
		else {
			MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	7f9b      	ldrb	r3, [r3, #30]
 8002ad2:	055a      	lsls	r2, r3, #21
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	60da      	str	r2, [r3, #12]
	/* conversion on going on regular and injected groups:                      */
	/*  - Automatic injected conversion: can be enabled if injected group       */
	/*    external triggers are disabled.                                       */
	/*  - Channel sampling time                                                 */
	/*  - Channel offset                                                        */
	tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff ff0c 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 8002ae6:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
			hadc->Instance);
	tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff ff18 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 8002af4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
			hadc->Instance);

	if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002af8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	f040 819e 	bne.w	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x4f2>
			&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 8002b02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 8199 	bne.w	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x4f2>
		/* If injected group external triggers are disabled (set to injected      */
		/* software start): no constraint                                         */
		if ((sConfigInjected->ExternalTrigInjecConv
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	6a1b      	ldr	r3, [r3, #32]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_ADCEx_InjectedConfigChannel+0x1d0>
				== ADC_INJECTED_SOFTWARE_START)
				|| (sConfigInjected->ExternalTrigInjecConvEdge
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d115      	bne.n	8002b48 <HAL_ADCEx_InjectedConfigChannel+0x1fc>
						== ADC_EXTERNALTRIGINJECCONV_EDGE_NONE)) {
			if (sConfigInjected->AutoInjectedConv == ENABLE) {
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	7f5b      	ldrb	r3, [r3, #29]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d108      	bne.n	8002b36 <HAL_ADCEx_InjectedConfigChannel+0x1ea>
				SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8002b32:	60da      	str	r2, [r3, #12]
			if (sConfigInjected->AutoInjectedConv == ENABLE) {
 8002b34:	e01e      	b.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x228>
			} else {
				CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68da      	ldr	r2, [r3, #12]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b44:	60da      	str	r2, [r3, #12]
			if (sConfigInjected->AutoInjectedConv == ENABLE) {
 8002b46:	e015      	b.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x228>
			}
		}
		/* If Automatic injected conversion was intended to be set and could not  */
		/* due to injected group external triggers enabled, error is reported.    */
		else {
			if (sConfigInjected->AutoInjectedConv == ENABLE) {
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	7f5b      	ldrb	r3, [r3, #29]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d109      	bne.n	8002b64 <HAL_ADCEx_InjectedConfigChannel+0x218>
				/* Update ADC state machine to error */
				SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b54:	f043 0220 	orr.w	r2, r3, #32
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	655a      	str	r2, [r3, #84]	; 0x54

				tmp_hal_status = HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8002b62:	e007      	b.n	8002b74 <HAL_ADCEx_InjectedConfigChannel+0x228>
			} else {
				CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8002b72:	60da      	str	r2, [r3, #12]
			}
		}

		if (sConfigInjected->InjecOversamplingMode == ENABLE) {
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d110      	bne.n	8002ba0 <HAL_ADCEx_InjectedConfigChannel+0x254>
			/* Configuration of Injected Oversampler:                                 */
			/*  - Oversampling Ratio                                                  */
			/*  - Right bit shift                                                     */

			/* Enable OverSampling mode */
			MODIFY_REG(hadc->Instance->CFGR2,
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f423 72ff 	bic.w	r2, r3, #510	; 0x1fe
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	430b      	orrs	r3, r1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f042 0202 	orr.w	r2, r2, #2
 8002b9c:	611a      	str	r2, [r3, #16]
 8002b9e:	e007      	b.n	8002bb0 <HAL_ADCEx_InjectedConfigChannel+0x264>
					ADC_CFGR2_JOVSE | ADC_CFGR2_OVSR | ADC_CFGR2_OVSS,
					ADC_CFGR2_JOVSE | sConfigInjected->InjecOversampling.Ratio | sConfigInjected->InjecOversampling.RightBitShift);
		} else {
			/* Disable Regular OverSampling */
			CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0202 	bic.w	r2, r2, #2
 8002bae:	611a      	str	r2, [r3, #16]
		}

		/* Set sampling time of the selected ADC channel */
		LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6818      	ldr	r0, [r3, #0]
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	6819      	ldr	r1, [r3, #0]
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f7ff fe3b 	bl	8002838 <LL_ADC_SetChannelSamplingTime>

		/* Configure the offset: offset enable/disable, channel, offset value */

		/* Shift the offset with respect to the selected ADC resolution. */
		/* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
		tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc,
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	695a      	ldr	r2, [r3, #20]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68db      	ldr	r3, [r3, #12]
 8002bcc:	08db      	lsrs	r3, r3, #3
 8002bce:	f003 0303 	and.w	r3, r3, #3
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				sConfigInjected->InjectedOffset);

		if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE) {
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	691b      	ldr	r3, [r3, #16]
 8002be0:	2b04      	cmp	r3, #4
 8002be2:	d00a      	beq.n	8002bfa <HAL_ADCEx_InjectedConfigChannel+0x2ae>
			/* Set ADC selected offset number */
			LL_ADC_SetOffset(hadc->Instance,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6818      	ldr	r0, [r3, #0]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	6919      	ldr	r1, [r3, #16]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bf4:	f7ff fdb6 	bl	8002764 <LL_ADC_SetOffset>
 8002bf8:	e121      	b.n	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x4f2>
					sConfigInjected->InjectedChannel, tmpOffsetShifted);

		} else {
			/* Scan each offset register to check if the selected channel is targeted. */
			/* If this is the case, the corresponding offset number is disabled.       */
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fdd3 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10a      	bne.n	8002c26 <HAL_ADCEx_InjectedConfigChannel+0x2da>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fdc8 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	0e9b      	lsrs	r3, r3, #26
 8002c20:	f003 021f 	and.w	r2, r3, #31
 8002c24:	e014      	b.n	8002c50 <HAL_ADCEx_InjectedConfigChannel+0x304>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fdbd 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	return result;
 8002c44:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002c48:	fab3 f383 	clz	r3, r3
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	461a      	mov	r2, r3
					LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel)) {
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d107      	bne.n	8002c6c <HAL_ADCEx_InjectedConfigChannel+0x320>
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	0e9b      	lsrs	r3, r3, #26
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	e00c      	b.n	8002c82 <HAL_ADCEx_InjectedConfigChannel+0x336>
 8002c68:	82082000 	.word	0x82082000
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	67fb      	str	r3, [r7, #124]	; 0x7c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c72:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c74:	fa93 f3a3 	rbit	r3, r3
 8002c78:	67bb      	str	r3, [r7, #120]	; 0x78
	return result;
 8002c7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002c7c:	fab3 f383 	clz	r3, r3
 8002c80:	b2db      	uxtb	r3, r3
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d106      	bne.n	8002c94 <HAL_ADCEx_InjectedConfigChannel+0x348>
				LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1,
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2100      	movs	r1, #0
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff fda2 	bl	80027d8 <LL_ADC_SetOffsetState>
						LL_ADC_OFFSET_DISABLE);
			}
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2101      	movs	r1, #1
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7ff fd86 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d10a      	bne.n	8002cc0 <HAL_ADCEx_InjectedConfigChannel+0x374>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fd7b 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	0e9b      	lsrs	r3, r3, #26
 8002cba:	f003 021f 	and.w	r2, r3, #31
 8002cbe:	e010      	b.n	8002ce2 <HAL_ADCEx_InjectedConfigChannel+0x396>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fd70 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	677b      	str	r3, [r7, #116]	; 0x74
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002cd2:	fa93 f3a3 	rbit	r3, r3
 8002cd6:	673b      	str	r3, [r7, #112]	; 0x70
	return result;
 8002cd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cda:	fab3 f383 	clz	r3, r3
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	461a      	mov	r2, r3
					LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel)) {
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d105      	bne.n	8002cfa <HAL_ADCEx_InjectedConfigChannel+0x3ae>
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	0e9b      	lsrs	r3, r3, #26
 8002cf4:	f003 031f 	and.w	r3, r3, #31
 8002cf8:	e00a      	b.n	8002d10 <HAL_ADCEx_InjectedConfigChannel+0x3c4>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	66fb      	str	r3, [r7, #108]	; 0x6c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	66bb      	str	r3, [r7, #104]	; 0x68
	return result;
 8002d08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d106      	bne.n	8002d22 <HAL_ADCEx_InjectedConfigChannel+0x3d6>
				LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff fd5b 	bl	80027d8 <LL_ADC_SetOffsetState>
						LL_ADC_OFFSET_DISABLE);
			}
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2102      	movs	r1, #2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fd3f 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d10a      	bne.n	8002d4e <HAL_ADCEx_InjectedConfigChannel+0x402>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	2102      	movs	r1, #2
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fd34 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002d44:	4603      	mov	r3, r0
 8002d46:	0e9b      	lsrs	r3, r3, #26
 8002d48:	f003 021f 	and.w	r2, r3, #31
 8002d4c:	e010      	b.n	8002d70 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2102      	movs	r1, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff fd29 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	667b      	str	r3, [r7, #100]	; 0x64
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d60:	fa93 f3a3 	rbit	r3, r3
 8002d64:	663b      	str	r3, [r7, #96]	; 0x60
	return result;
 8002d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d68:	fab3 f383 	clz	r3, r3
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	461a      	mov	r2, r3
					LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel)) {
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <HAL_ADCEx_InjectedConfigChannel+0x43c>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0e9b      	lsrs	r3, r3, #26
 8002d82:	f003 031f 	and.w	r3, r3, #31
 8002d86:	e00a      	b.n	8002d9e <HAL_ADCEx_InjectedConfigChannel+0x452>
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d90:	fa93 f3a3 	rbit	r3, r3
 8002d94:	65bb      	str	r3, [r7, #88]	; 0x58
	return result;
 8002d96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d106      	bne.n	8002db0 <HAL_ADCEx_InjectedConfigChannel+0x464>
				LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3,
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2200      	movs	r2, #0
 8002da8:	2102      	movs	r1, #2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fd14 	bl	80027d8 <LL_ADC_SetOffsetState>
						LL_ADC_OFFSET_DISABLE);
			}
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2103      	movs	r1, #3
 8002db6:	4618      	mov	r0, r3
 8002db8:	f7ff fcf8 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10a      	bne.n	8002ddc <HAL_ADCEx_InjectedConfigChannel+0x490>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2103      	movs	r1, #3
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff fced 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	0e9b      	lsrs	r3, r3, #26
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	e010      	b.n	8002dfe <HAL_ADCEx_InjectedConfigChannel+0x4b2>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2103      	movs	r1, #3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fce2 	bl	80027ac <LL_ADC_GetOffsetChannel>
 8002de8:	4603      	mov	r3, r0
 8002dea:	657b      	str	r3, [r7, #84]	; 0x54
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dee:	fa93 f3a3 	rbit	r3, r3
 8002df2:	653b      	str	r3, [r7, #80]	; 0x50
	return result;
 8002df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df6:	fab3 f383 	clz	r3, r3
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
					LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChannel)) {
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d105      	bne.n	8002e16 <HAL_ADCEx_InjectedConfigChannel+0x4ca>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	0e9b      	lsrs	r3, r3, #26
 8002e10:	f003 031f 	and.w	r3, r3, #31
 8002e14:	e00a      	b.n	8002e2c <HAL_ADCEx_InjectedConfigChannel+0x4e0>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e1e:	fa93 f3a3 	rbit	r3, r3
 8002e22:	64bb      	str	r3, [r7, #72]	; 0x48
	return result;
 8002e24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e26:	fab3 f383 	clz	r3, r3
 8002e2a:	b2db      	uxtb	r3, r3
			if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d106      	bne.n	8002e3e <HAL_ADCEx_InjectedConfigChannel+0x4f2>
				LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4,
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	2103      	movs	r1, #3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff fccd 	bl	80027d8 <LL_ADC_SetOffsetState>

	/* Parameters update conditioned to ADC state:                              */
	/* Parameters that can be updated only when ADC is disabled:                */
	/*  - Single or differential mode                                           */
	/*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
	if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) {
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f7ff fd48 	bl	80028d8 <LL_ADC_IsEnabled>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f040 8196 	bne.w	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
		/* Set mode single-ended or differential input of the selected ADC channel */
		LL_ADC_SetChannelSingleDiff(hadc->Instance,
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6818      	ldr	r0, [r3, #0]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	6819      	ldr	r1, [r3, #0]
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f7ff fd17 	bl	8002890 <LL_ADC_SetChannelSingleDiff>
				sConfigInjected->InjectedChannel,
				sConfigInjected->InjectedSingleDiff);

		/* Configuration of differential mode */
		/* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
		if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED) {
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	4aac      	ldr	r2, [pc, #688]	; (8003118 <HAL_ADCEx_InjectedConfigChannel+0x7cc>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	f040 80fd 	bne.w	8003068 <HAL_ADCEx_InjectedConfigChannel+0x71c>
			/* Set sampling time of the selected ADC channel */
			LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
					(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10b      	bne.n	8002e96 <HAL_ADCEx_InjectedConfigChannel+0x54a>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0e9b      	lsrs	r3, r3, #26
 8002e84:	3301      	adds	r3, #1
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2b09      	cmp	r3, #9
 8002e8c:	bf94      	ite	ls
 8002e8e:	2301      	movls	r3, #1
 8002e90:	2300      	movhi	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	e012      	b.n	8002ebc <HAL_ADCEx_InjectedConfigChannel+0x570>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	647b      	str	r3, [r7, #68]	; 0x44
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	643b      	str	r3, [r7, #64]	; 0x40
	return result;
 8002ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea6:	fab3 f383 	clz	r3, r3
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	3301      	adds	r3, #1
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	2b09      	cmp	r3, #9
 8002eb4:	bf94      	ite	ls
 8002eb6:	2301      	movls	r3, #1
 8002eb8:	2300      	movhi	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
			LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d064      	beq.n	8002f8a <HAL_ADCEx_InjectedConfigChannel+0x63e>
					(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_ADCEx_InjectedConfigChannel+0x590>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	0e9b      	lsrs	r3, r3, #26
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	069b      	lsls	r3, r3, #26
 8002ed6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eda:	e00e      	b.n	8002efa <HAL_ADCEx_InjectedConfigChannel+0x5ae>
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ee4:	fa93 f3a3 	rbit	r3, r3
 8002ee8:	63bb      	str	r3, [r7, #56]	; 0x38
	return result;
 8002eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eec:	fab3 f383 	clz	r3, r3
 8002ef0:	b2db      	uxtb	r3, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	069b      	lsls	r3, r3, #26
 8002ef6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <HAL_ADCEx_InjectedConfigChannel+0x5ce>
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	0e9b      	lsrs	r3, r3, #26
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	f003 031f 	and.w	r3, r3, #31
 8002f12:	2101      	movs	r1, #1
 8002f14:	fa01 f303 	lsl.w	r3, r1, r3
 8002f18:	e010      	b.n	8002f3c <HAL_ADCEx_InjectedConfigChannel+0x5f0>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	637b      	str	r3, [r7, #52]	; 0x34
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f22:	fa93 f3a3 	rbit	r3, r3
 8002f26:	633b      	str	r3, [r7, #48]	; 0x30
	return result;
 8002f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2a:	fab3 f383 	clz	r3, r3
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3301      	adds	r3, #1
 8002f32:	f003 031f 	and.w	r3, r3, #31
 8002f36:	2101      	movs	r1, #1
 8002f38:	fa01 f303 	lsl.w	r3, r1, r3
 8002f3c:	ea42 0103 	orr.w	r1, r2, r3
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10a      	bne.n	8002f62 <HAL_ADCEx_InjectedConfigChannel+0x616>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	0e9b      	lsrs	r3, r3, #26
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	051b      	lsls	r3, r3, #20
 8002f60:	e011      	b.n	8002f86 <HAL_ADCEx_InjectedConfigChannel+0x63a>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
	return result;
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	fab3 f383 	clz	r3, r3
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f003 021f 	and.w	r2, r3, #31
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	051b      	lsls	r3, r3, #20
			LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f86:	430b      	orrs	r3, r1
 8002f88:	e069      	b.n	800305e <HAL_ADCEx_InjectedConfigChannel+0x712>
					(uint32_t) (__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d107      	bne.n	8002fa6 <HAL_ADCEx_InjectedConfigChannel+0x65a>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	069b      	lsls	r3, r3, #26
 8002fa0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa4:	e00e      	b.n	8002fc4 <HAL_ADCEx_InjectedConfigChannel+0x678>
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	627b      	str	r3, [r7, #36]	; 0x24
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	623b      	str	r3, [r7, #32]
	return result;
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	fab3 f383 	clz	r3, r3
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	069b      	lsls	r3, r3, #26
 8002fc0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d109      	bne.n	8002fe4 <HAL_ADCEx_InjectedConfigChannel+0x698>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	0e9b      	lsrs	r3, r3, #26
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	f003 031f 	and.w	r3, r3, #31
 8002fdc:	2101      	movs	r1, #1
 8002fde:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe2:	e010      	b.n	8003006 <HAL_ADCEx_InjectedConfigChannel+0x6ba>
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa93 f3a3 	rbit	r3, r3
 8002ff0:	61bb      	str	r3, [r7, #24]
	return result;
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	fab3 f383 	clz	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	3301      	adds	r3, #1
 8002ffc:	f003 031f 	and.w	r3, r3, #31
 8003000:	2101      	movs	r1, #1
 8003002:	fa01 f303 	lsl.w	r3, r1, r3
 8003006:	ea42 0103 	orr.w	r1, r2, r3
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10d      	bne.n	8003032 <HAL_ADCEx_InjectedConfigChannel+0x6e6>
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	0e9b      	lsrs	r3, r3, #26
 800301c:	3301      	adds	r3, #1
 800301e:	f003 021f 	and.w	r2, r3, #31
 8003022:	4613      	mov	r3, r2
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	4413      	add	r3, r2
 8003028:	3b1e      	subs	r3, #30
 800302a:	051b      	lsls	r3, r3, #20
 800302c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003030:	e014      	b.n	800305c <HAL_ADCEx_InjectedConfigChannel+0x710>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	617b      	str	r3, [r7, #20]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	fa93 f3a3 	rbit	r3, r3
 800303e:	613b      	str	r3, [r7, #16]
	return result;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	fab3 f383 	clz	r3, r3
 8003046:	b2db      	uxtb	r3, r3
 8003048:	3301      	adds	r3, #1
 800304a:	f003 021f 	and.w	r2, r3, #31
 800304e:	4613      	mov	r3, r2
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	4413      	add	r3, r2
 8003054:	3b1e      	subs	r3, #30
 8003056:	051b      	lsls	r3, r3, #20
 8003058:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
			LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305c:	430b      	orrs	r3, r1
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	6892      	ldr	r2, [r2, #8]
 8003062:	4619      	mov	r1, r3
 8003064:	f7ff fbe8 	bl	8002838 <LL_ADC_SetChannelSamplingTime>
		/* internal measurement paths enable: If internal channel selected,       */
		/* enable dedicated internal buffers and path.                            */
		/* Note: these internal measurement paths can be disabled using           */
		/* HAL_ADC_DeInit().                                                      */

		if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel)) {
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	4b2b      	ldr	r3, [pc, #172]	; (800311c <HAL_ADCEx_InjectedConfigChannel+0x7d0>)
 800306e:	4013      	ands	r3, r2
 8003070:	2b00      	cmp	r3, #0
 8003072:	f000 8083 	beq.w	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
			/* Configuration of common ADC parameters (continuation)                */
			/* Software is allowed to change common parameters only when all ADCs   */
			/* of the common group are disabled.                                    */
			if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(
 8003076:	482a      	ldr	r0, [pc, #168]	; (8003120 <HAL_ADCEx_InjectedConfigChannel+0x7d4>)
 8003078:	f7ff fc2e 	bl	80028d8 <LL_ADC_IsEnabled>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d173      	bne.n	800316a <HAL_ADCEx_InjectedConfigChannel+0x81e>
					__LL_ADC_COMMON_INSTANCE(hadc->Instance))
					== 0UL) {
				tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(
 8003082:	4828      	ldr	r0, [pc, #160]	; (8003124 <HAL_ADCEx_InjectedConfigChannel+0x7d8>)
 8003084:	f7ff fb5f 	bl	8002746 <LL_ADC_GetCommonPathInternalCh>
 8003088:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
						__LL_ADC_COMMON_INSTANCE(hadc->Instance));

				/* If the requested internal measurement path has already been enabled, */
				/* bypass the configuration processing.                                 */
				if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a25      	ldr	r2, [pc, #148]	; (8003128 <HAL_ADCEx_InjectedConfigChannel+0x7dc>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d126      	bne.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x798>
						&& ((tmp_config_internal_channel
								& LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL)) {
 8003096:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800309a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
						&& ((tmp_config_internal_channel
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d120      	bne.n	80030e4 <HAL_ADCEx_InjectedConfigChannel+0x798>
					if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1e      	ldr	r2, [pc, #120]	; (8003120 <HAL_ADCEx_InjectedConfigChannel+0x7d4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d167      	bne.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
						LL_ADC_SetCommonPathInternalCh(
 80030ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b4:	4619      	mov	r1, r3
 80030b6:	481b      	ldr	r0, [pc, #108]	; (8003124 <HAL_ADCEx_InjectedConfigChannel+0x7d8>)
 80030b8:	f7ff fb32 	bl	8002720 <LL_ADC_SetCommonPathInternalCh>
						/* Wait loop initialization and execution */
						/* Note: Variable divided by 2 to compensate partially              */
						/*       CPU processing cycles, scaling in us split to not          */
						/*       exceed 32 bits register capacity and handle low frequency. */
						wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US
								/ 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80030bc:	4b1b      	ldr	r3, [pc, #108]	; (800312c <HAL_ADCEx_InjectedConfigChannel+0x7e0>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	4a1b      	ldr	r2, [pc, #108]	; (8003130 <HAL_ADCEx_InjectedConfigChannel+0x7e4>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	099a      	lsrs	r2, r3, #6
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
						wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US
 80030d2:	60fb      	str	r3, [r7, #12]
						while (wait_loop_index != 0UL) {
 80030d4:	e002      	b.n	80030dc <HAL_ADCEx_InjectedConfigChannel+0x790>
							wait_loop_index--;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3b01      	subs	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
						while (wait_loop_index != 0UL) {
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f9      	bne.n	80030d6 <HAL_ADCEx_InjectedConfigChannel+0x78a>
					if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc)) {
 80030e2:	e04b      	b.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
						}
					}
				} else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a12      	ldr	r2, [pc, #72]	; (8003134 <HAL_ADCEx_InjectedConfigChannel+0x7e8>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d124      	bne.n	8003138 <HAL_ADCEx_InjectedConfigChannel+0x7ec>
						&& ((tmp_config_internal_channel
								& LL_ADC_PATH_INTERNAL_VBAT) == 0UL)) {
 80030ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
						&& ((tmp_config_internal_channel
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d11e      	bne.n	8003138 <HAL_ADCEx_InjectedConfigChannel+0x7ec>
					if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_ADCEx_InjectedConfigChannel+0x7d4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d13b      	bne.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
						LL_ADC_SetCommonPathInternalCh(
 8003104:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003108:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800310c:	4619      	mov	r1, r3
 800310e:	4805      	ldr	r0, [pc, #20]	; (8003124 <HAL_ADCEx_InjectedConfigChannel+0x7d8>)
 8003110:	f7ff fb06 	bl	8002720 <LL_ADC_SetCommonPathInternalCh>
					if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc)) {
 8003114:	e032      	b.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
 8003116:	bf00      	nop
 8003118:	407f0000 	.word	0x407f0000
 800311c:	80080000 	.word	0x80080000
 8003120:	50040000 	.word	0x50040000
 8003124:	50040300 	.word	0x50040300
 8003128:	c7520000 	.word	0xc7520000
 800312c:	20000004 	.word	0x20000004
 8003130:	053e2d63 	.word	0x053e2d63
 8003134:	cb840000 	.word	0xcb840000
								__LL_ADC_COMMON_INSTANCE(hadc->Instance),
								LL_ADC_PATH_INTERNAL_VBAT
										| tmp_config_internal_channel);
					}
				} else if ((sConfigInjected->InjectedChannel
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_ADCEx_InjectedConfigChannel+0x844>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d11c      	bne.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
						== ADC_CHANNEL_VREFINT)
						&& ((tmp_config_internal_channel
								& LL_ADC_PATH_INTERNAL_VREFINT) == 0UL)) {
 8003142:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
						&& ((tmp_config_internal_channel
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
					if (ADC_VREFINT_INSTANCE(hadc)) {
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_ADCEx_InjectedConfigChannel+0x848>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
						LL_ADC_SetCommonPathInternalCh(
 8003158:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800315c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003160:	4619      	mov	r1, r3
 8003162:	480d      	ldr	r0, [pc, #52]	; (8003198 <HAL_ADCEx_InjectedConfigChannel+0x84c>)
 8003164:	f7ff fadc 	bl	8002720 <LL_ADC_SetCommonPathInternalCh>
 8003168:	e008      	b.n	800317c <HAL_ADCEx_InjectedConfigChannel+0x830>
			/* If the requested internal measurement path has already been enabled  */
			/* and other ADC of the common group are enabled, internal              */
			/* measurement paths cannot be enabled.                                 */
			else {
				/* Update ADC state machine to error */
				SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54

				tmp_hal_status = HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
		}

	}

	/* Process unlocked */
	__HAL_UNLOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

	/* Return function status */
	return tmp_hal_status;
 8003184:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8003188:	4618      	mov	r0, r3
 800318a:	37a0      	adds	r7, #160	; 0xa0
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	80000001 	.word	0x80000001
 8003194:	50040000 	.word	0x50040000
 8003198:	50040300 	.word	0x50040300

0800319c <HAL_ADCEx_DisableInjectedQueue>:
 *         are both equal to 0 to ensure that no regular nor injected
 *         conversion is ongoing.
 * @param hadc ADC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b086      	sub	sp, #24
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
	uint32_t tmp_adc_is_conversion_on_going_injected;

	/* Check the parameters */
	assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

	tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fba8 	bl	80028fe <LL_ADC_REG_IsConversionOngoing>
 80031ae:	6138      	str	r0, [r7, #16]
			hadc->Instance);
	tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff fbb5 	bl	8002924 <LL_ADC_INJ_IsConversionOngoing>
 80031ba:	60f8      	str	r0, [r7, #12]
			hadc->Instance);

	/* Parameter can be set only if no conversion is on-going */
	if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10c      	bne.n	80031dc <HAL_ADCEx_DisableInjectedQueue+0x40>
			&& (tmp_adc_is_conversion_on_going_injected == 0UL)) {
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d109      	bne.n	80031dc <HAL_ADCEx_DisableInjectedQueue+0x40>
		LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff fb1c 	bl	800280e <LL_ADC_INJ_SetQueueMode>
		tmp_hal_status = HAL_OK;
 80031d6:	2300      	movs	r3, #0
 80031d8:	75fb      	strb	r3, [r7, #23]
 80031da:	e001      	b.n	80031e0 <HAL_ADCEx_DisableInjectedQueue+0x44>
	} else {
		tmp_hal_status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	75fb      	strb	r3, [r7, #23]
	}

	return tmp_hal_status;
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3718      	adds	r7, #24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
	...

080031ec <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003208:	4013      	ands	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	021a      	lsls	r2, r3, #8
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8003214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	60d3      	str	r3, [r2, #12]
	}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <__NVIC_GetPriorityGrouping+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_EnableIRQ>:
	 \brief   Enable Interrupt
	 \details Enables a device specific interrupt in the NVIC interrupt controller.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn) {
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db0b      	blt.n	800327a <__NVIC_EnableIRQ+0x2a>
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISER[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 8003268:	4907      	ldr	r1, [pc, #28]	; (8003288 <__NVIC_EnableIRQ+0x38>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2001      	movs	r0, #1
 8003272:	fa00 f202 	lsl.w	r2, r0, r2
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPendingIRQ>:
	 \brief   Set Pending Interrupt
	 \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn) {
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	2b00      	cmp	r3, #0
 800329c:	db0c      	blt.n	80032b8 <__NVIC_SetPendingIRQ+0x2c>
			NVIC->ISPR[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 800329e:	79fb      	ldrb	r3, [r7, #7]
 80032a0:	f003 021f 	and.w	r2, r3, #31
			NVIC->ISPR[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 80032a4:	4907      	ldr	r1, [pc, #28]	; (80032c4 <__NVIC_SetPendingIRQ+0x38>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	095b      	lsrs	r3, r3, #5
 80032ac:	2001      	movs	r0, #1
 80032ae:	fa00 f202 	lsl.w	r2, r0, r2
 80032b2:	3340      	adds	r3, #64	; 0x40
 80032b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000e100 	.word	0xe000e100

080032c8 <__NVIC_ClearPendingIRQ>:
	 \brief   Clear Pending Interrupt
	 \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
	 \param [in]      IRQn  Device specific interrupt number.
	 \note    IRQn must not be negative.
	 */
	__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn) {
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0c      	blt.n	80032f4 <__NVIC_ClearPendingIRQ+0x2c>
			NVIC->ICPR[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
					<< (((uint32_t) IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
			NVIC->ICPR[(((uint32_t) IRQn) >> 5UL)] = (uint32_t) (1UL
 80032e0:	4907      	ldr	r1, [pc, #28]	; (8003300 <__NVIC_ClearPendingIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	3360      	adds	r3, #96	; 0x60
 80032f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
	}
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	; (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
			SCB->SHP[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	; (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
	}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
		SubPriorityBits =
 800338a:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
				<< SubPriorityBits)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
 80033b0:	4313      	orrs	r3, r2
	}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
	...

080033c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	3b01      	subs	r3, #1
 80033cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033d0:	d301      	bcc.n	80033d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033d2:	2301      	movs	r3, #1
 80033d4:	e00f      	b.n	80033f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <SysTick_Config+0x40>)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	3b01      	subs	r3, #1
 80033dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033de:	210f      	movs	r1, #15
 80033e0:	f04f 30ff 	mov.w	r0, #4294967295
 80033e4:	f7ff ff8e 	bl	8003304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <SysTick_Config+0x40>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ee:	4b04      	ldr	r3, [pc, #16]	; (8003400 <SysTick_Config+0x40>)
 80033f0:	2207      	movs	r2, #7
 80033f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	e000e010 	.word	0xe000e010

08003404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff feed 	bl	80031ec <__NVIC_SetPriorityGrouping>
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b086      	sub	sp, #24
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	60b9      	str	r1, [r7, #8]
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003428:	f7ff ff04 	bl	8003234 <__NVIC_GetPriorityGrouping>
 800342c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	68b9      	ldr	r1, [r7, #8]
 8003432:	6978      	ldr	r0, [r7, #20]
 8003434:	f7ff ff90 	bl	8003358 <NVIC_EncodePriority>
 8003438:	4602      	mov	r2, r0
 800343a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800343e:	4611      	mov	r1, r2
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff5f 	bl	8003304 <__NVIC_SetPriority>
}
 8003446:	bf00      	nop
 8003448:	3718      	adds	r7, #24
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	4603      	mov	r3, r0
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fef7 	bl	8003250 <__NVIC_EnableIRQ>
}
 8003462:	bf00      	nop
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b082      	sub	sp, #8
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7ff ffa4 	bl	80033c0 <SysTick_Config>
 8003478:	4603      	mov	r3, r0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	4603      	mov	r3, r0
 800348a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 800348c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003490:	4618      	mov	r0, r3
 8003492:	f7ff fefb 	bl	800328c <__NVIC_SetPendingIRQ>
}
 8003496:	bf00      	nop
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}

0800349e <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800349e:	b580      	push	{r7, lr}
 80034a0:	b082      	sub	sp, #8
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	4603      	mov	r3, r0
 80034a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80034a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7ff ff0b 	bl	80032c8 <__NVIC_ClearPendingIRQ>
}
 80034b2:	bf00      	nop
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_DMA_Init>:
 *         parameters in the DMA_InitTypeDef and initialize the associated handle.
 * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
 *               the configuration information for the specified DMA Channel.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma) {
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
	uint32_t tmp;

	/* Check the DMA handle allocation */
	if (hdma == NULL) {
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_DMA_Init+0x12>
		return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e08e      	b.n	80035ec <HAL_DMA_Init+0x130>

	assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
	/* Compute the channel index */
	if ((uint32_t) (hdma->Instance) < (uint32_t) (DMA2_Channel1)) {
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	461a      	mov	r2, r3
 80034d4:	4b47      	ldr	r3, [pc, #284]	; (80035f4 <HAL_DMA_Init+0x138>)
 80034d6:	429a      	cmp	r2, r3
 80034d8:	d80f      	bhi.n	80034fa <HAL_DMA_Init+0x3e>
		/* DMA1 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
				- (uint32_t) DMA1_Channel1)
 80034e0:	4b45      	ldr	r3, [pc, #276]	; (80035f8 <HAL_DMA_Init+0x13c>)
 80034e2:	4413      	add	r3, r2
				/ ((uint32_t) DMA1_Channel2 - (uint32_t) DMA1_Channel1)) << 2U;
 80034e4:	4a45      	ldr	r2, [pc, #276]	; (80035fc <HAL_DMA_Init+0x140>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	091b      	lsrs	r3, r3, #4
 80034ec:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	645a      	str	r2, [r3, #68]	; 0x44
		hdma->DmaBaseAddress = DMA1;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a42      	ldr	r2, [pc, #264]	; (8003600 <HAL_DMA_Init+0x144>)
 80034f6:	641a      	str	r2, [r3, #64]	; 0x40
 80034f8:	e00e      	b.n	8003518 <HAL_DMA_Init+0x5c>
	} else {
		/* DMA2 */
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
				- (uint32_t) DMA2_Channel1)
 8003500:	4b40      	ldr	r3, [pc, #256]	; (8003604 <HAL_DMA_Init+0x148>)
 8003502:	4413      	add	r3, r2
				/ ((uint32_t) DMA2_Channel2 - (uint32_t) DMA2_Channel1)) << 2U;
 8003504:	4a3d      	ldr	r2, [pc, #244]	; (80035fc <HAL_DMA_Init+0x140>)
 8003506:	fba2 2303 	umull	r2, r3, r2, r3
 800350a:	091b      	lsrs	r3, r3, #4
 800350c:	009a      	lsls	r2, r3, #2
		hdma->ChannelIndex = (((uint32_t) hdma->Instance
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	645a      	str	r2, [r3, #68]	; 0x44
		hdma->DmaBaseAddress = DMA2;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a3c      	ldr	r2, [pc, #240]	; (8003608 <HAL_DMA_Init+0x14c>)
 8003516:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

	/* Change DMA peripheral state */
	hdma->State = HAL_DMA_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/* Get the CR register value */
	tmp = hdma->Instance->CCR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	60fb      	str	r3, [r7, #12]

	/* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
	tmp &= ((uint32_t) ~(DMA_CCR_PL | DMA_CCR_MSIZE | DMA_CCR_PSIZE |
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800352e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003532:	60fb      	str	r3, [r7, #12]
	DMA_CCR_MINC | DMA_CCR_PINC | DMA_CCR_CIRC |
	DMA_CCR_DIR | DMA_CCR_MEM2MEM));

	/* Prepare the DMA Channel configuration */
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	431a      	orrs	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
			| hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	431a      	orrs	r2, r3
			| hdma->Init.Mode | hdma->Init.Priority;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	69db      	ldr	r3, [r3, #28]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4313      	orrs	r3, r2
	tmp |= hdma->Init.Direction | hdma->Init.PeriphInc | hdma->Init.MemInc
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	4313      	orrs	r3, r2
 8003560:	60fb      	str	r3, [r7, #12]

	/* Write to DMA Channel CR register */
	hdma->Instance->CCR = tmp;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	601a      	str	r2, [r3, #0]

	/* Initialize parameters for DMAMUX channel :
	 DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
	 */
	DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 f84e 	bl	800360c <DMA_CalcDMAMUXChannelBaseAndMask>

	if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY) {
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003578:	d102      	bne.n	8003580 <HAL_DMA_Init+0xc4>
		/* if memory to memory force the request to 0*/
		hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	605a      	str	r2, [r3, #4]
	}

	/* Set peripheral request  to DMAMUX channel */
	hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003588:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800358c:	601a      	str	r2, [r3, #0]

	/* Clear the DMAMUX synchro overrun flag */
	hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003596:	605a      	str	r2, [r3, #4]

	if (((hdma->Init.Request > 0U)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d010      	beq.n	80035c2 <HAL_DMA_Init+0x106>
			&& (hdma->Init.Request <= DMA_REQUEST_GENERATOR3))) {
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b04      	cmp	r3, #4
 80035a6:	d80c      	bhi.n	80035c2 <HAL_DMA_Init+0x106>
		/* Initialize parameters for DMAMUX request generator :
		 DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
		 */
		DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f000 f86d 	bl	8003688 <DMA_CalcDMAMUXRequestGenBaseAndMask>

		/* Reset the DMAMUX request generator register*/
		hdma->DMAmuxRequestGen->RGCR = 0U;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

		/* Clear the DMAMUX request generator overrun flag */
		hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035be:	605a      	str	r2, [r3, #4]
 80035c0:	e008      	b.n	80035d4 <HAL_DMA_Init+0x118>
	} else {
		hdma->DMAmuxRequestGen = 0U;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2200      	movs	r2, #0
 80035c6:	655a      	str	r2, [r3, #84]	; 0x54
		hdma->DMAmuxRequestGenStatus = 0U;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	659a      	str	r2, [r3, #88]	; 0x58
		hdma->DMAmuxRequestGenStatusMask = 0U;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	65da      	str	r2, [r3, #92]	; 0x5c
	}

	/* Initialize the error code */
	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2200      	movs	r2, #0
 80035d8:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Initialize the DMA state*/
	hdma->State = HAL_DMA_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	/* Allocate lock resource and initialize it */
	hdma->Lock = HAL_UNLOCKED;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	40020407 	.word	0x40020407
 80035f8:	bffdfff8 	.word	0xbffdfff8
 80035fc:	cccccccd 	.word	0xcccccccd
 8003600:	40020000 	.word	0x40020000
 8003604:	bffdfbf8 	.word	0xbffdfbf8
 8003608:	40020400 	.word	0x40020400

0800360c <DMA_CalcDMAMUXChannelBaseAndMask>:
 * @brief  Updates the DMA handle with the DMAMUX  channel and status mask depending on channel number
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Channel.
 * @retval None
 */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma) {
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
	uint32_t channel_number;

	/* check if instance is not outside the DMA channel range */
#if defined(DMA2)
	if ((uint32_t) hdma->Instance < (uint32_t) DMA2_Channel1) {
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	461a      	mov	r2, r3
 800361a:	4b17      	ldr	r3, [pc, #92]	; (8003678 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800361c:	429a      	cmp	r2, r3
 800361e:	d80a      	bhi.n	8003636 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
		/* DMA1 */
		hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003624:	089b      	lsrs	r3, r3, #2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800362c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	6493      	str	r3, [r2, #72]	; 0x48
 8003634:	e007      	b.n	8003646 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
	} else {
		/* DMA2 */
		hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	009a      	lsls	r2, r3, #2
 800363e:	4b0f      	ldr	r3, [pc, #60]	; (800367c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003640:	4413      	add	r3, r2
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6493      	str	r3, [r2, #72]	; 0x48
	}
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif
	channel_number = (((uint32_t) hdma->Instance & 0xFFU) - 8U) / 20U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3b08      	subs	r3, #8
 800364e:	4a0c      	ldr	r2, [pc, #48]	; (8003680 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003650:	fba2 2303 	umull	r2, r3, r2, r3
 8003654:	091b      	lsrs	r3, r3, #4
 8003656:	60fb      	str	r3, [r7, #12]
	hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a0a      	ldr	r2, [pc, #40]	; (8003684 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800365c:	64da      	str	r2, [r3, #76]	; 0x4c

	/* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
	hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f003 031f 	and.w	r3, r3, #31
 8003664:	2201      	movs	r2, #1
 8003666:	409a      	lsls	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800366c:	bf00      	nop
 800366e:	3714      	adds	r7, #20
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	40020407 	.word	0x40020407
 800367c:	4002081c 	.word	0x4002081c
 8003680:	cccccccd 	.word	0xcccccccd
 8003684:	40020880 	.word	0x40020880

08003688 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
 * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
 *                     the configuration information for the specified DMA Channel.
 * @retval None
 */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma) {
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
	uint32_t request = hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003698:	60fb      	str	r3, [r7, #12]

	/* DMA Channels are connected to DMAMUX1 request generator blocks*/
	hdma->DMAmuxRequestGen =
			(DMAMUX_RequestGen_TypeDef*) ((uint32_t) (((uint32_t) DMAMUX1_RequestGenerator0)
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	4b0b      	ldr	r3, [pc, #44]	; (80036cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800369e:	4413      	add	r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	461a      	mov	r2, r3
	hdma->DMAmuxRequestGen =
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	655a      	str	r2, [r3, #84]	; 0x54
					+ ((request - 1U) * 4U)));

	hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a09      	ldr	r2, [pc, #36]	; (80036d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 80036ac:	659a      	str	r2, [r3, #88]	; 0x58

	/* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
	hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	3b01      	subs	r3, #1
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	2201      	movs	r2, #1
 80036b8:	409a      	lsls	r2, r3
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	1000823f 	.word	0x1000823f
 80036d0:	40020940 	.word	0x40020940

080036d4 <HAL_GPIO_Init>:
 * @param GPIOx where x can be (A..H) to select the GPIO peripheral for STM32WBxx family
 * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 80036d4:	b480      	push	{r7}
 80036d6:	b087      	sub	sp, #28
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00u;
 80036de:	2300      	movs	r3, #0
 80036e0:	617b      	str	r3, [r7, #20]
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
	assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

	/* Configure the port pins */
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 80036e2:	e14c      	b.n	800397e <HAL_GPIO_Init+0x2aa>
		/* Get current io position */
		iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	fa01 f303 	lsl.w	r3, r1, r3
 80036f0:	4013      	ands	r3, r2
 80036f2:	60fb      	str	r3, [r7, #12]

		if (iocurrent != 0x00u) {
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 813e 	beq.w	8003978 <HAL_GPIO_Init+0x2a4>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d00b      	beq.n	800371c <HAL_GPIO_Init+0x48>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_PP)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d007      	beq.n	800371c <HAL_GPIO_Init+0x48>
					|| (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD)
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b11      	cmp	r3, #17
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x48>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	2b12      	cmp	r3, #18
 800371a:	d130      	bne.n	800377e <HAL_GPIO_Init+0xaa>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	005b      	lsls	r3, r3, #1
 8003726:	2203      	movs	r2, #3
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43db      	mvns	r3, r3
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_Init->Speed << (position * 2u));
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	68da      	ldr	r2, [r3, #12]
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	fa02 f303 	lsl.w	r3, r2, r3
 8003740:	693a      	ldr	r2, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	613b      	str	r3, [r7, #16]
				GPIOx->OSPEEDR = temp;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	613b      	str	r3, [r7, #16]
				temp &= ~(GPIO_OTYPER_OT0 << position);
 8003752:	2201      	movs	r2, #1
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	fa02 f303 	lsl.w	r3, r2, r3
 800375a:	43db      	mvns	r3, r3
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	4013      	ands	r3, r2
 8003760:	613b      	str	r3, [r7, #16]
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	091b      	lsrs	r3, r3, #4
 8003768:	f003 0201 	and.w	r2, r3, #1
						<< position);
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u)
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	4313      	orrs	r3, r2
 8003776:	613b      	str	r3, [r7, #16]
				GPIOx->OTYPER = temp;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	605a      	str	r2, [r3, #4]
			}

			/* Activate the Pull-up or Pull down resistor for the current IO */
			temp = GPIOx->PUPDR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	2203      	movs	r2, #3
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43db      	mvns	r3, r3
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4013      	ands	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	689a      	ldr	r2, [r3, #8]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
			GPIOx->PUPDR = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	60da      	str	r2, [r3, #12]

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode == GPIO_MODE_AF_PP)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d003      	beq.n	80037be <HAL_GPIO_Init+0xea>
					|| (GPIO_Init->Mode == GPIO_MODE_AF_OD)) {
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b12      	cmp	r3, #18
 80037bc:	d123      	bne.n	8003806 <HAL_GPIO_Init+0x132>
				/* Check the Alternate function parameters */
				assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3u];
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	3208      	adds	r2, #8
 80037c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ca:	613b      	str	r3, [r7, #16]
				temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	220f      	movs	r2, #15
 80037d6:	fa02 f303 	lsl.w	r3, r2, r3
 80037da:	43db      	mvns	r3, r3
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4013      	ands	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
				temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
				GPIOx->AFR[position >> 3u] = temp;
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	08da      	lsrs	r2, r3, #3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	3208      	adds	r2, #8
 8003800:	6939      	ldr	r1, [r7, #16]
 8003802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	613b      	str	r3, [r7, #16]
			temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	2203      	movs	r2, #3
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	43db      	mvns	r3, r3
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0203 	and.w	r2, r3, #3
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	005b      	lsls	r3, r3, #1
 800382a:	fa02 f303 	lsl.w	r3, r2, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
			GPIOx->MODER = temp;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) {
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	f000 8098 	beq.w	8003978 <HAL_GPIO_Init+0x2a4>
				temp = SYSCFG->EXTICR[position >> 2u];
 8003848:	4a54      	ldr	r2, [pc, #336]	; (800399c <HAL_GPIO_Init+0x2c8>)
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	089b      	lsrs	r3, r3, #2
 800384e:	3302      	adds	r3, #2
 8003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003854:	613b      	str	r3, [r7, #16]
				temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f003 0303 	and.w	r3, r3, #3
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	220f      	movs	r2, #15
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4013      	ands	r3, r2
 800386a:	613b      	str	r3, [r7, #16]
				temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003872:	d019      	beq.n	80038a8 <HAL_GPIO_Init+0x1d4>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a4a      	ldr	r2, [pc, #296]	; (80039a0 <HAL_GPIO_Init+0x2cc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d013      	beq.n	80038a4 <HAL_GPIO_Init+0x1d0>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a49      	ldr	r2, [pc, #292]	; (80039a4 <HAL_GPIO_Init+0x2d0>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d00d      	beq.n	80038a0 <HAL_GPIO_Init+0x1cc>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a48      	ldr	r2, [pc, #288]	; (80039a8 <HAL_GPIO_Init+0x2d4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <HAL_GPIO_Init+0x1c8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a47      	ldr	r2, [pc, #284]	; (80039ac <HAL_GPIO_Init+0x2d8>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d101      	bne.n	8003898 <HAL_GPIO_Init+0x1c4>
 8003894:	2304      	movs	r3, #4
 8003896:	e008      	b.n	80038aa <HAL_GPIO_Init+0x1d6>
 8003898:	2307      	movs	r3, #7
 800389a:	e006      	b.n	80038aa <HAL_GPIO_Init+0x1d6>
 800389c:	2303      	movs	r3, #3
 800389e:	e004      	b.n	80038aa <HAL_GPIO_Init+0x1d6>
 80038a0:	2302      	movs	r3, #2
 80038a2:	e002      	b.n	80038aa <HAL_GPIO_Init+0x1d6>
 80038a4:	2301      	movs	r3, #1
 80038a6:	e000      	b.n	80038aa <HAL_GPIO_Init+0x1d6>
 80038a8:	2300      	movs	r3, #0
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	f002 0203 	and.w	r2, r2, #3
 80038b0:	0092      	lsls	r2, r2, #2
 80038b2:	4093      	lsls	r3, r2
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
				SYSCFG->EXTICR[position >> 2u] = temp;
 80038ba:	4938      	ldr	r1, [pc, #224]	; (800399c <HAL_GPIO_Init+0x2c8>)
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	089b      	lsrs	r3, r3, #2
 80038c0:	3302      	adds	r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR1;
 80038c8:	4b39      	ldr	r3, [pc, #228]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 80038ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038ce:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	43db      	mvns	r3, r3
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4013      	ands	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT) {
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0x21a>
					temp |= iocurrent;
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
				}
				EXTI->IMR1 = temp;
 80038ee:	4a30      	ldr	r2, [pc, #192]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

				temp = EXTI->EMR1;
 80038f6:	4b2e      	ldr	r3, [pc, #184]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 80038f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038fc:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	43db      	mvns	r3, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4013      	ands	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT) {
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d003      	beq.n	800391c <HAL_GPIO_Init+0x248>
					temp |= iocurrent;
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
				}
				EXTI->EMR1 = temp;
 800391c:	4a24      	ldr	r2, [pc, #144]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR1;
 8003924:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE) {
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d003      	beq.n	8003948 <HAL_GPIO_Init+0x274>
					temp |= iocurrent;
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]
				}
				EXTI->RTSR1 = temp;
 8003948:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	6013      	str	r3, [r2, #0]

				temp = EXTI->FTSR1;
 800394e:	4b18      	ldr	r3, [pc, #96]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	613b      	str	r3, [r7, #16]
				temp &= ~(iocurrent);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	43db      	mvns	r3, r3
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4013      	ands	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
				if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE) {
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d003      	beq.n	8003972 <HAL_GPIO_Init+0x29e>
					temp |= iocurrent;
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	4313      	orrs	r3, r2
 8003970:	613b      	str	r3, [r7, #16]
				}
				EXTI->FTSR1 = temp;
 8003972:	4a0f      	ldr	r2, [pc, #60]	; (80039b0 <HAL_GPIO_Init+0x2dc>)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	6053      	str	r3, [r2, #4]
			}
		}

		position++;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3301      	adds	r3, #1
 800397c:	617b      	str	r3, [r7, #20]
	while (((GPIO_Init->Pin) >> position) != 0x00u) {
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
 8003988:	2b00      	cmp	r3, #0
 800398a:	f47f aeab 	bne.w	80036e4 <HAL_GPIO_Init+0x10>
	}
}
 800398e:	bf00      	nop
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40010000 	.word	0x40010000
 80039a0:	48000400 	.word	0x48000400
 80039a4:	48000800 	.word	0x48000800
 80039a8:	48000c00 	.word	0x48000c00
 80039ac:	48001000 	.word	0x48001000
 80039b0:	58000800 	.word	0x58000800

080039b4 <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	460b      	mov	r3, r1
 80039be:	807b      	strh	r3, [r7, #2]
 80039c0:	4613      	mov	r3, r2
 80039c2:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 80039c4:	787b      	ldrb	r3, [r7, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = (uint32_t) GPIO_Pin;
 80039ca:	887a      	ldrh	r2, [r7, #2]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BRR = (uint32_t) GPIO_Pin;
	}
}
 80039d0:	e002      	b.n	80039d8 <HAL_GPIO_WritePin+0x24>
		GPIOx->BRR = (uint32_t) GPIO_Pin;
 80039d2:	887a      	ldrh	r2, [r7, #2]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_HSEM_IRQHandler>:

/**
 * @brief  This function handles HSEM interrupt request
 * @retval None
 */
void HAL_HSEM_IRQHandler(void) {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
	uint32_t statusreg;
	/* Get the list of masked freed semaphores*/
	statusreg = HSEM_COMMON->MISR;
 80039ea:	4b0a      	ldr	r3, [pc, #40]	; (8003a14 <HAL_HSEM_IRQHandler+0x30>)
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	607b      	str	r3, [r7, #4]

	/*Disable Interrupts*/
	HSEM_COMMON->IER &= ~((uint32_t) statusreg);
 80039f0:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <HAL_HSEM_IRQHandler+0x30>)
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	43db      	mvns	r3, r3
 80039f8:	4906      	ldr	r1, [pc, #24]	; (8003a14 <HAL_HSEM_IRQHandler+0x30>)
 80039fa:	4013      	ands	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

	/*Clear Flags*/
	HSEM_COMMON->ICR = ((uint32_t) statusreg);
 80039fe:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <HAL_HSEM_IRQHandler+0x30>)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6053      	str	r3, [r2, #4]

	/* Call FreeCallback */
	HAL_HSEM_FreeCallback(statusreg);
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f807 	bl	8003a18 <HAL_HSEM_FreeCallback>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	58001500 	.word	0x58001500

08003a18 <HAL_HSEM_FreeCallback>:
/**
 * @brief Semaphore Released Callback.
 * @param SemMask: Mask of Released semaphores
 * @retval None
 */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask) {
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
	UNUSED(SemMask);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_HSEM_FreeCallback can be implemented in the user file
	 */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_LPTIM_Init>:
 * @brief  Initialize the LPTIM according to the specified parameters in the
 *         LPTIM_InitTypeDef and initialize the associated handle.
 * @param  hlptim LPTIM handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim) {
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
	uint32_t tmpcfgr;

	/* Check the LPTIM handle allocation */
	if (hlptim == NULL) {
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d101      	bne.n	8003a3e <HAL_LPTIM_Init+0x12>
		return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e082      	b.n	8003b44 <HAL_LPTIM_Init+0x118>
	}
	assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
	assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
	assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

	if (hlptim->State == HAL_LPTIM_STATE_RESET) {
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d106      	bne.n	8003a58 <HAL_LPTIM_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hlptim->Lock = HAL_UNLOCKED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_LPTIM_MspInit(hlptim);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fd fb2c 	bl	80010b0 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
	}

	/* Change the LPTIM state */
	hlptim->State = HAL_LPTIM_STATE_BUSY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Get the LPTIMx CFGR value */
	tmpcfgr = hlptim->Instance->CFGR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	60fb      	str	r3, [r7, #12]

	if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) {
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d103      	bne.n	8003a78 <HAL_LPTIM_Init+0x4c>
		tmpcfgr &= (uint32_t) (~(LPTIM_CFGR_CKPOL));
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f023 0306 	bic.w	r3, r3, #6
 8003a76:	60fb      	str	r3, [r7, #12]
	}
	if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE) {
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	695b      	ldr	r3, [r3, #20]
 8003a7c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d003      	beq.n	8003a8c <HAL_LPTIM_Init+0x60>
		tmpcfgr &= (uint32_t) (~(LPTIM_CFGR_TRIGSEL));
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003a8a:	60fb      	str	r3, [r7, #12]
	}
	if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC) {
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_LPTIM_Init+0x70>
		tmpcfgr &= (uint32_t) (~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 03d8 	bic.w	r3, r3, #216	; 0xd8
 8003a9a:	60fb      	str	r3, [r7, #12]
	}

	/* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
	tmpcfgr &= (uint32_t) (~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	4b2b      	ldr	r3, [pc, #172]	; (8003b4c <HAL_LPTIM_Init+0x120>)
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
			| LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
			LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

	/* Set initialization parameters */
	tmpcfgr |= (hlptim->Init.Clock.Source | hlptim->Init.Clock.Prescaler
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	431a      	orrs	r2, r3
			| hlptim->Init.OutputPolarity | hlptim->Init.UpdateMode
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	431a      	orrs	r2, r3
			| hlptim->Init.CounterSource);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003abe:	4313      	orrs	r3, r2
	tmpcfgr |= (hlptim->Init.Clock.Source | hlptim->Init.Clock.Prescaler
 8003ac0:	68fa      	ldr	r2, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	60fb      	str	r3, [r7, #12]

	/* Glitch filters for internal triggers and  external inputs are configured
	 * only if an internal clock source is provided to the LPTIM
	 */
	if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC) {
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d107      	bne.n	8003ade <HAL_LPTIM_Init+0xb2>
		tmpcfgr |= (hlptim->Init.Trigger.SampleTime
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69da      	ldr	r2, [r3, #28]
				| hlptim->Init.UltraLowPowerClock.SampleTime);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	4313      	orrs	r3, r2
		tmpcfgr |= (hlptim->Init.Trigger.SampleTime
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
	}

	/* Configure the active edge or edges used by the counter only if LPTIM is
	 * clocked by an external clock source
	 */
	if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM) {
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d104      	bne.n	8003af0 <HAL_LPTIM_Init+0xc4>
		tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
	}

	if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE) {
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d007      	beq.n	8003b0c <HAL_LPTIM_Init+0xe0>
		/* Enable External trigger and set the trigger source */
		tmpcfgr |= (hlptim->Init.Trigger.Source
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695a      	ldr	r2, [r3, #20]
				| hlptim->Init.Trigger.ActiveEdge);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	4313      	orrs	r3, r2
		tmpcfgr |= (hlptim->Init.Trigger.Source
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]
	}

	/* Write to LPTIMx CFGR */
	hlptim->Instance->CFGR = tmpcfgr;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	68fa      	ldr	r2, [r7, #12]
 8003b12:	60da      	str	r2, [r3, #12]
#if defined(LPTIM_OR_OR)

	/* Configure LPTIM input sources */
	if (hlptim->Instance == LPTIM1) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a0d      	ldr	r2, [pc, #52]	; (8003b50 <HAL_LPTIM_Init+0x124>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d108      	bne.n	8003b30 <HAL_LPTIM_Init+0x104>
				IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
		assert_param(
				IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

		/* Configure LPTIM Input1 and Input2 sources */
		hlptim->Instance->OR = (hlptim->Init.Input1Source
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
				| hlptim->Init.Input2Source);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
		hlptim->Instance->OR = (hlptim->Init.Input1Source
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
				| hlptim->Init.Input2Source);
 8003b2a:	430a      	orrs	r2, r1
		hlptim->Instance->OR = (hlptim->Init.Input1Source
 8003b2c:	621a      	str	r2, [r3, #32]
 8003b2e:	e004      	b.n	8003b3a <HAL_LPTIM_Init+0x10e>
		/* Check LPTIM2 Input1 source */
		assert_param(
				IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

		/* Configure LPTIM2 Input1 source */
		hlptim->Instance->OR = hlptim->Init.Input1Source;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b38:	621a      	str	r2, [r3, #32]
	}
#endif /* LPTIM_OR_OR */

	/* Change the LPTIM state */
	hlptim->State = HAL_LPTIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

	/* Return function status */
	return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	ff19f1f8 	.word	0xff19f1f8
 8003b50:	40007c00 	.word	0x40007c00

08003b54 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b58:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a04      	ldr	r2, [pc, #16]	; (8003b70 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b62:	6013      	str	r3, [r2, #0]
}
 8003b64:	bf00      	nop
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	58000400 	.word	0x58000400

08003b74 <HAL_PWREx_GetVoltageRange>:
#if defined(PWR_CR1_VOS)
/**
 * @brief Return Voltage Scaling Range.
 * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
 */
uint32_t HAL_PWREx_GetVoltageRange(void) {
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
	return (PWR->CR1 & PWR_CR1_VOS);
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	46bd      	mov	sp, r7
 8003b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b88:	4770      	bx	lr
 8003b8a:	bf00      	nop
 8003b8c:	58000400 	.word	0x58000400

08003b90 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8003b94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ba2:	d101      	bne.n	8003ba8 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <LL_RCC_HSE_EnableBypass>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003bb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr

08003bd2 <LL_RCC_HSE_DisableBypass>:
{
 8003bd2:	b480      	push	{r7}
 8003bd4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8003bd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be4:	6013      	str	r3, [r2, #0]
}
 8003be6:	bf00      	nop
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <LL_RCC_HSE_Enable>:
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003bf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003bfe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c02:	6013      	str	r3, [r2, #0]
}
 8003c04:	bf00      	nop
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr

08003c0e <LL_RCC_HSE_Disable>:
{
 8003c0e:	b480      	push	{r7}
 8003c10:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c20:	6013      	str	r3, [r2, #0]
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <LL_RCC_HSE_IsReady>:
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003c3e:	d101      	bne.n	8003c44 <LL_RCC_HSE_IsReady+0x18>
 8003c40:	2301      	movs	r3, #1
 8003c42:	e000      	b.n	8003c46 <LL_RCC_HSE_IsReady+0x1a>
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <LL_RCC_HSI_Enable>:
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003c54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr

08003c6e <LL_RCC_HSI_Disable>:
{
 8003c6e:	b480      	push	{r7}
 8003c70:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003c72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003c7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <LL_RCC_HSI_IsReady>:
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003c90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9e:	d101      	bne.n	8003ca4 <LL_RCC_HSI_IsReady+0x18>
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e000      	b.n	8003ca6 <LL_RCC_HSI_IsReady+0x1a>
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <LL_RCC_HSI_SetCalibTrimming>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8003cb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	604b      	str	r3, [r1, #4]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr

08003cda <LL_RCC_HSI48_Enable>:
{
 8003cda:	b480      	push	{r7}
 8003cdc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ce2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ce6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003cea:	f043 0301 	orr.w	r3, r3, #1
 8003cee:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003cf2:	bf00      	nop
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <LL_RCC_HSI48_Disable>:
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8003d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr

08003d1e <LL_RCC_HSI48_IsReady>:
{
 8003d1e:	b480      	push	{r7}
 8003d20:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 8003d22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d101      	bne.n	8003d36 <LL_RCC_HSI48_IsReady+0x18>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <LL_RCC_HSI48_IsReady+0x1a>
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr

08003d42 <LL_RCC_LSE_Enable>:
{
 8003d42:	b480      	push	{r7}
 8003d44:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d52:	f043 0301 	orr.w	r3, r3, #1
 8003d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d5a:	bf00      	nop
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr

08003d64 <LL_RCC_LSE_Disable>:
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003d68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d74:	f023 0301 	bic.w	r3, r3, #1
 8003d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d7c:	bf00      	nop
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <LL_RCC_LSE_EnableBypass>:
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003d8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003d96:	f043 0304 	orr.w	r3, r3, #4
 8003d9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003d9e:	bf00      	nop
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <LL_RCC_LSE_DisableBypass>:
{
 8003da8:	b480      	push	{r7}
 8003daa:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003dac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003db8:	f023 0304 	bic.w	r3, r3, #4
 8003dbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003dc0:	bf00      	nop
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <LL_RCC_LSE_IsReady>:
{
 8003dca:	b480      	push	{r7}
 8003dcc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003dce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b02      	cmp	r3, #2
 8003ddc:	d101      	bne.n	8003de2 <LL_RCC_LSE_IsReady+0x18>
 8003dde:	2301      	movs	r3, #1
 8003de0:	e000      	b.n	8003de4 <LL_RCC_LSE_IsReady+0x1a>
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr

08003dee <LL_RCC_LSI1_Enable>:
{
 8003dee:	b480      	push	{r7}
 8003df0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003df2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003df6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfe:	f043 0301 	orr.w	r3, r3, #1
 8003e02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e06:	bf00      	nop
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0e:	4770      	bx	lr

08003e10 <LL_RCC_LSI1_Disable>:
{
 8003e10:	b480      	push	{r7}
 8003e12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 8003e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e28:	bf00      	nop
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <LL_RCC_LSI1_IsReady>:
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 8003e36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d101      	bne.n	8003e4a <LL_RCC_LSI1_IsReady+0x18>
 8003e46:	2301      	movs	r3, #1
 8003e48:	e000      	b.n	8003e4c <LL_RCC_LSI1_IsReady+0x1a>
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <LL_RCC_LSI2_Enable>:
{
 8003e56:	b480      	push	{r7}
 8003e58:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e5a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e6e:	bf00      	nop
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <LL_RCC_LSI2_Disable>:
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8003e7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e84:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e88:	f023 0304 	bic.w	r3, r3, #4
 8003e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <LL_RCC_LSI2_IsReady>:
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8003e9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b08      	cmp	r3, #8
 8003eac:	d101      	bne.n	8003eb2 <LL_RCC_LSI2_IsReady+0x18>
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e000      	b.n	8003eb4 <LL_RCC_LSI2_IsReady+0x1a>
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr

08003ebe <LL_RCC_LSI2_SetTrimming>:
{
 8003ebe:	b480      	push	{r7}
 8003ec0:	b083      	sub	sp, #12
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 8003ec6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ece:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <LL_RCC_MSI_Enable>:
{
 8003eec:	b480      	push	{r7}
 8003eee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003ef0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	6013      	str	r3, [r2, #0]
}
 8003f00:	bf00      	nop
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr

08003f0a <LL_RCC_MSI_Disable>:
{
 8003f0a:	b480      	push	{r7}
 8003f0c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003f0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003f18:	f023 0301 	bic.w	r3, r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <LL_RCC_MSI_IsReady>:
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d101      	bne.n	8003f3e <LL_RCC_MSI_IsReady+0x16>
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <LL_RCC_MSI_IsReady+0x18>
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <LL_RCC_MSI_SetRange>:
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8003f52:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f5c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	600b      	str	r3, [r1, #0]
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <LL_RCC_MSI_GetRange>:
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8003f78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f82:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2bb0      	cmp	r3, #176	; 0xb0
 8003f88:	d901      	bls.n	8003f8e <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8003f8a:	23b0      	movs	r3, #176	; 0xb0
 8003f8c:	607b      	str	r3, [r7, #4]
  return msiRange;
 8003f8e:	687b      	ldr	r3, [r7, #4]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <LL_RCC_MSI_SetCalibTrimming>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	021b      	lsls	r3, r3, #8
 8003fb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	604b      	str	r3, [r1, #4]
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <LL_RCC_SetSysClkSource>:
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	f023 0203 	bic.w	r2, r3, #3
 8003fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	608b      	str	r3, [r1, #8]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <LL_RCC_GetSysClkSource>:
{
 8003fee:	b480      	push	{r7}
 8003ff0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003ff2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_RCC_SetAHBPrescaler>:
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800400e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004018:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4313      	orrs	r3, r2
 8004020:	608b      	str	r3, [r1, #8]
}
 8004022:	bf00      	nop
 8004024:	370c      	adds	r7, #12
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr

0800402e <LL_C2_RCC_SetAHBPrescaler>:
{
 800402e:	b480      	push	{r7}
 8004030:	b083      	sub	sp, #12
 8004032:	af00      	add	r7, sp, #0
 8004034:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8004036:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800403a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800403e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004042:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4313      	orrs	r3, r2
 800404a:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr

0800405a <LL_RCC_SetAHB4Prescaler>:
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8004062:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004066:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800406a:	f023 020f 	bic.w	r2, r3, #15
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004076:	4313      	orrs	r3, r2
 8004078:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800407c:	bf00      	nop
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_RCC_SetAPB1Prescaler>:
{
 8004088:	b480      	push	{r7}
 800408a:	b083      	sub	sp, #12
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8004090:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800409a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	608b      	str	r3, [r1, #8]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_RCC_SetAPB2Prescaler>:
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80040b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	608b      	str	r3, [r1, #8]
}
 80040cc:	bf00      	nop
 80040ce:	370c      	adds	r7, #12
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <LL_RCC_GetAHBPrescaler>:
{
 80040d8:	b480      	push	{r7}
 80040da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80040dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr

080040f0 <LL_RCC_GetAHB4Prescaler>:
{
 80040f0:	b480      	push	{r7}
 80040f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80040f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80040f8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004110:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800411a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr

0800412a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800412e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004138:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800413c:	6013      	str	r3, [r2, #0]
}
 800413e:	bf00      	nop
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800414c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004156:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800415a:	d101      	bne.n	8004160 <LL_RCC_PLL_IsReady+0x18>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <LL_RCC_PLL_IsReady+0x1a>
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	0a1b      	lsrs	r3, r3, #8
 8004178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800417c:	4618      	mov	r0, r3
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004186:	b480      	push	{r7}
 8004188:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800418a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8004194:	4618      	mov	r0, r3
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800419e:	b480      	push	{r7}
 80041a0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80041a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr

080041b6 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80041b6:	b480      	push	{r7}
 80041b8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80041ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0303 	and.w	r3, r3, #3
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80041ce:	b480      	push	{r7}
 80041d0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80041d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041e0:	d101      	bne.n	80041e6 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80041f2:	b480      	push	{r7}
 80041f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80041f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80041fa:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80041fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004202:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004206:	d101      	bne.n	800420c <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8004208:	2301      	movs	r3, #1
 800420a:	e000      	b.n	800420e <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK4 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 800421c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004220:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004224:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004228:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800422c:	d101      	bne.n	8004232 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 800423e:	b480      	push	{r7}
 8004240:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8004242:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800424c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004250:	d101      	bne.n	8004256 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8004262:	b480      	push	{r7}
 8004264:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8004266:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004270:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004274:	d101      	bne.n	800427a <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
	...

08004288 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b08d      	sub	sp, #52	; 0x34
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d101      	bne.n	800429a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e386      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	f000 808f 	beq.w	80043c6 <HAL_RCC_OscConfig+0x13e>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042a8:	f7ff fea1 	bl	8003fee <LL_RCC_GetSysClkSource>
 80042ac:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042ae:	f7ff ff82 	bl	80041b6 <LL_RCC_PLL_GetMainSource>
 80042b2:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80042b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d005      	beq.n	80042c6 <HAL_RCC_OscConfig+0x3e>
 80042ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042bc:	2b0c      	cmp	r3, #12
 80042be:	d149      	bne.n	8004354 <HAL_RCC_OscConfig+0xcc>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80042c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d146      	bne.n	8004354 <HAL_RCC_OscConfig+0xcc>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042c6:	f7ff fe2f 	bl	8003f28 <LL_RCC_MSI_IsReady>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d005      	beq.n	80042dc <HAL_RCC_OscConfig+0x54>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e365      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80042e0:	f7ff fe47 	bl	8003f72 <LL_RCC_MSI_GetRange>
 80042e4:	4603      	mov	r3, r0
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d914      	bls.n	8004314 <HAL_RCC_OscConfig+0x8c>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	4618      	mov	r0, r3
 80042f0:	f000 fd1a 	bl	8004d28 <RCC_SetFlashLatencyFromMSIRange>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x76>
          {
            return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e354      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	4618      	mov	r0, r3
 8004304:	f7ff fe21 	bl	8003f4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff fe45 	bl	8003f9c <LL_RCC_MSI_SetCalibTrimming>
 8004312:	e013      	b.n	800433c <HAL_RCC_OscConfig+0xb4>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff fe16 	bl	8003f4a <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	4618      	mov	r0, r3
 8004324:	f7ff fe3a 	bl	8003f9c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	4618      	mov	r0, r3
 800432e:	f000 fcfb 	bl	8004d28 <RCC_SetFlashLatencyFromMSIRange>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_RCC_OscConfig+0xb4>
          {
            return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e335      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClockUpdate();
 800433c:	f7fc ffb2 	bl	80012a4 <SystemCoreClockUpdate>
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004340:	4bb4      	ldr	r3, [pc, #720]	; (8004614 <HAL_RCC_OscConfig+0x38c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f7fd f8a7 	bl	8001498 <HAL_InitTick>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d039      	beq.n	80043c4 <HAL_RCC_OscConfig+0x13c>
        {
          return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e329      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d01e      	beq.n	800439a <HAL_RCC_OscConfig+0x112>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800435c:	f7ff fdc6 	bl	8003eec <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004360:	f7fd f8e8 	bl	8001534 <HAL_GetTick>
 8004364:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0xf2>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004368:	f7fd f8e4 	bl	8001534 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e316      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() == 0U)
 800437a:	f7ff fdd5 	bl	8003f28 <LL_RCC_MSI_IsReady>
 800437e:	4603      	mov	r3, r0
 8004380:	2b00      	cmp	r3, #0
 8004382:	d0f1      	beq.n	8004368 <HAL_RCC_OscConfig+0xe0>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	4618      	mov	r0, r3
 800438a:	f7ff fdde 	bl	8003f4a <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff fe02 	bl	8003f9c <LL_RCC_MSI_SetCalibTrimming>
 8004398:	e015      	b.n	80043c6 <HAL_RCC_OscConfig+0x13e>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800439a:	f7ff fdb6 	bl	8003f0a <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800439e:	f7fd f8c9 	bl	8001534 <HAL_GetTick>
 80043a2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80043a4:	e008      	b.n	80043b8 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043a6:	f7fd f8c5 	bl	8001534 <HAL_GetTick>
 80043aa:	4602      	mov	r2, r0
 80043ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	2b02      	cmp	r3, #2
 80043b2:	d901      	bls.n	80043b8 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e2f7      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_MSI_IsReady() != 0U)
 80043b8:	f7ff fdb6 	bl	8003f28 <LL_RCC_MSI_IsReady>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f1      	bne.n	80043a6 <HAL_RCC_OscConfig+0x11e>
 80043c2:	e000      	b.n	80043c6 <HAL_RCC_OscConfig+0x13e>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0301 	and.w	r3, r3, #1
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d05a      	beq.n	8004488 <HAL_RCC_OscConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043d2:	f7ff fe0c 	bl	8003fee <LL_RCC_GetSysClkSource>
 80043d6:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043d8:	f7ff feed 	bl	80041b6 <LL_RCC_PLL_GetMainSource>
 80043dc:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	2b08      	cmp	r3, #8
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_OscConfig+0x168>
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	2b0c      	cmp	r3, #12
 80043e8:	d10d      	bne.n	8004406 <HAL_RCC_OscConfig+0x17e>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b03      	cmp	r3, #3
 80043ee:	d10a      	bne.n	8004406 <HAL_RCC_OscConfig+0x17e>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043f0:	f7ff fc1c 	bl	8003c2c <LL_RCC_HSE_IsReady>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d045      	beq.n	8004486 <HAL_RCC_OscConfig+0x1fe>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d141      	bne.n	8004486 <HAL_RCC_OscConfig+0x1fe>
      {
        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e2d0      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800440e:	d102      	bne.n	8004416 <HAL_RCC_OscConfig+0x18e>
 8004410:	f7ff fbee 	bl	8003bf0 <LL_RCC_HSE_Enable>
 8004414:	e00d      	b.n	8004432 <HAL_RCC_OscConfig+0x1aa>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800441e:	d104      	bne.n	800442a <HAL_RCC_OscConfig+0x1a2>
 8004420:	f7ff fbc8 	bl	8003bb4 <LL_RCC_HSE_EnableBypass>
 8004424:	f7ff fbe4 	bl	8003bf0 <LL_RCC_HSE_Enable>
 8004428:	e003      	b.n	8004432 <HAL_RCC_OscConfig+0x1aa>
 800442a:	f7ff fbf0 	bl	8003c0e <LL_RCC_HSE_Disable>
 800442e:	f7ff fbd0 	bl	8003bd2 <LL_RCC_HSE_DisableBypass>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d012      	beq.n	8004460 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800443a:	f7fd f87b 	bl	8001534 <HAL_GetTick>
 800443e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8004440:	e008      	b.n	8004454 <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004442:	f7fd f877 	bl	8001534 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	2b64      	cmp	r3, #100	; 0x64
 800444e:	d901      	bls.n	8004454 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	e2a9      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() == 0U)
 8004454:	f7ff fbea 	bl	8003c2c <LL_RCC_HSE_IsReady>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f1      	beq.n	8004442 <HAL_RCC_OscConfig+0x1ba>
 800445e:	e013      	b.n	8004488 <HAL_RCC_OscConfig+0x200>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004460:	f7fd f868 	bl	8001534 <HAL_GetTick>
 8004464:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8004466:	e008      	b.n	800447a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004468:	f7fd f864 	bl	8001534 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	2b64      	cmp	r3, #100	; 0x64
 8004474:	d901      	bls.n	800447a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e296      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSE_IsReady() != 0U)
 800447a:	f7ff fbd7 	bl	8003c2c <LL_RCC_HSE_IsReady>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f1      	bne.n	8004468 <HAL_RCC_OscConfig+0x1e0>
 8004484:	e000      	b.n	8004488 <HAL_RCC_OscConfig+0x200>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004486:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d051      	beq.n	8004538 <HAL_RCC_OscConfig+0x2b0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004494:	f7ff fdab 	bl	8003fee <LL_RCC_GetSysClkSource>
 8004498:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 800449a:	f7ff fe8c 	bl	80041b6 <LL_RCC_PLL_GetMainSource>
 800449e:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	2b04      	cmp	r3, #4
 80044a4:	d005      	beq.n	80044b2 <HAL_RCC_OscConfig+0x22a>
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	2b0c      	cmp	r3, #12
 80044aa:	d113      	bne.n	80044d4 <HAL_RCC_OscConfig+0x24c>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d110      	bne.n	80044d4 <HAL_RCC_OscConfig+0x24c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044b2:	f7ff fbeb 	bl	8003c8c <LL_RCC_HSI_IsReady>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_OscConfig+0x240>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_OscConfig+0x240>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e26f      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	4618      	mov	r0, r3
 80044ce:	f7ff fbef 	bl	8003cb0 <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80044d2:	e031      	b.n	8004538 <HAL_RCC_OscConfig+0x2b0>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d019      	beq.n	8004510 <HAL_RCC_OscConfig+0x288>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044dc:	f7ff fbb8 	bl	8003c50 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044e0:	f7fd f828 	bl	8001534 <HAL_GetTick>
 80044e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044e8:	f7fd f824 	bl	8001534 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e256      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() == 0U)
 80044fa:	f7ff fbc7 	bl	8003c8c <LL_RCC_HSI_IsReady>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d0f1      	beq.n	80044e8 <HAL_RCC_OscConfig+0x260>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff fbd1 	bl	8003cb0 <LL_RCC_HSI_SetCalibTrimming>
 800450e:	e013      	b.n	8004538 <HAL_RCC_OscConfig+0x2b0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004510:	f7ff fbad 	bl	8003c6e <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fd f80e 	bl	8001534 <HAL_GetTick>
 8004518:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x2a6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800451c:	f7fd f80a 	bl	8001534 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e23c      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_HSI_IsReady() != 0U)
 800452e:	f7ff fbad 	bl	8003c8c <LL_RCC_HSI_IsReady>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d1f1      	bne.n	800451c <HAL_RCC_OscConfig+0x294>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0308 	and.w	r3, r3, #8
 8004540:	2b00      	cmp	r3, #0
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x2ca>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 800454c:	2b00      	cmp	r3, #0
 800454e:	f000 80a2 	beq.w	8004696 <HAL_RCC_OscConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d075      	beq.n	8004646 <HAL_RCC_OscConfig+0x3be>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0310 	and.w	r3, r3, #16
 8004562:	2b00      	cmp	r3, #0
 8004564:	d046      	beq.n	80045f4 <HAL_RCC_OscConfig+0x36c>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8004566:	f7ff fc64 	bl	8003e32 <LL_RCC_LSI1_IsReady>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d113      	bne.n	8004598 <HAL_RCC_OscConfig+0x310>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8004570:	f7ff fc3d 	bl	8003dee <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004574:	f7fc ffde 	bl	8001534 <HAL_GetTick>
 8004578:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 800457a:	e008      	b.n	800458e <HAL_RCC_OscConfig+0x306>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800457c:	f7fc ffda 	bl	8001534 <HAL_GetTick>
 8004580:	4602      	mov	r2, r0
 8004582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004584:	1ad3      	subs	r3, r2, r3
 8004586:	2b02      	cmp	r3, #2
 8004588:	d901      	bls.n	800458e <HAL_RCC_OscConfig+0x306>
            {
              return HAL_TIMEOUT;
 800458a:	2303      	movs	r3, #3
 800458c:	e20c      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
          while (LL_RCC_LSI1_IsReady() == 0U)
 800458e:	f7ff fc50 	bl	8003e32 <LL_RCC_LSI1_IsReady>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f1      	beq.n	800457c <HAL_RCC_OscConfig+0x2f4>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8004598:	f7ff fc5d 	bl	8003e56 <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fc ffca 	bl	8001534 <HAL_GetTick>
 80045a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x32e>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 80045a4:	f7fc ffc6 	bl	8001534 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x32e>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e1f8      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() == 0U)
 80045b6:	f7ff fc70 	bl	8003e9a <LL_RCC_LSI2_IsReady>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f1      	beq.n	80045a4 <HAL_RCC_OscConfig+0x31c>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7ff fc7a 	bl	8003ebe <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 80045ca:	f7ff fc21 	bl	8003e10 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ce:	f7fc ffb1 	bl	8001534 <HAL_GetTick>
 80045d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 80045d4:	e008      	b.n	80045e8 <HAL_RCC_OscConfig+0x360>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 80045d6:	f7fc ffad 	bl	8001534 <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x360>
          {
            return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e1df      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI1_IsReady() != 0U)
 80045e8:	f7ff fc23 	bl	8003e32 <LL_RCC_LSI1_IsReady>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1f1      	bne.n	80045d6 <HAL_RCC_OscConfig+0x34e>
 80045f2:	e050      	b.n	8004696 <HAL_RCC_OscConfig+0x40e>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 80045f4:	f7ff fbfb 	bl	8003dee <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045f8:	f7fc ff9c 	bl	8001534 <HAL_GetTick>
 80045fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 80045fe:	e00b      	b.n	8004618 <HAL_RCC_OscConfig+0x390>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8004600:	f7fc ff98 	bl	8001534 <HAL_GetTick>
 8004604:	4602      	mov	r2, r0
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d904      	bls.n	8004618 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e1ca      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
 8004612:	bf00      	nop
 8004614:	20000008 	.word	0x20000008
        while (LL_RCC_LSI1_IsReady() == 0U)
 8004618:	f7ff fc0b 	bl	8003e32 <LL_RCC_LSI1_IsReady>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d0ee      	beq.n	8004600 <HAL_RCC_OscConfig+0x378>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8004622:	f7ff fc29 	bl	8003e78 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x3b2>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004628:	f7fc ff84 	bl	8001534 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b03      	cmp	r3, #3
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x3b2>
          {
            return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1b6      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (LL_RCC_LSI2_IsReady() != 0U)
 800463a:	f7ff fc2e 	bl	8003e9a <LL_RCC_LSI2_IsReady>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f1      	bne.n	8004628 <HAL_RCC_OscConfig+0x3a0>
 8004644:	e027      	b.n	8004696 <HAL_RCC_OscConfig+0x40e>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8004646:	f7ff fc17 	bl	8003e78 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800464a:	f7fc ff73 	bl	8001534 <HAL_GetTick>
 800464e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004650:	e008      	b.n	8004664 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8004652:	f7fc ff6f 	bl	8001534 <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b03      	cmp	r3, #3
 800465e:	d901      	bls.n	8004664 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8004660:	2303      	movs	r3, #3
 8004662:	e1a1      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8004664:	f7ff fc19 	bl	8003e9a <LL_RCC_LSI2_IsReady>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1f1      	bne.n	8004652 <HAL_RCC_OscConfig+0x3ca>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 800466e:	f7ff fbcf 	bl	8003e10 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004672:	f7fc ff5f 	bl	8001534 <HAL_GetTick>
 8004676:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x404>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 800467a:	f7fc ff5b 	bl	8001534 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x404>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e18d      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSI1_IsReady() != 0U)
 800468c:	f7ff fbd1 	bl	8003e32 <LL_RCC_LSI1_IsReady>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f1      	bne.n	800467a <HAL_RCC_OscConfig+0x3f2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f003 0304 	and.w	r3, r3, #4
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d05b      	beq.n	800475a <HAL_RCC_OscConfig+0x4d2>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a2:	4bb5      	ldr	r3, [pc, #724]	; (8004978 <HAL_RCC_OscConfig+0x6f0>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d114      	bne.n	80046d8 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80046ae:	f7ff fa51 	bl	8003b54 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046b2:	f7fc ff3f 	bl	8001534 <HAL_GetTick>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b8:	e008      	b.n	80046cc <HAL_RCC_OscConfig+0x444>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046ba:	f7fc ff3b 	bl	8001534 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e16d      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046cc:	4baa      	ldr	r3, [pc, #680]	; (8004978 <HAL_RCC_OscConfig+0x6f0>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0f0      	beq.n	80046ba <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d102      	bne.n	80046e6 <HAL_RCC_OscConfig+0x45e>
 80046e0:	f7ff fb2f 	bl	8003d42 <LL_RCC_LSE_Enable>
 80046e4:	e00c      	b.n	8004700 <HAL_RCC_OscConfig+0x478>
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b05      	cmp	r3, #5
 80046ec:	d104      	bne.n	80046f8 <HAL_RCC_OscConfig+0x470>
 80046ee:	f7ff fb4a 	bl	8003d86 <LL_RCC_LSE_EnableBypass>
 80046f2:	f7ff fb26 	bl	8003d42 <LL_RCC_LSE_Enable>
 80046f6:	e003      	b.n	8004700 <HAL_RCC_OscConfig+0x478>
 80046f8:	f7ff fb34 	bl	8003d64 <LL_RCC_LSE_Disable>
 80046fc:	f7ff fb54 	bl	8003da8 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d014      	beq.n	8004732 <HAL_RCC_OscConfig+0x4aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004708:	f7fc ff14 	bl	8001534 <HAL_GetTick>
 800470c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800470e:	e00a      	b.n	8004726 <HAL_RCC_OscConfig+0x49e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004710:	f7fc ff10 	bl	8001534 <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	f241 3288 	movw	r2, #5000	; 0x1388
 800471e:	4293      	cmp	r3, r2
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x49e>
        {
          return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e140      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() == 0U)
 8004726:	f7ff fb50 	bl	8003dca <LL_RCC_LSE_IsReady>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d0ef      	beq.n	8004710 <HAL_RCC_OscConfig+0x488>
 8004730:	e013      	b.n	800475a <HAL_RCC_OscConfig+0x4d2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004732:	f7fc feff 	bl	8001534 <HAL_GetTick>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8004738:	e00a      	b.n	8004750 <HAL_RCC_OscConfig+0x4c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800473a:	f7fc fefb 	bl	8001534 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	f241 3288 	movw	r2, #5000	; 0x1388
 8004748:	4293      	cmp	r3, r2
 800474a:	d901      	bls.n	8004750 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e12b      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_LSE_IsReady() != 0U)
 8004750:	f7ff fb3b 	bl	8003dca <LL_RCC_LSE_IsReady>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d1ef      	bne.n	800473a <HAL_RCC_OscConfig+0x4b2>
      }
    }

  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02c      	beq.n	80047c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476a:	2b00      	cmp	r3, #0
 800476c:	d014      	beq.n	8004798 <HAL_RCC_OscConfig+0x510>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800476e:	f7ff fab4 	bl	8003cda <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004772:	f7fc fedf 	bl	8001534 <HAL_GetTick>
 8004776:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8004778:	e008      	b.n	800478c <HAL_RCC_OscConfig+0x504>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800477a:	f7fc fedb 	bl	8001534 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d901      	bls.n	800478c <HAL_RCC_OscConfig+0x504>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e10d      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() == 0U)
 800478c:	f7ff fac7 	bl	8003d1e <LL_RCC_HSI48_IsReady>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d0f1      	beq.n	800477a <HAL_RCC_OscConfig+0x4f2>
 8004796:	e013      	b.n	80047c0 <HAL_RCC_OscConfig+0x538>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004798:	f7ff fab0 	bl	8003cfc <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fc feca 	bl	8001534 <HAL_GetTick>
 80047a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 80047a2:	e008      	b.n	80047b6 <HAL_RCC_OscConfig+0x52e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047a4:	f7fc fec6 	bl	8001534 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d901      	bls.n	80047b6 <HAL_RCC_OscConfig+0x52e>
        {
          return HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	e0f8      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      while (LL_RCC_HSI48_IsReady() != 0U)
 80047b6:	f7ff fab2 	bl	8003d1e <LL_RCC_HSI48_IsReady>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1f1      	bne.n	80047a4 <HAL_RCC_OscConfig+0x51c>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	f000 80ee 	beq.w	80049a6 <HAL_RCC_OscConfig+0x71e>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047ca:	f7ff fc10 	bl	8003fee <LL_RCC_GetSysClkSource>
 80047ce:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 80047d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80047d4:	68db      	ldr	r3, [r3, #12]
 80047d6:	60fb      	str	r3, [r7, #12]
    
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	2b02      	cmp	r3, #2
 80047de:	f040 80af 	bne.w	8004940 <HAL_RCC_OscConfig+0x6b8>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
      
      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	f003 0203 	and.w	r2, r3, #3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d123      	bne.n	8004838 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d11c      	bne.n	8004838 <HAL_RCC_OscConfig+0x5b0>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	0a1b      	lsrs	r3, r3, #8
 8004802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d114      	bne.n	8004838 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8004818:	429a      	cmp	r2, r3
 800481a:	d10d      	bne.n	8004838 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004826:	429a      	cmp	r2, r3
 8004828:	d106      	bne.n	8004838 <HAL_RCC_OscConfig+0x5b0>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004834:	429a      	cmp	r2, r3
 8004836:	d05d      	beq.n	80048f4 <HAL_RCC_OscConfig+0x66c>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	2b0c      	cmp	r3, #12
 800483c:	d058      	beq.n	80048f0 <HAL_RCC_OscConfig+0x668>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800483e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x5c8>

          {
            return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0ab      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
          }
          else
#endif
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004850:	f7ff fc6b 	bl	800412a <LL_RCC_PLL_Disable>
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004854:	f7fc fe6e 	bl	8001534 <HAL_GetTick>
 8004858:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800485a:	e008      	b.n	800486e <HAL_RCC_OscConfig+0x5e6>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800485c:	f7fc fe6a 	bl	8001534 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	2b02      	cmp	r3, #2
 8004868:	d901      	bls.n	800486e <HAL_RCC_OscConfig+0x5e6>
              {
                return HAL_TIMEOUT;
 800486a:	2303      	movs	r3, #3
 800486c:	e09c      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800486e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1ef      	bne.n	800485c <HAL_RCC_OscConfig+0x5d4>
              }
            }
            
            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800487c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	4b3e      	ldr	r3, [pc, #248]	; (800497c <HAL_RCC_OscConfig+0x6f4>)
 8004884:	4013      	ands	r3, r2
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800488e:	4311      	orrs	r1, r2
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004894:	0212      	lsls	r2, r2, #8
 8004896:	4311      	orrs	r1, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800489c:	4311      	orrs	r1, r2
 800489e:	687a      	ldr	r2, [r7, #4]
 80048a0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048a2:	4311      	orrs	r1, r2
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048a8:	430a      	orrs	r2, r1
 80048aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
            
            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048b2:	f7ff fc2b 	bl	800410c <LL_RCC_PLL_Enable>
            
            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80048c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c4:	60d3      	str	r3, [r2, #12]
            
            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048c6:	f7fc fe35 	bl	8001534 <HAL_GetTick>
 80048ca:	6278      	str	r0, [r7, #36]	; 0x24
            
            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x658>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048ce:	f7fc fe31 	bl	8001534 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x658>
              {
                return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e063      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <HAL_RCC_OscConfig+0x646>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048ee:	e05a      	b.n	80049a6 <HAL_RCC_OscConfig+0x71e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	e059      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d151      	bne.n	80049a6 <HAL_RCC_OscConfig+0x71e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004902:	f7ff fc03 	bl	800410c <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004914:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004916:	f7fc fe0d 	bl	8001534 <HAL_GetTick>
 800491a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0x6a8>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800491e:	f7fc fe09 	bl	8001534 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b02      	cmp	r3, #2
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0x6a8>
            {
              return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e03b      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0ef      	beq.n	800491e <HAL_RCC_OscConfig+0x696>
 800493e:	e032      	b.n	80049a6 <HAL_RCC_OscConfig+0x71e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d02d      	beq.n	80049a2 <HAL_RCC_OscConfig+0x71a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004946:	f7ff fbf0 	bl	800412a <LL_RCC_PLL_Disable>
        

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800494a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800494e:	68db      	ldr	r3, [r3, #12]
 8004950:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	60d3      	str	r3, [r2, #12]

#if defined(SAI1) && defined(USB)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_USBCLK | RCC_PLL_SAI1CLK);
 800495a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004964:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8004968:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800496c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK);
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496e:	f7fc fde1 	bl	8001534 <HAL_GetTick>
 8004972:	6278      	str	r0, [r7, #36]	; 0x24
        
        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004974:	e00d      	b.n	8004992 <HAL_RCC_OscConfig+0x70a>
 8004976:	bf00      	nop
 8004978:	58000400 	.word	0x58000400
 800497c:	11c1808c 	.word	0x11c1808c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004980:	f7fc fdd8 	bl	8001534 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x70a>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e00a      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004992:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1ef      	bne.n	8004980 <HAL_RCC_OscConfig+0x6f8>
 80049a0:	e001      	b.n	80049a6 <HAL_RCC_OscConfig+0x71e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e000      	b.n	80049a8 <HAL_RCC_OscConfig+0x720>
      }
    }
  }
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3734      	adds	r7, #52	; 0x34
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd90      	pop	{r4, r7, pc}

080049b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e12a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049c4:	4b97      	ldr	r3, [pc, #604]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	429a      	cmp	r2, r3
 80049d0:	d91b      	bls.n	8004a0a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049d2:	4b94      	ldr	r3, [pc, #592]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f023 0207 	bic.w	r2, r3, #7
 80049da:	4992      	ldr	r1, [pc, #584]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	4313      	orrs	r3, r2
 80049e0:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e2:	f7fc fda7 	bl	8001534 <HAL_GetTick>
 80049e6:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049e8:	e008      	b.n	80049fc <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80049ea:	f7fc fda3 	bl	8001534 <HAL_GetTick>
 80049ee:	4602      	mov	r2, r0
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1ad3      	subs	r3, r2, r3
 80049f4:	2b02      	cmp	r3, #2
 80049f6:	d901      	bls.n	80049fc <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e10e      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049fc:	4b89      	ldr	r3, [pc, #548]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0307 	and.w	r3, r3, #7
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d1ef      	bne.n	80049ea <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff faf3 	bl	8004006 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a20:	f7fc fd88 	bl	8001534 <HAL_GetTick>
 8004a24:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a26:	e008      	b.n	8004a3a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a28:	f7fc fd84 	bl	8001534 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d901      	bls.n	8004a3a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e0ef      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8004a3a:	f7ff fbc8 	bl	80041ce <LL_RCC_IsActiveFlag_HPRE>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f1      	beq.n	8004a28 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0320 	and.w	r3, r3, #32
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d016      	beq.n	8004a7e <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7ff faea 	bl	800402e <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a5a:	f7fc fd6b 	bl	8001534 <HAL_GetTick>
 8004a5e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a62:	f7fc fd67 	bl	8001534 <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e0d2      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8004a74:	f7ff fbbd 	bl	80041f2 <LL_RCC_IsActiveFlag_C2HPRE>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f1      	beq.n	8004a62 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d016      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f7ff fae3 	bl	800405a <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004a94:	f7fc fd4e 	bl	8001534 <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004a9c:	f7fc fd4a 	bl	8001534 <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e0b5      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8004aae:	f7ff fbb3 	bl	8004218 <LL_RCC_IsActiveFlag_SHDHPRE>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f1      	beq.n	8004a9c <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 0304 	and.w	r3, r3, #4
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d016      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7ff fadd 	bl	8004088 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004ace:	f7fc fd31 	bl	8001534 <HAL_GetTick>
 8004ad2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004ad6:	f7fc fd2d 	bl	8001534 <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e098      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8004ae8:	f7ff fba9 	bl	800423e <LL_RCC_IsActiveFlag_PPRE1>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f1      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d017      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4618      	mov	r0, r3
 8004b06:	f7ff fad3 	bl	80040b0 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8004b0a:	f7fc fd13 	bl	8001534 <HAL_GetTick>
 8004b0e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b10:	e008      	b.n	8004b24 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8004b12:	f7fc fd0f 	bl	8001534 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b02      	cmp	r3, #2
 8004b1e:	d901      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8004b20:	2303      	movs	r3, #3
 8004b22:	e07a      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8004b24:	f7ff fb9d 	bl	8004262 <LL_RCC_IsActiveFlag_PPRE2>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f1      	beq.n	8004b12 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d043      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d106      	bne.n	8004b50 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8004b42:	f7ff f873 	bl	8003c2c <LL_RCC_HSE_IsReady>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d11e      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e064      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2b03      	cmp	r3, #3
 8004b56:	d106      	bne.n	8004b66 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8004b58:	f7ff faf6 	bl	8004148 <LL_RCC_PLL_IsReady>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d113      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e059      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d106      	bne.n	8004b7c <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8004b6e:	f7ff f9db 	bl	8003f28 <LL_RCC_MSI_IsReady>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d108      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e04e      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8004b7c:	f7ff f886 	bl	8003c8c <LL_RCC_HSI_IsReady>
 8004b80:	4603      	mov	r3, r0
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e047      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7ff fa19 	bl	8003fc6 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b94:	f7fc fcce 	bl	8001534 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b9a:	e00a      	b.n	8004bb2 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b9c:	f7fc fcca 	bl	8001534 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e033      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bb2:	f7ff fa1c 	bl	8003fee <LL_RCC_GetSysClkSource>
 8004bb6:	4602      	mov	r2, r0
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d1ec      	bne.n	8004b9c <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc2:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d21b      	bcs.n	8004c08 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd0:	4b14      	ldr	r3, [pc, #80]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f023 0207 	bic.w	r2, r3, #7
 8004bd8:	4912      	ldr	r1, [pc, #72]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004be0:	f7fc fca8 	bl	8001534 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004be8:	f7fc fca4 	bl	8001534 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e00f      	b.n	8004c1a <HAL_RCC_ClockConfig+0x26a>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bfa:	4b0a      	ldr	r3, [pc, #40]	; (8004c24 <HAL_RCC_ClockConfig+0x274>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d1ef      	bne.n	8004be8 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClockUpdate();
 8004c08:	f7fc fb4c 	bl	80012a4 <SystemCoreClockUpdate>
  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 8004c0c:	f7fc fc9e 	bl	800154c <HAL_GetTickPrio>
 8004c10:	4603      	mov	r3, r0
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc fc40 	bl	8001498 <HAL_InitTick>
 8004c18:	4603      	mov	r3, r0
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	58004000 	.word	0x58004000

08004c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b590      	push	{r4, r7, lr}
 8004c2a:	b085      	sub	sp, #20
 8004c2c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq, pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c2e:	f7ff f9de 	bl	8003fee <LL_RCC_GetSysClkSource>
 8004c32:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10a      	bne.n	8004c50 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004c3a:	f7ff f99a 	bl	8003f72 <LL_RCC_MSI_GetRange>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	091b      	lsrs	r3, r3, #4
 8004c42:	f003 030f 	and.w	r3, r3, #15
 8004c46:	4a2b      	ldr	r2, [pc, #172]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004c48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e04b      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d102      	bne.n	8004c5c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c56:	4b28      	ldr	r3, [pc, #160]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c58:	60fb      	str	r3, [r7, #12]
 8004c5a:	e045      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d10a      	bne.n	8004c78 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c62:	f7fe ff95 	bl	8003b90 <LL_RCC_HSE_IsEnabledDiv2>
 8004c66:	4603      	mov	r3, r0
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d102      	bne.n	8004c72 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8004c6c:	4b22      	ldr	r3, [pc, #136]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	e03a      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8004c72:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004c74:	60fb      	str	r3, [r7, #12]
 8004c76:	e037      	b.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8004c78:	f7ff fa9d 	bl	80041b6 <LL_RCC_PLL_GetMainSource>
 8004c7c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d003      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0x64>
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d003      	beq.n	8004c92 <HAL_RCC_GetSysClockFreq+0x6a>
 8004c8a:	e00d      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8004c8c:	4b1a      	ldr	r3, [pc, #104]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c8e:	60bb      	str	r3, [r7, #8]
        break;
 8004c90:	e015      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8004c92:	f7fe ff7d 	bl	8003b90 <LL_RCC_HSE_IsEnabledDiv2>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d102      	bne.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004c9e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8004ca0:	e00d      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8004ca2:	4b16      	ldr	r3, [pc, #88]	; (8004cfc <HAL_RCC_GetSysClockFreq+0xd4>)
 8004ca4:	60bb      	str	r3, [r7, #8]
        break;
 8004ca6:	e00a      	b.n	8004cbe <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8004ca8:	f7ff f963 	bl	8003f72 <LL_RCC_MSI_GetRange>
 8004cac:	4603      	mov	r3, r0
 8004cae:	091b      	lsrs	r3, r3, #4
 8004cb0:	f003 030f 	and.w	r3, r3, #15
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cba:	60bb      	str	r3, [r7, #8]
        break;
 8004cbc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
 8004cbe:	f7ff fa55 	bl	800416c <LL_RCC_PLL_GetN>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	fb03 f402 	mul.w	r4, r3, r2
 8004cca:	f7ff fa68 	bl	800419e <LL_RCC_PLL_GetDivider>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	3301      	adds	r3, #1
 8004cd4:	fbb4 f4f3 	udiv	r4, r4, r3
 8004cd8:	f7ff fa55 	bl	8004186 <LL_RCC_PLL_GetR>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	0f5b      	lsrs	r3, r3, #29
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	fbb4 f3f3 	udiv	r3, r4, r3
 8004ce6:	60fb      	str	r3, [r7, #12]
  }

  return sysclockfreq;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd90      	pop	{r4, r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	08009970 	.word	0x08009970
 8004cf8:	00f42400 	.word	0x00f42400
 8004cfc:	01e84800 	.word	0x01e84800

08004d00 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d00:	b598      	push	{r3, r4, r7, lr}
 8004d02:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8004d04:	f7ff ff90 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004d08:	4604      	mov	r4, r0
 8004d0a:	f7ff f9e5 	bl	80040d8 <LL_RCC_GetAHBPrescaler>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	091b      	lsrs	r3, r3, #4
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	4a03      	ldr	r2, [pc, #12]	; (8004d24 <HAL_RCC_GetHCLKFreq+0x24>)
 8004d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d1c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	bd98      	pop	{r3, r4, r7, pc}
 8004d24:	08009930 	.word	0x08009930

08004d28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8004d28:	b590      	push	{r4, r7, lr}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2bb0      	cmp	r3, #176	; 0xb0
 8004d34:	d903      	bls.n	8004d3e <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 8004d36:	4b15      	ldr	r3, [pc, #84]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e007      	b.n	8004d4e <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 030f 	and.w	r3, r3, #15
 8004d46:	4a11      	ldr	r2, [pc, #68]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8004d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8004d4e:	f7ff f9cf 	bl	80040f0 <LL_RCC_GetAHB4Prescaler>
 8004d52:	4603      	mov	r3, r0
 8004d54:	091b      	lsrs	r3, r3, #4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8004d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d60:	68fa      	ldr	r2, [r7, #12]
 8004d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d66:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	4a0a      	ldr	r2, [pc, #40]	; (8004d94 <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8004d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d70:	0c9c      	lsrs	r4, r3, #18
 8004d72:	f7fe feff 	bl	8003b74 <HAL_PWREx_GetVoltageRange>
 8004d76:	4603      	mov	r3, r0
 8004d78:	4619      	mov	r1, r3
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f80c 	bl	8004d98 <RCC_SetFlashLatency>
 8004d80:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd90      	pop	{r4, r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	08009970 	.word	0x08009970
 8004d90:	08009930 	.word	0x08009930
 8004d94:	431bde83 	.word	0x431bde83

08004d98 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8004d98:	b590      	push	{r4, r7, lr}
 8004d9a:	b093      	sub	sp, #76	; 0x4c
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 8004da2:	4b39      	ldr	r3, [pc, #228]	; (8004e88 <RCC_SetFlashLatency+0xf0>)
 8004da4:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8004da8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004daa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8004dae:	4a37      	ldr	r2, [pc, #220]	; (8004e8c <RCC_SetFlashLatency+0xf4>)
 8004db0:	f107 031c 	add.w	r3, r7, #28
 8004db4:	ca07      	ldmia	r2, {r0, r1, r2}
 8004db6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8004dba:	4b35      	ldr	r3, [pc, #212]	; (8004e90 <RCC_SetFlashLatency+0xf8>)
 8004dbc:	f107 040c 	add.w	r4, r7, #12
 8004dc0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004dc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd0:	d11c      	bne.n	8004e0c <RCC_SetFlashLatency+0x74>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dd6:	e015      	b.n	8004e04 <RCC_SetFlashLatency+0x6c>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004de0:	4413      	add	r3, r2
 8004de2:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d808      	bhi.n	8004dfe <RCC_SetFlashLatency+0x66>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004dec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004df4:	4413      	add	r3, r2
 8004df6:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004dfa:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004dfc:	e022      	b.n	8004e44 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8004dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e00:	3301      	adds	r3, #1
 8004e02:	643b      	str	r3, [r7, #64]	; 0x40
 8004e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e06:	2b03      	cmp	r3, #3
 8004e08:	d9e6      	bls.n	8004dd8 <RCC_SetFlashLatency+0x40>
 8004e0a:	e01b      	b.n	8004e44 <RCC_SetFlashLatency+0xac>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e10:	e015      	b.n	8004e3e <RCC_SetFlashLatency+0xa6>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8004e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d808      	bhi.n	8004e38 <RCC_SetFlashLatency+0xa0>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004e2e:	4413      	add	r3, r2
 8004e30:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8004e34:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 8004e36:	e005      	b.n	8004e44 <RCC_SetFlashLatency+0xac>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8004e38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d9e6      	bls.n	8004e12 <RCC_SetFlashLatency+0x7a>
      break;
    }
  }
#endif

  __HAL_FLASH_SET_LATENCY(latency);
 8004e44:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <RCC_SetFlashLatency+0xfc>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 0207 	bic.w	r2, r3, #7
 8004e4c:	4911      	ldr	r1, [pc, #68]	; (8004e94 <RCC_SetFlashLatency+0xfc>)
 8004e4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8004e54:	f7fc fb6e 	bl	8001534 <HAL_GetTick>
 8004e58:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e5a:	e008      	b.n	8004e6e <RCC_SetFlashLatency+0xd6>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8004e5c:	f7fc fb6a 	bl	8001534 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d901      	bls.n	8004e6e <RCC_SetFlashLatency+0xd6>
    {
      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e007      	b.n	8004e7e <RCC_SetFlashLatency+0xe6>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <RCC_SetFlashLatency+0xfc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d1ef      	bne.n	8004e5c <RCC_SetFlashLatency+0xc4>
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	374c      	adds	r7, #76	; 0x4c
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd90      	pop	{r4, r7, pc}
 8004e86:	bf00      	nop
 8004e88:	080097b4 	.word	0x080097b4
 8004e8c:	080097c4 	.word	0x080097c4
 8004e90:	080097d0 	.word	0x080097d0
 8004e94:	58004000 	.word	0x58004000

08004e98 <LL_RCC_LSE_IsEnabled>:
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 8004e9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d101      	bne.n	8004eb0 <LL_RCC_LSE_IsEnabled+0x18>
 8004eac:	2301      	movs	r3, #1
 8004eae:	e000      	b.n	8004eb2 <LL_RCC_LSE_IsEnabled+0x1a>
 8004eb0:	2300      	movs	r3, #0
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <LL_RCC_LSE_IsReady>:
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8004ec0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ec8:	f003 0302 	and.w	r3, r3, #2
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d101      	bne.n	8004ed4 <LL_RCC_LSE_IsReady+0x18>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e000      	b.n	8004ed6 <LL_RCC_LSE_IsReady+0x1a>
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <LL_RCC_SetRFWKPClockSource>:
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 8004ee8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ef4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	4313      	orrs	r3, r2
 8004efc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <LL_RCC_SetSMPSClockSource>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 8004f14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1a:	f023 0203 	bic.w	r2, r3, #3
 8004f1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <LL_RCC_SetSMPSPrescaler>:
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 8004f3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f42:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8004f50:	bf00      	nop
 8004f52:	370c      	adds	r7, #12
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_RCC_SetUSARTClockSource>:
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8004f64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f6c:	f023 0203 	bic.w	r2, r3, #3
 8004f70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004f7c:	bf00      	nop
 8004f7e:	370c      	adds	r7, #12
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <LL_RCC_SetLPUARTClockSource>:
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8004f90:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004f9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <LL_RCC_SetI2CClockSource>:
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8004fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004fc0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	401a      	ands	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8004fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8004fe2:	bf00      	nop
 8004fe4:	370c      	adds	r7, #12
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fec:	4770      	bx	lr

08004fee <LL_RCC_SetLPTIMClockSource>:
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8004ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004ffa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	43db      	mvns	r3, r3
 8005006:	401a      	ands	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005016:	bf00      	nop
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <LL_RCC_SetSAIClockSource>:
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800502a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4313      	orrs	r3, r2
 800503e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <LL_RCC_SetRNGClockSource>:
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005056:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <LL_RCC_SetCLK48ClockSource>:
{
 800507a:	b480      	push	{r7}
 800507c:	b083      	sub	sp, #12
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8005082:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800508e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4313      	orrs	r3, r2
 8005096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <LL_RCC_SetUSBClockSource>:
{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b082      	sub	sp, #8
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f7ff ffe3 	bl	800507a <LL_RCC_SetCLK48ClockSource>
}
 80050b4:	bf00      	nop
 80050b6:	3708      	adds	r7, #8
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <LL_RCC_SetADCClockSource>:
{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80050c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050d0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80050dc:	bf00      	nop
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <LL_RCC_SetRTCClockSource>:
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80050f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050fc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <LL_RCC_GetRTCClockSource>:
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005120:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8005124:	4618      	mov	r0, r3
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <LL_RCC_ForceBackupDomainReset>:
{
 800512e:	b480      	push	{r7}
 8005130:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005132:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800513a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800513e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005146:	bf00      	nop
 8005148:	46bd      	mov	sp, r7
 800514a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514e:	4770      	bx	lr

08005150 <LL_RCC_ReleaseBackupDomainReset>:
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800515c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <LL_RCC_PLLSAI1_Enable>:
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005180:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005184:	6013      	str	r3, [r2, #0]
}
 8005186:	bf00      	nop
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <LL_RCC_PLLSAI1_Disable>:
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8005194:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800519e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051a2:	6013      	str	r3, [r2, #0]
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr

080051ae <LL_RCC_PLLSAI1_IsReady>:
{
 80051ae:	b480      	push	{r7}
 80051b0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 80051b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051c0:	d101      	bne.n	80051c6 <LL_RCC_PLLSAI1_IsReady+0x18>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <LL_RCC_PLLSAI1_IsReady+0x1a>
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_RCCEx_PeriphCLKConfig>:
 *         the RTC clock source: in this case the access to Backup domain is enabled.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b088      	sub	sp, #32
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef ret = HAL_OK; /* Intermediate status */
 80051da:	2300      	movs	r3, #0
 80051dc:	77fb      	strb	r3, [r7, #31]
	HAL_StatusTypeDef status = HAL_OK; /* Final status */
 80051de:	2300      	movs	r3, #0
 80051e0:	77bb      	strb	r3, [r7, #30]
	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
	/*-------------------------- SAI1 clock source configuration ---------------------*/
	if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d034      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x86>
			== RCC_PERIPHCLK_SAI1)) {
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

		switch (PeriphClkInit->Sai1ClockSelection) {
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051f6:	d021      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 80051f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051fc:	d81b      	bhi.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005202:	d01d      	beq.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8005204:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005208:	d815      	bhi.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800520e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005212:	d110      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x64>
		case RCC_SAI1CLKSOURCE_PLL: /* PLL is used as clock source for SAI1 */
			/* Enable SAI1 Clock output generated form System PLL . */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8005214:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800521e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005222:	60d3      	str	r3, [r2, #12]

			/* SAI1 clock source config set later after clock selection check */
			break;
 8005224:	e00d      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x70>

#if defined(SAI1)
		case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
			/* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	3304      	adds	r3, #4
 800522a:	4618      	mov	r0, r3
 800522c:	f000 f947 	bl	80054be <RCCEx_PLLSAI1_ConfigNP>
 8005230:	4603      	mov	r3, r0
 8005232:	77fb      	strb	r3, [r7, #31]
			/* SAI1 clock source config set later after clock selection check */
			break;
 8005234:	e005      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x70>
		case RCC_SAI1CLKSOURCE_HSI:

			break;

		default:
			ret = HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
			break;
 800523a:	e002      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x70>
			break;
 800523c:	bf00      	nop
 800523e:	e000      	b.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x70>
			break;
 8005240:	bf00      	nop
		}

		if (ret == HAL_OK) {
 8005242:	7ffb      	ldrb	r3, [r7, #31]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d105      	bne.n	8005254 <HAL_RCCEx_PeriphCLKConfig+0x82>
			/* Set the source of SAI1 clock*/
			__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fee8 	bl	8005022 <LL_RCC_SetSAIClockSource>
 8005252:	e001      	b.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x86>
		} else {
			/* set overall return value */
			status = ret;
 8005254:	7ffb      	ldrb	r3, [r7, #31]
 8005256:	77bb      	strb	r3, [r7, #30]
		}
	}
#endif

	/*-------------------------- RTC clock source configuration ----------------------*/
	if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005260:	2b00      	cmp	r3, #0
 8005262:	d046      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x120>
			== RCC_PERIPHCLK_RTC) {
		uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8005264:	f7ff ff56 	bl	8005114 <LL_RCC_GetRTCClockSource>
 8005268:	61b8      	str	r0, [r7, #24]

		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Configure the clock source only if a different source is expected */
		if (rtcclocksource != PeriphClkInit->RTCClockSelection) {
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	69ba      	ldr	r2, [r7, #24]
 8005270:	429a      	cmp	r2, r3
 8005272:	d03c      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x11c>
			/* Enable write access to Backup domain */
			HAL_PWR_EnableBkUpAccess();
 8005274:	f7fe fc6e 	bl	8003b54 <HAL_PWR_EnableBkUpAccess>

			/* If a clock source is not yet selected */
			if (rtcclocksource == RCC_RTCCLKSOURCE_NONE) {
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d105      	bne.n	800528a <HAL_RCCEx_PeriphCLKConfig+0xb8>
				/* Directly set the configuration of the clock source selection */
				LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005282:	4618      	mov	r0, r3
 8005284:	f7ff ff30 	bl	80050e8 <LL_RCC_SetRTCClockSource>
 8005288:	e02e      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
			} else /* A clock source is already selected */
			{
				/* Store the content of BDCR register before the reset of Backup Domain */
				uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800528a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800528e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005292:	617b      	str	r3, [r7, #20]

				/* RTC Clock selection can be changed only if the Backup Domain is reset */
				LL_RCC_ForceBackupDomainReset();
 8005294:	f7ff ff4b 	bl	800512e <LL_RCC_ForceBackupDomainReset>
				LL_RCC_ReleaseBackupDomainReset();
 8005298:	f7ff ff5a 	bl	8005150 <LL_RCC_ReleaseBackupDomainReset>

				/* Set the value of the clock source selection */
				MODIFY_REG(bdcr, RCC_BDCR_RTCSEL,
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a6:	4313      	orrs	r3, r2
 80052a8:	617b      	str	r3, [r7, #20]
						PeriphClkInit->RTCClockSelection);

				/* Restore the content of BDCR register */
				LL_RCC_WriteReg(BDCR, bdcr);
 80052aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

				/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
				if (LL_RCC_LSE_IsEnabled() == 1U) {
 80052b4:	f7ff fdf0 	bl	8004e98 <LL_RCC_LSE_IsEnabled>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d114      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
					/* Get Start Tick*/
					tickstart = HAL_GetTick();
 80052be:	f7fc f939 	bl	8001534 <HAL_GetTick>
 80052c2:	6138      	str	r0, [r7, #16]

					/* Wait till LSE is ready */
					while (LL_RCC_LSE_IsReady() != 1U) {
 80052c4:	e00b      	b.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x10c>
						if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80052c6:	f7fc f935 	bl	8001534 <HAL_GetTick>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d902      	bls.n	80052de <HAL_RCCEx_PeriphCLKConfig+0x10c>
							ret = HAL_TIMEOUT;
 80052d8:	2303      	movs	r3, #3
 80052da:	77fb      	strb	r3, [r7, #31]
							break;
 80052dc:	e004      	b.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x116>
					while (LL_RCC_LSE_IsReady() != 1U) {
 80052de:	f7ff fded 	bl	8004ebc <LL_RCC_LSE_IsReady>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d1ee      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0xf4>
					}
				}
			}

			/* set overall return value */
			status = ret;
 80052e8:	7ffb      	ldrb	r3, [r7, #31]
 80052ea:	77bb      	strb	r3, [r7, #30]
 80052ec:	e001      	b.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x120>
		} else {
			/* set overall return value */
			status = ret;
 80052ee:	7ffb      	ldrb	r3, [r7, #31]
 80052f0:	77bb      	strb	r3, [r7, #30]
		}

	}

	/*-------------------------- USART1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d004      	beq.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x136>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	699b      	ldr	r3, [r3, #24]
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff fe2a 	bl	8004f5c <LL_RCC_SetUSARTClockSource>
	}

#if defined(LPUART1)
	/*-------------------------- LPUART1 clock source configuration ------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0302 	and.w	r3, r3, #2
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x14c>
		/* Check the parameters */
		assert_param(
				IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

		/* Configure the LPUAR1 clock source */
		__HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	4618      	mov	r0, r3
 800531a:	f7ff fe35 	bl	8004f88 <LL_RCC_SetLPUARTClockSource>
	}
#endif

	/*-------------------------- LPTIM1 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x162>
			== (RCC_PERIPHCLK_LPTIM1)) {
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	4618      	mov	r0, r3
 8005330:	f7ff fe5d 	bl	8004fee <LL_RCC_SetLPTIMClockSource>
	}

	/*-------------------------- LPTIM2 clock source configuration -------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d004      	beq.n	800534a <HAL_RCCEx_PeriphCLKConfig+0x178>
			== (RCC_PERIPHCLK_LPTIM2)) {
		assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
		__HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	4618      	mov	r0, r3
 8005346:	f7ff fe52 	bl	8004fee <LL_RCC_SetLPTIMClockSource>
	}

	/*-------------------------- I2C1 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x18e>
			== RCC_PERIPHCLK_I2C1) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	4618      	mov	r0, r3
 800535c:	f7ff fe2a 	bl	8004fb4 <LL_RCC_SetI2CClockSource>
	}

#if defined(I2C3)
	/*-------------------------- I2C3 clock source configuration ---------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0308 	and.w	r3, r3, #8
 8005368:	2b00      	cmp	r3, #0
 800536a:	d004      	beq.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
			== RCC_PERIPHCLK_I2C3) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	4618      	mov	r0, r3
 8005372:	f7ff fe1f 	bl	8004fb4 <LL_RCC_SetI2CClockSource>
	}
#endif

#if defined(USB)
	/*-------------------------- USB clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d022      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
			== (RCC_PERIPHCLK_USB)) {
		assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
		__HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005386:	4618      	mov	r0, r3
 8005388:	f7ff fe8d 	bl	80050a6 <LL_RCC_SetUSBClockSource>

		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL) {
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005394:	d107      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
			/* Enable PLLQ output */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8005396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80053a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053a4:	60d3      	str	r3, [r2, #12]
		}
#if defined(SAI1)
		if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053ae:	d10b      	bne.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
			/* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	3304      	adds	r3, #4
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 f8dd 	bl	8005574 <RCCEx_PLLSAI1_ConfigNQ>
 80053ba:	4603      	mov	r3, r0
 80053bc:	77fb      	strb	r3, [r7, #31]

			if (ret != HAL_OK) {
 80053be:	7ffb      	ldrb	r3, [r7, #31]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d001      	beq.n	80053c8 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
				/* set overall return value */
				status = ret;
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	77bb      	strb	r3, [r7, #30]
#endif
	}
#endif

	/*-------------------------- RNG clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d02b      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x25a>
			== (RCC_PERIPHCLK_RNG)) {
		/* Check the parameters */
		assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

		/* Configure the RNG clock source */
		__HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053dc:	d008      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e6:	d003      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff fe2a 	bl	800504e <LL_RCC_SetRNGClockSource>
 80053fa:	e00a      	b.n	8005412 <HAL_RCCEx_PeriphCLKConfig+0x240>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005400:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005404:	60fb      	str	r3, [r7, #12]
 8005406:	2000      	movs	r0, #0
 8005408:	f7ff fe21 	bl	800504e <LL_RCC_SetRNGClockSource>
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f7ff fe34 	bl	800507a <LL_RCC_SetCLK48ClockSource>

		if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL) {
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800541a:	d107      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x25a>
			/* Enable PLLQ output */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800542a:	60d3      	str	r3, [r2, #12]
		}
	}

	/*-------------------------- ADC clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005434:	2b00      	cmp	r3, #0
 8005436:	d022      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
			== RCC_PERIPHCLK_ADC) {
		/* Check the parameters */
		assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

		/* Configure the ADC interface clock source */
		__HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fe3d 	bl	80050bc <LL_RCC_SetADCClockSource>

		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL) {
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544a:	d107      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x28a>
			/* Enable RCC_PLL_RNGCLK output */
			__HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800544c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800545a:	60d3      	str	r3, [r2, #12]
		}

#if defined(SAI1)
		if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1) {
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005460:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005464:	d10b      	bne.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
			/* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
			ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	3304      	adds	r3, #4
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f8dd 	bl	800562a <RCCEx_PLLSAI1_ConfigNR>
 8005470:	4603      	mov	r3, r0
 8005472:	77fb      	strb	r3, [r7, #31]

			if (ret != HAL_OK) {
 8005474:	7ffb      	ldrb	r3, [r7, #31]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
				/* set overall return value */
				status = ret;
 800547a:	7ffb      	ldrb	r3, [r7, #31]
 800547c:	77bb      	strb	r3, [r7, #30]
		}
#endif
	}

	/*-------------------------- RFWKP clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d004      	beq.n	8005494 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
		/* Check the parameters */
		assert_param(
				IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

		/* Configure the RFWKP interface clock source */
		__HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	4618      	mov	r0, r3
 8005490:	f7ff fd26 	bl	8004ee0 <LL_RCC_SetRFWKPClockSource>

	}

#if defined(RCC_SMPS_SUPPORT)
	/*-------------------------- SMPS clock source configuration ----------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d009      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
		/* Check the parameters */
		assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
		assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

		/* Configure the SMPS interface clock division factor */
		__HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff fd45 	bl	8004f34 <LL_RCC_SetSMPSPrescaler>

		/* Configure the SMPS interface clock source */
		__HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054ae:	4618      	mov	r0, r3
 80054b0:	f7ff fd2c 	bl	8004f0c <LL_RCC_SetSMPSClockSource>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2SCLK);
    }
  }
#endif

	return status;
 80054b4:	7fbb      	ldrb	r3, [r7, #30]
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	3720      	adds	r7, #32
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bd80      	pop	{r7, pc}

080054be <RCCEx_PLLSAI1_ConfigNP>:
 *
 * @note   PLLSAI1 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1) {
 80054be:	b580      	push	{r7, lr}
 80054c0:	b084      	sub	sp, #16
 80054c2:	af00      	add	r7, sp, #0
 80054c4:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
	assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

	/* Disable the PLLSAI1 */
	__HAL_RCC_PLLSAI1_DISABLE();
 80054ca:	f7ff fe61 	bl	8005190 <LL_RCC_PLLSAI1_Disable>

	/* Get Start Tick*/
	tickstart = HAL_GetTick();
 80054ce:	f7fc f831 	bl	8001534 <HAL_GetTick>
 80054d2:	60b8      	str	r0, [r7, #8]

	/* Wait till PLLSAI1 is ready to be updated */
	while (LL_RCC_PLLSAI1_IsReady() != 0U) {
 80054d4:	e009      	b.n	80054ea <RCCEx_PLLSAI1_ConfigNP+0x2c>
		if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80054d6:	f7fc f82d 	bl	8001534 <HAL_GetTick>
 80054da:	4602      	mov	r2, r0
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d902      	bls.n	80054ea <RCCEx_PLLSAI1_ConfigNP+0x2c>
			status = HAL_TIMEOUT;
 80054e4:	2303      	movs	r3, #3
 80054e6:	73fb      	strb	r3, [r7, #15]
			break;
 80054e8:	e004      	b.n	80054f4 <RCCEx_PLLSAI1_ConfigNP+0x36>
	while (LL_RCC_PLLSAI1_IsReady() != 0U) {
 80054ea:	f7ff fe60 	bl	80051ae <LL_RCC_PLLSAI1_IsReady>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1f0      	bne.n	80054d6 <RCCEx_PLLSAI1_ConfigNP+0x18>
		}
	}

	if (status == HAL_OK) {
 80054f4:	7bfb      	ldrb	r3, [r7, #15]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d137      	bne.n	800556a <RCCEx_PLLSAI1_ConfigNP+0xac>
		/* Configure the PLLSAI1 Multiplication factor N */
		__HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800550e:	4313      	orrs	r3, r2
 8005510:	610b      	str	r3, [r1, #16]

		/* Configure the PLLSAI1 Division factor P */
		__HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8005512:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005524:	4313      	orrs	r3, r2
 8005526:	610b      	str	r3, [r1, #16]

		/* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
		__HAL_RCC_PLLSAI1_ENABLE();
 8005528:	f7ff fe23 	bl	8005172 <LL_RCC_PLLSAI1_Enable>

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 800552c:	f7fc f802 	bl	8001534 <HAL_GetTick>
 8005530:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI1 is ready */
		while (LL_RCC_PLLSAI1_IsReady() != 1U) {
 8005532:	e009      	b.n	8005548 <RCCEx_PLLSAI1_ConfigNP+0x8a>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 8005534:	f7fb fffe 	bl	8001534 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	2b02      	cmp	r3, #2
 8005540:	d902      	bls.n	8005548 <RCCEx_PLLSAI1_ConfigNP+0x8a>
				status = HAL_TIMEOUT;
 8005542:	2303      	movs	r3, #3
 8005544:	73fb      	strb	r3, [r7, #15]
				break;
 8005546:	e004      	b.n	8005552 <RCCEx_PLLSAI1_ConfigNP+0x94>
		while (LL_RCC_PLLSAI1_IsReady() != 1U) {
 8005548:	f7ff fe31 	bl	80051ae <LL_RCC_PLLSAI1_IsReady>
 800554c:	4603      	mov	r3, r0
 800554e:	2b01      	cmp	r3, #1
 8005550:	d1f0      	bne.n	8005534 <RCCEx_PLLSAI1_ConfigNP+0x76>
			}
		}

		if (status == HAL_OK) {
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d108      	bne.n	800556a <RCCEx_PLLSAI1_ConfigNP+0xac>
			/* Configure the PLLSAI1 Clock output(s) */
			__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8005558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800555c:	691a      	ldr	r2, [r3, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005566:	4313      	orrs	r3, r2
 8005568:	610b      	str	r3, [r1, #16]
		}
	}

	return status;
 800556a:	7bfb      	ldrb	r3, [r7, #15]
}
 800556c:	4618      	mov	r0, r3
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <RCCEx_PLLSAI1_ConfigNQ>:
 *
 * @note   PLLSAI1 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1) {
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 800557c:	2300      	movs	r3, #0
 800557e:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
	assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

	/* Disable the PLLSAI1 */
	__HAL_RCC_PLLSAI1_DISABLE();
 8005580:	f7ff fe06 	bl	8005190 <LL_RCC_PLLSAI1_Disable>

	/* Get Start Tick*/
	tickstart = HAL_GetTick();
 8005584:	f7fb ffd6 	bl	8001534 <HAL_GetTick>
 8005588:	60b8      	str	r0, [r7, #8]

	/* Wait till PLLSAI1 is ready to be updated */
	while (LL_RCC_PLLSAI1_IsReady() != 0U) {
 800558a:	e009      	b.n	80055a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
		if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 800558c:	f7fb ffd2 	bl	8001534 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d902      	bls.n	80055a0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
			status = HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	73fb      	strb	r3, [r7, #15]
			break;
 800559e:	e004      	b.n	80055aa <RCCEx_PLLSAI1_ConfigNQ+0x36>
	while (LL_RCC_PLLSAI1_IsReady() != 0U) {
 80055a0:	f7ff fe05 	bl	80051ae <LL_RCC_PLLSAI1_IsReady>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1f0      	bne.n	800558c <RCCEx_PLLSAI1_ConfigNQ+0x18>
		}
	}

	if (status == HAL_OK) {
 80055aa:	7bfb      	ldrb	r3, [r7, #15]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d137      	bne.n	8005620 <RCCEx_PLLSAI1_ConfigNQ+0xac>
		/* Configure the PLLSAI1 Multiplication factor N */
		__HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 80055b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	021b      	lsls	r3, r3, #8
 80055c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055c4:	4313      	orrs	r3, r2
 80055c6:	610b      	str	r3, [r1, #16]
		/* Configure the PLLSAI1 Division factor Q */
		__HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 80055c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80055da:	4313      	orrs	r3, r2
 80055dc:	610b      	str	r3, [r1, #16]

		/* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
		__HAL_RCC_PLLSAI1_ENABLE();
 80055de:	f7ff fdc8 	bl	8005172 <LL_RCC_PLLSAI1_Enable>

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80055e2:	f7fb ffa7 	bl	8001534 <HAL_GetTick>
 80055e6:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI1 is ready */
		while (LL_RCC_PLLSAI1_IsReady() != 1U) {
 80055e8:	e009      	b.n	80055fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80055ea:	f7fb ffa3 	bl	8001534 <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d902      	bls.n	80055fe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
				status = HAL_TIMEOUT;
 80055f8:	2303      	movs	r3, #3
 80055fa:	73fb      	strb	r3, [r7, #15]
				break;
 80055fc:	e004      	b.n	8005608 <RCCEx_PLLSAI1_ConfigNQ+0x94>
		while (LL_RCC_PLLSAI1_IsReady() != 1U) {
 80055fe:	f7ff fdd6 	bl	80051ae <LL_RCC_PLLSAI1_IsReady>
 8005602:	4603      	mov	r3, r0
 8005604:	2b01      	cmp	r3, #1
 8005606:	d1f0      	bne.n	80055ea <RCCEx_PLLSAI1_ConfigNQ+0x76>
			}
		}

		if (status == HAL_OK) {
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d108      	bne.n	8005620 <RCCEx_PLLSAI1_ConfigNQ+0xac>
			/* Configure the PLLSAI1 Clock output(s) */
			__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800560e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005612:	691a      	ldr	r2, [r3, #16]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800561c:	4313      	orrs	r3, r2
 800561e:	610b      	str	r3, [r1, #16]
		}
	}

	return status;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}

0800562a <RCCEx_PLLSAI1_ConfigNR>:
 *
 * @note   PLLSAI1 is temporary disable to apply new parameters
 *
 * @retval HAL status
 */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1) {
 800562a:	b580      	push	{r7, lr}
 800562c:	b084      	sub	sp, #16
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	HAL_StatusTypeDef status = HAL_OK;
 8005632:	2300      	movs	r3, #0
 8005634:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
	assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
	assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

	/* Disable the PLLSAI1 */
	__HAL_RCC_PLLSAI1_DISABLE();
 8005636:	f7ff fdab 	bl	8005190 <LL_RCC_PLLSAI1_Disable>

	/* Get Start Tick*/
	tickstart = HAL_GetTick();
 800563a:	f7fb ff7b 	bl	8001534 <HAL_GetTick>
 800563e:	60b8      	str	r0, [r7, #8]

	/* Wait till PLLSAI1 is ready to be updated */
	while (LL_RCC_PLLSAI1_IsReady() != 0U) {
 8005640:	e009      	b.n	8005656 <RCCEx_PLLSAI1_ConfigNR+0x2c>
		if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 8005642:	f7fb ff77 	bl	8001534 <HAL_GetTick>
 8005646:	4602      	mov	r2, r0
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	2b02      	cmp	r3, #2
 800564e:	d902      	bls.n	8005656 <RCCEx_PLLSAI1_ConfigNR+0x2c>
			status = HAL_TIMEOUT;
 8005650:	2303      	movs	r3, #3
 8005652:	73fb      	strb	r3, [r7, #15]
			break;
 8005654:	e004      	b.n	8005660 <RCCEx_PLLSAI1_ConfigNR+0x36>
	while (LL_RCC_PLLSAI1_IsReady() != 0U) {
 8005656:	f7ff fdaa 	bl	80051ae <LL_RCC_PLLSAI1_IsReady>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d1f0      	bne.n	8005642 <RCCEx_PLLSAI1_ConfigNR+0x18>
		}
	}

	if (status == HAL_OK) {
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d137      	bne.n	80056d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
		/* Configure the PLLSAI1 Multiplication factor N */
		__HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8005666:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800567a:	4313      	orrs	r3, r2
 800567c:	610b      	str	r3, [r1, #16]
		/* Configure the PLLSAI1 Division factor R */
		__HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800567e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005682:	691b      	ldr	r3, [r3, #16]
 8005684:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005690:	4313      	orrs	r3, r2
 8005692:	610b      	str	r3, [r1, #16]

		/* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
		__HAL_RCC_PLLSAI1_ENABLE();
 8005694:	f7ff fd6d 	bl	8005172 <LL_RCC_PLLSAI1_Enable>

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8005698:	f7fb ff4c 	bl	8001534 <HAL_GetTick>
 800569c:	60b8      	str	r0, [r7, #8]

		/* Wait till PLLSAI1 is ready */
		while (LL_RCC_PLLSAI1_IsReady() != 1U) {
 800569e:	e009      	b.n	80056b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
			if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE) {
 80056a0:	f7fb ff48 	bl	8001534 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d902      	bls.n	80056b4 <RCCEx_PLLSAI1_ConfigNR+0x8a>
				status = HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	73fb      	strb	r3, [r7, #15]
				break;
 80056b2:	e004      	b.n	80056be <RCCEx_PLLSAI1_ConfigNR+0x94>
		while (LL_RCC_PLLSAI1_IsReady() != 1U) {
 80056b4:	f7ff fd7b 	bl	80051ae <LL_RCC_PLLSAI1_IsReady>
 80056b8:	4603      	mov	r3, r0
 80056ba:	2b01      	cmp	r3, #1
 80056bc:	d1f0      	bne.n	80056a0 <RCCEx_PLLSAI1_ConfigNR+0x76>
			}
		}

		if (status == HAL_OK) {
 80056be:	7bfb      	ldrb	r3, [r7, #15]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d108      	bne.n	80056d6 <RCCEx_PLLSAI1_ConfigNR+0xac>
			/* Configure the PLLSAI1 Clock output(s) */
			__HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 80056c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056c8:	691a      	ldr	r2, [r3, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	691b      	ldr	r3, [r3, #16]
 80056ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80056d2:	4313      	orrs	r3, r2
 80056d4:	610b      	str	r3, [r1, #16]
		}
	}

	return status;
 80056d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3710      	adds	r7, #16
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_RTC_Init>:
/**
 * @brief  Initialize the RTC peripheral
 * @param hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc) {
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	/* Check the RTC peripheral state */
	if (hrtc == NULL) {
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d101      	bne.n	80056f2 <HAL_RTC_Init+0x12>
		return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e090      	b.n	8005814 <HAL_RTC_Init+0x134>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
	if (hrtc->State == HAL_RTC_STATE_RESET) {
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d106      	bne.n	800570c <HAL_RTC_Init+0x2c>
		/* Allocate lock resource and initialize it */
		hrtc->Lock = HAL_UNLOCKED;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2200      	movs	r2, #0
 8005702:	f883 2020 	strb.w	r2, [r3, #32]

		/* Initialize RTC MSP */
		HAL_RTC_MspInit(hrtc);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fb fcec 	bl	80010e4 <HAL_RTC_MspInit>
	}
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

	/* Set RTC state */
	hrtc->State = HAL_RTC_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	22ca      	movs	r2, #202	; 0xca
 800571a:	625a      	str	r2, [r3, #36]	; 0x24
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2253      	movs	r2, #83	; 0x53
 8005722:	625a      	str	r2, [r3, #36]	; 0x24

	/* Set Initialization mode */
	if (RTC_EnterInitMode(hrtc) != HAL_OK) {
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 f89f 	bl	8005868 <RTC_EnterInitMode>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <HAL_RTC_Init+0x64>
		/* Enable the write protection for RTC registers */
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	22ff      	movs	r2, #255	; 0xff
 8005736:	625a      	str	r2, [r3, #36]	; 0x24

		/* Set RTC state */
		hrtc->State = HAL_RTC_STATE_ERROR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2204      	movs	r2, #4
 800573c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		return HAL_ERROR;
 8005740:	2301      	movs	r3, #1
 8005742:	e067      	b.n	8005814 <HAL_RTC_Init+0x134>
	} else {
		/* Clear RTC_CR FMT, OSEL and POL Bits */
		hrtc->Instance->CR &= ((uint32_t) ~(RTC_CR_FMT | RTC_CR_OSEL
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6812      	ldr	r2, [r2, #0]
 800574e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005752:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005756:	6093      	str	r3, [r2, #8]
				| RTC_CR_POL));
		/* Set RTC_CR register */
		hrtc->Instance->CR |= (uint32_t) (hrtc->Init.HourFormat
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	685a      	ldr	r2, [r3, #4]
				| hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	431a      	orrs	r2, r3
		hrtc->Instance->CR |= (uint32_t) (hrtc->Init.HourFormat
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	609a      	str	r2, [r3, #8]

		/* Configure the RTC PRER */
		hrtc->Instance->PRER = (uint32_t) (hrtc->Init.SynchPrediv);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68d2      	ldr	r2, [r2, #12]
 800577e:	611a      	str	r2, [r3, #16]
		hrtc->Instance->PRER |= (uint32_t) (hrtc->Init.AsynchPrediv << 16U);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	6919      	ldr	r1, [r3, #16]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	041a      	lsls	r2, r3, #16
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	430a      	orrs	r2, r1
 8005792:	611a      	str	r2, [r3, #16]

		/* Exit Initialization mode */
		hrtc->Instance->ISR &= ((uint32_t) ~RTC_ISR_INIT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68da      	ldr	r2, [r3, #12]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057a2:	60da      	str	r2, [r3, #12]

		hrtc->Instance->OR &=
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f022 0203 	bic.w	r2, r2, #3
 80057b2:	64da      	str	r2, [r3, #76]	; 0x4c
				(uint32_t) ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
		hrtc->Instance->OR |= (uint32_t) (hrtc->Init.OutPutType
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	69da      	ldr	r2, [r3, #28]
				| hrtc->Init.OutPutRemap);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
		hrtc->Instance->OR |= (uint32_t) (hrtc->Init.OutPutType
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	64da      	str	r2, [r3, #76]	; 0x4c

		/* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
		if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f003 0320 	and.w	r3, r3, #32
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d113      	bne.n	8005802 <HAL_RTC_Init+0x122>
			if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK) {
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f81e 	bl	800581c <HAL_RTC_WaitForSynchro>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <HAL_RTC_Init+0x122>
				/* Enable the write protection for RTC registers */
				__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	22ff      	movs	r2, #255	; 0xff
 80057ec:	625a      	str	r2, [r3, #36]	; 0x24

				hrtc->State = HAL_RTC_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2204      	movs	r2, #4
 80057f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

				/* Process Unlocked */
				__HAL_UNLOCK(hrtc);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2020 	strb.w	r2, [r3, #32]

				return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e008      	b.n	8005814 <HAL_RTC_Init+0x134>
			}
		}

		/* Enable the write protection for RTC registers */
		__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	22ff      	movs	r2, #255	; 0xff
 8005808:	625a      	str	r2, [r3, #36]	; 0x24

		/* Set RTC state */
		hrtc->State = HAL_RTC_STATE_READY;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		return HAL_OK;
 8005812:	2300      	movs	r3, #0
	}
}
 8005814:	4618      	mov	r0, r3
 8005816:	3708      	adds	r7, #8
 8005818:	46bd      	mov	sp, r7
 800581a:	bd80      	pop	{r7, pc}

0800581c <HAL_RTC_WaitForSynchro>:
 *         the calendar, which means that the calendar registers have been
 *         correctly copied into the RTC_TR and RTC_DR shadow registers.
 * @param hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc) {
 800581c:	b580      	push	{r7, lr}
 800581e:	b084      	sub	sp, #16
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Clear RSF flag */
	hrtc->Instance->ISR &= (uint32_t) RTC_RSF_MASK;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68da      	ldr	r2, [r3, #12]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005832:	60da      	str	r2, [r3, #12]

	tickstart = HAL_GetTick();
 8005834:	f7fb fe7e 	bl	8001534 <HAL_GetTick>
 8005838:	60f8      	str	r0, [r7, #12]

	/* Wait the registers to be synchronised */
	while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U) {
 800583a:	e009      	b.n	8005850 <HAL_RTC_WaitForSynchro+0x34>
		if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 800583c:	f7fb fe7a 	bl	8001534 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800584a:	d901      	bls.n	8005850 <HAL_RTC_WaitForSynchro+0x34>
			return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e007      	b.n	8005860 <HAL_RTC_WaitForSynchro+0x44>
	while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f003 0320 	and.w	r3, r3, #32
 800585a:	2b00      	cmp	r3, #0
 800585c:	d0ee      	beq.n	800583c <HAL_RTC_WaitForSynchro+0x20>
		}
	}

	return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3710      	adds	r7, #16
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}

08005868 <RTC_EnterInitMode>:
 * @note   The RTC Initialization mode is write protected, use the
 *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
 * @param hrtc RTC handle
 * @retval HAL status
 */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc) {
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Check if the Initialization mode is set */
	if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) {
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	d119      	bne.n	80058b2 <RTC_EnterInitMode+0x4a>
		/* Set the Initialization mode */
		hrtc->Instance->ISR = (uint32_t) RTC_INIT_MASK;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f04f 32ff 	mov.w	r2, #4294967295
 8005886:	60da      	str	r2, [r3, #12]

		tickstart = HAL_GetTick();
 8005888:	f7fb fe54 	bl	8001534 <HAL_GetTick>
 800588c:	60f8      	str	r0, [r7, #12]
		/* Wait till RTC is in INIT state and if Time out is reached exit */
		while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) {
 800588e:	e009      	b.n	80058a4 <RTC_EnterInitMode+0x3c>
			if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE) {
 8005890:	f7fb fe50 	bl	8001534 <HAL_GetTick>
 8005894:	4602      	mov	r2, r0
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800589e:	d901      	bls.n	80058a4 <RTC_EnterInitMode+0x3c>
				return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e007      	b.n	80058b4 <RTC_EnterInitMode+0x4c>
		while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) {
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d0ee      	beq.n	8005890 <RTC_EnterInitMode+0x28>
			}
		}
	}

	return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_TIM_Base_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
 * @param  htim TIM Base handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_Base_Init+0x12>
		return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e049      	b.n	8005962 <HAL_TIM_Base_Init+0xa6>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_TIM_Base_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC */
		HAL_TIM_Base_MspInit(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fb fc14 	bl	8001110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Set the Time Base configuration */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f000 fa6c 	bl	8005dd8 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8005960:	2300      	movs	r3, #0
}
 8005962:	4618      	mov	r0, r3
 8005964:	3708      	adds	r7, #8
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_TIM_PWM_Init>:
 *         due to DIR bit readonly in center aligned mode.
 *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
 * @param  htim TIM PWM handle
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim) {
 800596a:	b580      	push	{r7, lr}
 800596c:	b082      	sub	sp, #8
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]
	/* Check the TIM handle allocation */
	if (htim == NULL) {
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_TIM_PWM_Init+0x12>
		return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e049      	b.n	8005a10 <HAL_TIM_PWM_Init+0xa6>
	assert_param(IS_TIM_INSTANCE(htim->Instance));
	assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
	assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
	assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

	if (htim->State == HAL_TIM_STATE_RESET) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b00      	cmp	r3, #0
 8005986:	d106      	bne.n	8005996 <HAL_TIM_PWM_Init+0x2c>
		/* Allocate lock resource and initialize it */
		htim->Lock = HAL_UNLOCKED;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
		/* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
		HAL_TIM_PWM_MspInit(htim);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 f841 	bl	8005a18 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
	}

	/* Set the TIM state */
	htim->State = HAL_TIM_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Init the base time for the PWM */
	TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681a      	ldr	r2, [r3, #0]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3304      	adds	r3, #4
 80059a6:	4619      	mov	r1, r3
 80059a8:	4610      	mov	r0, r2
 80059aa:	f000 fa15 	bl	8005dd8 <TIM_Base_SetConfig>

	/* Initialize the DMA burst operation state */
	htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

	/* Initialize the TIM channels state */
	TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2201      	movs	r2, #1
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2201      	movs	r2, #1
 80059ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

	/* Initialize the TIM state*/
	htim->State = HAL_TIM_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3708      	adds	r7, #8
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <HAL_TIM_PWM_MspInit>:
/**
 * @brief  Initializes the TIM PWM MSP.
 * @param  htim TIM PWM handle
 * @retval None
 */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim) {
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
	UNUSED(htim);

	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_TIM_PWM_MspInit could be implemented in the user file
	 */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIM_PWM_ConfigChannel>:
 *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
 *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
		TIM_OC_InitTypeDef *sConfig, uint32_t Channel) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
	assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
	assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
	assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

	/* Process Locked */
	__HAL_LOCK(htim);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d101      	bne.n	8005a46 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005a42:	2302      	movs	r3, #2
 8005a44:	e0fd      	b.n	8005c42 <HAL_TIM_PWM_ConfigChannel+0x216>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2b14      	cmp	r3, #20
 8005a52:	f200 80f0 	bhi.w	8005c36 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8005a56:	a201      	add	r2, pc, #4	; (adr r2, 8005a5c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a5c:	08005ab1 	.word	0x08005ab1
 8005a60:	08005c37 	.word	0x08005c37
 8005a64:	08005c37 	.word	0x08005c37
 8005a68:	08005c37 	.word	0x08005c37
 8005a6c:	08005af1 	.word	0x08005af1
 8005a70:	08005c37 	.word	0x08005c37
 8005a74:	08005c37 	.word	0x08005c37
 8005a78:	08005c37 	.word	0x08005c37
 8005a7c:	08005b33 	.word	0x08005b33
 8005a80:	08005c37 	.word	0x08005c37
 8005a84:	08005c37 	.word	0x08005c37
 8005a88:	08005c37 	.word	0x08005c37
 8005a8c:	08005b73 	.word	0x08005b73
 8005a90:	08005c37 	.word	0x08005c37
 8005a94:	08005c37 	.word	0x08005c37
 8005a98:	08005c37 	.word	0x08005c37
 8005a9c:	08005bb5 	.word	0x08005bb5
 8005aa0:	08005c37 	.word	0x08005c37
 8005aa4:	08005c37 	.word	0x08005c37
 8005aa8:	08005c37 	.word	0x08005c37
 8005aac:	08005bf5 	.word	0x08005bf5
	case TIM_CHANNEL_1: {
		/* Check the parameters */
		assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

		/* Configure the Channel 1 in PWM mode */
		TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68b9      	ldr	r1, [r7, #8]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f000 f9f2 	bl	8005ea0 <TIM_OC1_SetConfig>

		/* Set the Preload enable bit for channel1 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0208 	orr.w	r2, r2, #8
 8005aca:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	699a      	ldr	r2, [r3, #24]
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f022 0204 	bic.w	r2, r2, #4
 8005ada:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	6999      	ldr	r1, [r3, #24]
 8005ae2:	68bb      	ldr	r3, [r7, #8]
 8005ae4:	691a      	ldr	r2, [r3, #16]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	430a      	orrs	r2, r1
 8005aec:	619a      	str	r2, [r3, #24]
		break;
 8005aee:	e0a3      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
	case TIM_CHANNEL_2: {
		/* Check the parameters */
		assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

		/* Configure the Channel 2 in PWM mode */
		TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68b9      	ldr	r1, [r7, #8]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fa4e 	bl	8005f98 <TIM_OC2_SetConfig>

		/* Set the Preload enable bit for channel2 */
		htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	699a      	ldr	r2, [r3, #24]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b0a:	619a      	str	r2, [r3, #24]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1a:	619a      	str	r2, [r3, #24]
		htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6999      	ldr	r1, [r3, #24]
 8005b22:	68bb      	ldr	r3, [r7, #8]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	021a      	lsls	r2, r3, #8
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	430a      	orrs	r2, r1
 8005b2e:	619a      	str	r2, [r3, #24]
		break;
 8005b30:	e082      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
	case TIM_CHANNEL_3: {
		/* Check the parameters */
		assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

		/* Configure the Channel 3 in PWM mode */
		TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 faa7 	bl	800608c <TIM_OC3_SetConfig>

		/* Set the Preload enable bit for channel3 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69da      	ldr	r2, [r3, #28]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f042 0208 	orr.w	r2, r2, #8
 8005b4c:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f022 0204 	bic.w	r2, r2, #4
 8005b5c:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69d9      	ldr	r1, [r3, #28]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	691a      	ldr	r2, [r3, #16]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	430a      	orrs	r2, r1
 8005b6e:	61da      	str	r2, [r3, #28]
		break;
 8005b70:	e062      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
	case TIM_CHANNEL_4: {
		/* Check the parameters */
		assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

		/* Configure the Channel 4 in PWM mode */
		TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 faff 	bl	800617c <TIM_OC4_SetConfig>

		/* Set the Preload enable bit for channel4 */
		htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	69da      	ldr	r2, [r3, #28]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b8c:	61da      	str	r2, [r3, #28]

		/* Configure the Output Fast mode */
		htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	69da      	ldr	r2, [r3, #28]
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b9c:	61da      	str	r2, [r3, #28]
		htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	69d9      	ldr	r1, [r3, #28]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	691b      	ldr	r3, [r3, #16]
 8005ba8:	021a      	lsls	r2, r3, #8
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	430a      	orrs	r2, r1
 8005bb0:	61da      	str	r2, [r3, #28]
		break;
 8005bb2:	e041      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
	case TIM_CHANNEL_5: {
		/* Check the parameters */
		assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

		/* Configure the Channel 5 in PWM mode */
		TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fb3c 	bl	8006238 <TIM_OC5_SetConfig>

		/* Set the Preload enable bit for channel5*/
		htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0208 	orr.w	r2, r2, #8
 8005bce:	655a      	str	r2, [r3, #84]	; 0x54

		/* Configure the Output Fast mode */
		htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0204 	bic.w	r2, r2, #4
 8005bde:	655a      	str	r2, [r3, #84]	; 0x54
		htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	691a      	ldr	r2, [r3, #16]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
		break;
 8005bf2:	e021      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
	case TIM_CHANNEL_6: {
		/* Check the parameters */
		assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

		/* Configure the Channel 6 in PWM mode */
		TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68b9      	ldr	r1, [r7, #8]
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 fb74 	bl	80062e8 <TIM_OC6_SetConfig>

		/* Set the Preload enable bit for channel6 */
		htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c0e:	655a      	str	r2, [r3, #84]	; 0x54

		/* Configure the Output Fast mode */
		htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54
		htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	021a      	lsls	r2, r3, #8
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	655a      	str	r2, [r3, #84]	; 0x54
		break;
 8005c34:	e000      	b.n	8005c38 <HAL_TIM_PWM_ConfigChannel+0x20c>
	}

	default:
		break;
 8005c36:	bf00      	nop
	}

	__HAL_UNLOCK(htim);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3710      	adds	r7, #16
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop

08005c4c <HAL_TIM_ConfigClockSource>:
 * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
 *         contains the clock source information for the TIM peripheral.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim,
		TIM_ClockConfigTypeDef *sClockSourceConfig) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Process Locked */
	__HAL_LOCK(htim);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_TIM_ConfigClockSource+0x18>
 8005c60:	2302      	movs	r3, #2
 8005c62:	e0b5      	b.n	8005dd0 <HAL_TIM_ConfigClockSource+0x184>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	htim->State = HAL_TIM_STATE_BUSY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2202      	movs	r2, #2
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Check the parameters */
	assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

	/* Reset the SMS, TS, ECE, ETPS and ETRF bits */
	tmpsmcr = htim->Instance->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8005c82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c86:	60fb      	str	r3, [r7, #12]
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c8e:	60fb      	str	r3, [r7, #12]
	htim->Instance->SMCR = tmpsmcr;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	68fa      	ldr	r2, [r7, #12]
 8005c96:	609a      	str	r2, [r3, #8]

	switch (sClockSourceConfig->ClockSource) {
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca0:	d03e      	beq.n	8005d20 <HAL_TIM_ConfigClockSource+0xd4>
 8005ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ca6:	f200 8087 	bhi.w	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005caa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cae:	f000 8085 	beq.w	8005dbc <HAL_TIM_ConfigClockSource+0x170>
 8005cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cb6:	d87f      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cb8:	2b70      	cmp	r3, #112	; 0x70
 8005cba:	d01a      	beq.n	8005cf2 <HAL_TIM_ConfigClockSource+0xa6>
 8005cbc:	2b70      	cmp	r3, #112	; 0x70
 8005cbe:	d87b      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc0:	2b60      	cmp	r3, #96	; 0x60
 8005cc2:	d050      	beq.n	8005d66 <HAL_TIM_ConfigClockSource+0x11a>
 8005cc4:	2b60      	cmp	r3, #96	; 0x60
 8005cc6:	d877      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cc8:	2b50      	cmp	r3, #80	; 0x50
 8005cca:	d03c      	beq.n	8005d46 <HAL_TIM_ConfigClockSource+0xfa>
 8005ccc:	2b50      	cmp	r3, #80	; 0x50
 8005cce:	d873      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	d058      	beq.n	8005d86 <HAL_TIM_ConfigClockSource+0x13a>
 8005cd4:	2b40      	cmp	r3, #64	; 0x40
 8005cd6:	d86f      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005cd8:	2b30      	cmp	r3, #48	; 0x30
 8005cda:	d064      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cdc:	2b30      	cmp	r3, #48	; 0x30
 8005cde:	d86b      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d060      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d867      	bhi.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d05c      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d05a      	beq.n	8005da6 <HAL_TIM_ConfigClockSource+0x15a>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
		break;
	}

	default:
		break;
 8005cf0:	e062      	b.n	8005db8 <HAL_TIM_ConfigClockSource+0x16c>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6818      	ldr	r0, [r3, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	6899      	ldr	r1, [r3, #8]
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	f000 fbc7 	bl	8006494 <TIM_ETR_SetConfig>
		tmpsmcr = htim->Instance->SMCR;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	60fb      	str	r3, [r7, #12]
		tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d14:	60fb      	str	r3, [r7, #12]
		htim->Instance->SMCR = tmpsmcr;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	609a      	str	r2, [r3, #8]
		break;
 8005d1e:	e04e      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x172>
		TIM_ETR_SetConfig(htim->Instance, sClockSourceConfig->ClockPrescaler,
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6818      	ldr	r0, [r3, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6899      	ldr	r1, [r3, #8]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	685a      	ldr	r2, [r3, #4]
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	f000 fbb0 	bl	8006494 <TIM_ETR_SetConfig>
		htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d42:	609a      	str	r2, [r3, #8]
		break;
 8005d44:	e03b      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x172>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6818      	ldr	r0, [r3, #0]
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	6859      	ldr	r1, [r3, #4]
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	461a      	mov	r2, r3
 8005d54:	f000 fb22 	bl	800639c <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	2150      	movs	r1, #80	; 0x50
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f000 fb7b 	bl	800645a <TIM_ITRx_SetConfig>
		break;
 8005d64:	e02b      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x172>
		TIM_TI2_ConfigInputStage(htim->Instance,
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6818      	ldr	r0, [r3, #0]
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	6859      	ldr	r1, [r3, #4]
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	461a      	mov	r2, r3
 8005d74:	f000 fb41 	bl	80063fa <TIM_TI2_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2160      	movs	r1, #96	; 0x60
 8005d7e:	4618      	mov	r0, r3
 8005d80:	f000 fb6b 	bl	800645a <TIM_ITRx_SetConfig>
		break;
 8005d84:	e01b      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x172>
		TIM_TI1_ConfigInputStage(htim->Instance,
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6818      	ldr	r0, [r3, #0]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	6859      	ldr	r1, [r3, #4]
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	461a      	mov	r2, r3
 8005d94:	f000 fb02 	bl	800639c <TIM_TI1_ConfigInputStage>
		TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2140      	movs	r1, #64	; 0x40
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 fb5b 	bl	800645a <TIM_ITRx_SetConfig>
		break;
 8005da4:	e00b      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x172>
		TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4619      	mov	r1, r3
 8005db0:	4610      	mov	r0, r2
 8005db2:	f000 fb52 	bl	800645a <TIM_ITRx_SetConfig>
		break;
 8005db6:	e002      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x172>
		break;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <HAL_TIM_ConfigClockSource+0x172>
		break;
 8005dbc:	bf00      	nop
	}
	htim->State = HAL_TIM_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <TIM_Base_SetConfig>:
 * @brief  Time Base configuration
 * @param  TIMx TIM peripheral
 * @param  Structure TIM Base configuration structure
 * @retval None
 */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure) {
 8005dd8:	b480      	push	{r7}
 8005dda:	b085      	sub	sp, #20
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
 8005de0:	6039      	str	r1, [r7, #0]
	uint32_t tmpcr1;
	tmpcr1 = TIMx->CR1;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	60fb      	str	r3, [r7, #12]

	/* Set TIM Time Base Unit parameters ---------------------------------------*/
	if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx)) {
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4a2a      	ldr	r2, [pc, #168]	; (8005e94 <TIM_Base_SetConfig+0xbc>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d003      	beq.n	8005df8 <TIM_Base_SetConfig+0x20>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df6:	d108      	bne.n	8005e0a <TIM_Base_SetConfig+0x32>
		/* Select the Counter Mode */
		tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dfe:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= Structure->CounterMode;
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	68fa      	ldr	r2, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx)) {
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <TIM_Base_SetConfig+0xbc>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d00b      	beq.n	8005e2a <TIM_Base_SetConfig+0x52>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e18:	d007      	beq.n	8005e2a <TIM_Base_SetConfig+0x52>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <TIM_Base_SetConfig+0xc0>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d003      	beq.n	8005e2a <TIM_Base_SetConfig+0x52>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	4a1d      	ldr	r2, [pc, #116]	; (8005e9c <TIM_Base_SetConfig+0xc4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d108      	bne.n	8005e3c <TIM_Base_SetConfig+0x64>
		/* Set the clock division */
		tmpcr1 &= ~TIM_CR1_CKD;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e30:	60fb      	str	r3, [r7, #12]
		tmpcr1 |= (uint32_t) Structure->ClockDivision;
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	68fa      	ldr	r2, [r7, #12]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
	}

	/* Set the auto-reload preload */
	MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]

	TIMx->CR1 = tmpcr1;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	601a      	str	r2, [r3, #0]

	/* Set the Autoreload value */
	TIMx->ARR = (uint32_t) Structure->Period;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	689a      	ldr	r2, [r3, #8]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Set the Prescaler value */
	TIMx->PSC = Structure->Prescaler;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681a      	ldr	r2, [r3, #0]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	629a      	str	r2, [r3, #40]	; 0x28

	if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx)) {
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a0c      	ldr	r2, [pc, #48]	; (8005e94 <TIM_Base_SetConfig+0xbc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d007      	beq.n	8005e78 <TIM_Base_SetConfig+0xa0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a0b      	ldr	r2, [pc, #44]	; (8005e98 <TIM_Base_SetConfig+0xc0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_Base_SetConfig+0xa0>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a0a      	ldr	r2, [pc, #40]	; (8005e9c <TIM_Base_SetConfig+0xc4>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d103      	bne.n	8005e80 <TIM_Base_SetConfig+0xa8>
		/* Set the Repetition Counter value */
		TIMx->RCR = Structure->RepetitionCounter;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	691a      	ldr	r2, [r3, #16]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	631a      	str	r2, [r3, #48]	; 0x30
	}

	/* Generate an update event to reload the Prescaler
	 and the repetition counter (only for advanced timer) value immediately */
	TIMx->EGR = TIM_EGR_UG;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	615a      	str	r2, [r3, #20]
}
 8005e86:	bf00      	nop
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40014400 	.word	0x40014400
 8005e9c:	40014800 	.word	0x40014800

08005ea0 <TIM_OC1_SetConfig>:
 * @brief  Timer Output Compare 1 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The ouput configuration structure
 * @retval None
 */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 1: Reset the CC1E Bit */
	TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	699b      	ldr	r3, [r3, #24]
 8005ec6:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f023 0303 	bic.w	r3, r3, #3
 8005eda:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68fa      	ldr	r2, [r7, #12]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC1P;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	f023 0302 	bic.w	r3, r3, #2
 8005eec:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= OC_Config->OCPolarity;
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1)) {
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	4a24      	ldr	r2, [pc, #144]	; (8005f8c <TIM_OC1_SetConfig+0xec>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d007      	beq.n	8005f10 <TIM_OC1_SetConfig+0x70>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a23      	ldr	r2, [pc, #140]	; (8005f90 <TIM_OC1_SetConfig+0xf0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d003      	beq.n	8005f10 <TIM_OC1_SetConfig+0x70>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	4a22      	ldr	r2, [pc, #136]	; (8005f94 <TIM_OC1_SetConfig+0xf4>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d10c      	bne.n	8005f2a <TIM_OC1_SetConfig+0x8a>
		/* Check parameters */
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC1NP;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	f023 0308 	bic.w	r3, r3, #8
 8005f16:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= OC_Config->OCNPolarity;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	697a      	ldr	r2, [r7, #20]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC1NE;
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	f023 0304 	bic.w	r3, r3, #4
 8005f28:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a17      	ldr	r2, [pc, #92]	; (8005f8c <TIM_OC1_SetConfig+0xec>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <TIM_OC1_SetConfig+0xa2>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a17      	ldr	r2, [pc, #92]	; (8005f94 <TIM_OC1_SetConfig+0xf4>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_OC1_SetConfig+0xa2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a14      	ldr	r2, [pc, #80]	; (8005f90 <TIM_OC1_SetConfig+0xf0>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d111      	bne.n	8005f66 <TIM_OC1_SetConfig+0xc6>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS1;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f48:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f50:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= OC_Config->OCIdleState;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	693a      	ldr	r2, [r7, #16]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= OC_Config->OCNIdleState;
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	699b      	ldr	r3, [r3, #24]
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR1 = OC_Config->Pulse;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	685a      	ldr	r2, [r3, #4]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	635a      	str	r2, [r3, #52]	; 0x34

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	697a      	ldr	r2, [r7, #20]
 8005f7e:	621a      	str	r2, [r3, #32]
}
 8005f80:	bf00      	nop
 8005f82:	371c      	adds	r7, #28
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40014800 	.word	0x40014800
 8005f94:	40014400 	.word	0x40014400

08005f98 <TIM_OC2_SetConfig>:
 * @brief  Timer Output Compare 2 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The ouput configuration structure
 * @retval None
 */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8005f98:	b480      	push	{r7}
 8005f9a:	b087      	sub	sp, #28
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a1b      	ldr	r3, [r3, #32]
 8005fa6:	f023 0210 	bic.w	r2, r3, #16
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6a1b      	ldr	r3, [r3, #32]
 8005fb2:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR1;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fca:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd2:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	021b      	lsls	r3, r3, #8
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC2P;
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	f023 0320 	bic.w	r3, r3, #32
 8005fe6:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689b      	ldr	r3, [r3, #8]
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2)) {
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	4a22      	ldr	r2, [pc, #136]	; (8006080 <TIM_OC2_SetConfig+0xe8>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d10d      	bne.n	8006018 <TIM_OC2_SetConfig+0x80>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC2NP;
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006002:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	697a      	ldr	r2, [r7, #20]
 800600c:	4313      	orrs	r3, r2
 800600e:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC2NE;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006016:	617b      	str	r3, [r7, #20]

	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	4a19      	ldr	r2, [pc, #100]	; (8006080 <TIM_OC2_SetConfig+0xe8>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d007      	beq.n	8006030 <TIM_OC2_SetConfig+0x98>
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a18      	ldr	r2, [pc, #96]	; (8006084 <TIM_OC2_SetConfig+0xec>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d003      	beq.n	8006030 <TIM_OC2_SetConfig+0x98>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a17      	ldr	r2, [pc, #92]	; (8006088 <TIM_OC2_SetConfig+0xf0>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d113      	bne.n	8006058 <TIM_OC2_SetConfig+0xc0>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS2;
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006036:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS2N;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800603e:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	4313      	orrs	r3, r2
 800604a:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4313      	orrs	r3, r2
 8006056:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR1 */
	TIMx->CCMR1 = tmpccmrx;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	619a      	str	r2, [r3, #24]

	/* Set the Capture Compare Register value */
	TIMx->CCR2 = OC_Config->Pulse;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	685a      	ldr	r2, [r3, #4]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	639a      	str	r2, [r3, #56]	; 0x38

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	697a      	ldr	r2, [r7, #20]
 8006070:	621a      	str	r2, [r3, #32]
}
 8006072:	bf00      	nop
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40012c00 	.word	0x40012c00
 8006084:	40014400 	.word	0x40014400
 8006088:	40014800 	.word	0x40014800

0800608c <TIM_OC3_SetConfig>:
 * @brief  Timer Output Compare 3 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The ouput configuration structure
 * @retval None
 */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 800608c:	b480      	push	{r7}
 800608e:	b087      	sub	sp, #28
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 3: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC3E;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a1b      	ldr	r3, [r3, #32]
 800609a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	613b      	str	r3, [r7, #16]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC3M;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060be:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC3S;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC3P;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060d8:	617b      	str	r3, [r7, #20]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 8U);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	021b      	lsls	r3, r3, #8
 80060e0:	697a      	ldr	r2, [r7, #20]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	617b      	str	r3, [r7, #20]

	if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3)) {
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a21      	ldr	r2, [pc, #132]	; (8006170 <TIM_OC3_SetConfig+0xe4>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d10d      	bne.n	800610a <TIM_OC3_SetConfig+0x7e>
		assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

		/* Reset the Output N Polarity level */
		tmpccer &= ~TIM_CCER_CC3NP;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060f4:	617b      	str	r3, [r7, #20]
		/* Set the Output N Polarity */
		tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	68db      	ldr	r3, [r3, #12]
 80060fa:	021b      	lsls	r3, r3, #8
 80060fc:	697a      	ldr	r2, [r7, #20]
 80060fe:	4313      	orrs	r3, r2
 8006100:	617b      	str	r3, [r7, #20]
		/* Reset the Output N State */
		tmpccer &= ~TIM_CCER_CC3NE;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006108:	617b      	str	r3, [r7, #20]
	}

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a18      	ldr	r2, [pc, #96]	; (8006170 <TIM_OC3_SetConfig+0xe4>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d007      	beq.n	8006122 <TIM_OC3_SetConfig+0x96>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a17      	ldr	r2, [pc, #92]	; (8006174 <TIM_OC3_SetConfig+0xe8>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d003      	beq.n	8006122 <TIM_OC3_SetConfig+0x96>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a16      	ldr	r2, [pc, #88]	; (8006178 <TIM_OC3_SetConfig+0xec>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d113      	bne.n	800614a <TIM_OC3_SetConfig+0xbe>
		/* Check parameters */
		assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare and Output Compare N IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS3;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006128:	613b      	str	r3, [r7, #16]
		tmpcr2 &= ~TIM_CR2_OIS3N;
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006130:	613b      	str	r3, [r7, #16]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	693a      	ldr	r2, [r7, #16]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
		/* Set the Output N Idle state */
		tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	011b      	lsls	r3, r3, #4
 8006144:	693a      	ldr	r2, [r7, #16]
 8006146:	4313      	orrs	r3, r2
 8006148:	613b      	str	r3, [r7, #16]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	693a      	ldr	r2, [r7, #16]
 800614e:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR3 = OC_Config->Pulse;
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685a      	ldr	r2, [r3, #4]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	63da      	str	r2, [r3, #60]	; 0x3c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	621a      	str	r2, [r3, #32]
}
 8006164:	bf00      	nop
 8006166:	371c      	adds	r7, #28
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40014400 	.word	0x40014400
 8006178:	40014800 	.word	0x40014800

0800617c <TIM_OC4_SetConfig>:
 * @brief  Timer Output Compare 4 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The ouput configuration structure
 * @retval None
 */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 800617c:	b480      	push	{r7}
 800617e:	b087      	sub	sp, #28
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
 8006184:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the Channel 4: Reset the CC4E Bit */
	TIMx->CCER &= ~TIM_CCER_CC4E;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a1b      	ldr	r3, [r3, #32]
 8006196:	613b      	str	r3, [r7, #16]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	617b      	str	r3, [r7, #20]

	/* Get the TIMx CCMR2 register value */
	tmpccmrx = TIMx->CCMR2;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69db      	ldr	r3, [r3, #28]
 80061a2:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare mode and Capture/Compare selection Bits */
	tmpccmrx &= ~TIM_CCMR2_OC4M;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061ae:	60fb      	str	r3, [r7, #12]
	tmpccmrx &= ~TIM_CCMR2_CC4S;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061b6:	60fb      	str	r3, [r7, #12]

	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	021b      	lsls	r3, r3, #8
 80061be:	68fa      	ldr	r2, [r7, #12]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC4P;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061ca:	613b      	str	r3, [r7, #16]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 12U);
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	031b      	lsls	r3, r3, #12
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	613b      	str	r3, [r7, #16]

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a14      	ldr	r2, [pc, #80]	; (800622c <TIM_OC4_SetConfig+0xb0>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d007      	beq.n	80061f0 <TIM_OC4_SetConfig+0x74>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <TIM_OC4_SetConfig+0xb4>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d003      	beq.n	80061f0 <TIM_OC4_SetConfig+0x74>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a12      	ldr	r2, [pc, #72]	; (8006234 <TIM_OC4_SetConfig+0xb8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d109      	bne.n	8006204 <TIM_OC4_SetConfig+0x88>
		/* Check parameters */
		assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS4;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061f6:	617b      	str	r3, [r7, #20]

		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	019b      	lsls	r3, r3, #6
 80061fe:	697a      	ldr	r2, [r7, #20]
 8006200:	4313      	orrs	r3, r2
 8006202:	617b      	str	r3, [r7, #20]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR2 */
	TIMx->CCMR2 = tmpccmrx;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	61da      	str	r2, [r3, #28]

	/* Set the Capture Compare Register value */
	TIMx->CCR4 = OC_Config->Pulse;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	641a      	str	r2, [r3, #64]	; 0x40

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	621a      	str	r2, [r3, #32]
}
 800621e:	bf00      	nop
 8006220:	371c      	adds	r7, #28
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40012c00 	.word	0x40012c00
 8006230:	40014400 	.word	0x40014400
 8006234:	40014800 	.word	0x40014800

08006238 <TIM_OC5_SetConfig>:
 * @brief  Timer Output Compare 5 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The ouput configuration structure
 * @retval None
 */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the output: Reset the CCxE Bit */
	TIMx->CCER &= ~TIM_CCER_CC5E;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a1b      	ldr	r3, [r3, #32]
 8006252:	613b      	str	r3, [r7, #16]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR3;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800625e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800626a:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= OC_Config->OCMode;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	68fa      	ldr	r2, [r7, #12]
 8006272:	4313      	orrs	r3, r2
 8006274:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= ~TIM_CCER_CC5P;
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800627c:	613b      	str	r3, [r7, #16]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 16U);
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	041b      	lsls	r3, r3, #16
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	4313      	orrs	r3, r2
 8006288:	613b      	str	r3, [r7, #16]

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a13      	ldr	r2, [pc, #76]	; (80062dc <TIM_OC5_SetConfig+0xa4>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d007      	beq.n	80062a2 <TIM_OC5_SetConfig+0x6a>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a12      	ldr	r2, [pc, #72]	; (80062e0 <TIM_OC5_SetConfig+0xa8>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d003      	beq.n	80062a2 <TIM_OC5_SetConfig+0x6a>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	4a11      	ldr	r2, [pc, #68]	; (80062e4 <TIM_OC5_SetConfig+0xac>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d109      	bne.n	80062b6 <TIM_OC5_SetConfig+0x7e>
		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS5;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a8:	617b      	str	r3, [r7, #20]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	021b      	lsls	r3, r3, #8
 80062b0:	697a      	ldr	r2, [r7, #20]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	617b      	str	r3, [r7, #20]
	}
	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR3 */
	TIMx->CCMR3 = tmpccmrx;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	655a      	str	r2, [r3, #84]	; 0x54

	/* Set the Capture Compare Register value */
	TIMx->CCR5 = OC_Config->Pulse;
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	659a      	str	r2, [r3, #88]	; 0x58

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	621a      	str	r2, [r3, #32]
}
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40012c00 	.word	0x40012c00
 80062e0:	40014400 	.word	0x40014400
 80062e4:	40014800 	.word	0x40014800

080062e8 <TIM_OC6_SetConfig>:
 * @brief  Timer Output Compare 6 configuration
 * @param  TIMx to select the TIM peripheral
 * @param  OC_Config The ouput configuration structure
 * @retval None
 */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config) {
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
	uint32_t tmpccmrx;
	uint32_t tmpccer;
	uint32_t tmpcr2;

	/* Disable the output: Reset the CCxE Bit */
	TIMx->CCER &= ~TIM_CCER_CC6E;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	621a      	str	r2, [r3, #32]

	/* Get the TIMx CCER register value */
	tmpccer = TIMx->CCER;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a1b      	ldr	r3, [r3, #32]
 8006302:	613b      	str	r3, [r7, #16]
	/* Get the TIMx CR2 register value */
	tmpcr2 = TIMx->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	617b      	str	r3, [r7, #20]
	/* Get the TIMx CCMR1 register value */
	tmpccmrx = TIMx->CCMR3;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630e:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Compare Mode Bits */
	tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006316:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800631a:	60fb      	str	r3, [r7, #12]
	/* Select the Output Compare Mode */
	tmpccmrx |= (OC_Config->OCMode << 8U);
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	021b      	lsls	r3, r3, #8
 8006322:	68fa      	ldr	r2, [r7, #12]
 8006324:	4313      	orrs	r3, r2
 8006326:	60fb      	str	r3, [r7, #12]

	/* Reset the Output Polarity level */
	tmpccer &= (uint32_t) ~TIM_CCER_CC6P;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800632e:	613b      	str	r3, [r7, #16]
	/* Set the Output Compare Polarity */
	tmpccer |= (OC_Config->OCPolarity << 20U);
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	051b      	lsls	r3, r3, #20
 8006336:	693a      	ldr	r2, [r7, #16]
 8006338:	4313      	orrs	r3, r2
 800633a:	613b      	str	r3, [r7, #16]

	if (IS_TIM_BREAK_INSTANCE(TIMx)) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4a14      	ldr	r2, [pc, #80]	; (8006390 <TIM_OC6_SetConfig+0xa8>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d007      	beq.n	8006354 <TIM_OC6_SetConfig+0x6c>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a13      	ldr	r2, [pc, #76]	; (8006394 <TIM_OC6_SetConfig+0xac>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d003      	beq.n	8006354 <TIM_OC6_SetConfig+0x6c>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a12      	ldr	r2, [pc, #72]	; (8006398 <TIM_OC6_SetConfig+0xb0>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d109      	bne.n	8006368 <TIM_OC6_SetConfig+0x80>
		/* Reset the Output Compare IDLE State */
		tmpcr2 &= ~TIM_CR2_OIS6;
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800635a:	617b      	str	r3, [r7, #20]
		/* Set the Output Idle state */
		tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	695b      	ldr	r3, [r3, #20]
 8006360:	029b      	lsls	r3, r3, #10
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	4313      	orrs	r3, r2
 8006366:	617b      	str	r3, [r7, #20]
	}

	/* Write to TIMx CR2 */
	TIMx->CR2 = tmpcr2;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	605a      	str	r2, [r3, #4]

	/* Write to TIMx CCMR3 */
	TIMx->CCMR3 = tmpccmrx;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	655a      	str	r2, [r3, #84]	; 0x54

	/* Set the Capture Compare Register value */
	TIMx->CCR6 = OC_Config->Pulse;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	65da      	str	r2, [r3, #92]	; 0x5c

	/* Write to TIMx CCER */
	TIMx->CCER = tmpccer;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	693a      	ldr	r2, [r7, #16]
 8006380:	621a      	str	r2, [r3, #32]
}
 8006382:	bf00      	nop
 8006384:	371c      	adds	r7, #28
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	40012c00 	.word	0x40012c00
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800

0800639c <TIM_TI1_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 1: Reset the CC1E Bit */
	tmpccer = TIMx->CCER;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	617b      	str	r3, [r7, #20]
	TIMx->CCER &= ~TIM_CCER_CC1E;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f023 0201 	bic.w	r2, r3, #1
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	699b      	ldr	r3, [r3, #24]
 80063be:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063c6:	613b      	str	r3, [r7, #16]
	tmpccmr1 |= (TIM_ICFilter << 4U);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	011b      	lsls	r3, r3, #4
 80063cc:	693a      	ldr	r2, [r7, #16]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	613b      	str	r3, [r7, #16]

	/* Select the Polarity and set the CC1E Bit */
	tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f023 030a 	bic.w	r3, r3, #10
 80063d8:	617b      	str	r3, [r7, #20]
	tmpccer |= TIM_ICPolarity;
 80063da:	697a      	ldr	r2, [r7, #20]
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	4313      	orrs	r3, r2
 80063e0:	617b      	str	r3, [r7, #20]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	621a      	str	r2, [r3, #32]
}
 80063ee:	bf00      	nop
 80063f0:	371c      	adds	r7, #28
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr

080063fa <TIM_TI2_ConfigInputStage>:
 * @param  TIM_ICFilter Specifies the Input Capture Filter.
 *          This parameter must be a value between 0x00 and 0x0F.
 * @retval None
 */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity,
		uint32_t TIM_ICFilter) {
 80063fa:	b480      	push	{r7}
 80063fc:	b087      	sub	sp, #28
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	607a      	str	r2, [r7, #4]
	uint32_t tmpccmr1;
	uint32_t tmpccer;

	/* Disable the Channel 2: Reset the CC2E Bit */
	TIMx->CCER &= ~TIM_CCER_CC2E;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6a1b      	ldr	r3, [r3, #32]
 800640a:	f023 0210 	bic.w	r2, r3, #16
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	621a      	str	r2, [r3, #32]
	tmpccmr1 = TIMx->CCMR1;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	617b      	str	r3, [r7, #20]
	tmpccer = TIMx->CCER;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	613b      	str	r3, [r7, #16]

	/* Set the filter */
	tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006424:	617b      	str	r3, [r7, #20]
	tmpccmr1 |= (TIM_ICFilter << 12U);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	031b      	lsls	r3, r3, #12
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

	/* Select the Polarity and set the CC2E Bit */
	tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006436:	613b      	str	r3, [r7, #16]
	tmpccer |= (TIM_ICPolarity << 4U);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	011b      	lsls	r3, r3, #4
 800643c:	693a      	ldr	r2, [r7, #16]
 800643e:	4313      	orrs	r3, r2
 8006440:	613b      	str	r3, [r7, #16]

	/* Write to TIMx CCMR1 and CCER registers */
	TIMx->CCMR1 = tmpccmr1;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	619a      	str	r2, [r3, #24]
	TIMx->CCER = tmpccer;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	693a      	ldr	r2, [r7, #16]
 800644c:	621a      	str	r2, [r3, #32]
}
 800644e:	bf00      	nop
 8006450:	371c      	adds	r7, #28
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr

0800645a <TIM_ITRx_SetConfig>:
 *            @arg TIM_TS_TI1FP1: Filtered Timer Input 1
 *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
 *            @arg TIM_TS_ETRF: External Trigger input
 * @retval None
 */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource) {
 800645a:	b480      	push	{r7}
 800645c:	b085      	sub	sp, #20
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
 8006462:	6039      	str	r1, [r7, #0]
	uint32_t tmpsmcr;

	/* Get the TIMx SMCR register value */
	tmpsmcr = TIMx->SMCR;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	60fb      	str	r3, [r7, #12]
	/* Reset the TS Bits */
	tmpsmcr &= ~TIM_SMCR_TS;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006474:	60fb      	str	r3, [r7, #12]
	/* Set the Input Trigger source and the slave mode*/
	tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006476:	683a      	ldr	r2, [r7, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4313      	orrs	r3, r2
 800647c:	f043 0307 	orr.w	r3, r3, #7
 8006480:	60fb      	str	r3, [r7, #12]
	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	609a      	str	r2, [r3, #8]
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <TIM_ETR_SetConfig>:
 * @param  ExtTRGFilter External Trigger Filter.
 *          This parameter must be a value between 0x00 and 0x0F
 * @retval None
 */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
		uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter) {
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
 80064a0:	603b      	str	r3, [r7, #0]
	uint32_t tmpsmcr;

	tmpsmcr = TIMx->SMCR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	617b      	str	r3, [r7, #20]

	/* Reset the ETR Bits */
	tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064ae:	617b      	str	r3, [r7, #20]

	/* Set the Prescaler, the Filter value and the Polarity */
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
			| (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	021a      	lsls	r2, r3, #8
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	4313      	orrs	r3, r2
	tmpsmcr |= (uint32_t) (TIM_ExtTRGPrescaler
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]

	/* Write to TIMx SMCR */
	TIMx->SMCR = tmpsmcr;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	609a      	str	r2, [r3, #8]
}
 80064c8:	bf00      	nop
 80064ca:	371c      	adds	r7, #28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_TIMEx_MasterConfigSynchronization>:
 *         contains the selected trigger output (TRGO) and the Master/Slave
 *         mode.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
		TIM_MasterConfigTypeDef *sMasterConfig) {
 80064d4:	b480      	push	{r7}
 80064d6:	b085      	sub	sp, #20
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
 80064dc:	6039      	str	r1, [r7, #0]
	assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
	assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
	assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

	/* Check input state */
	__HAL_LOCK(htim);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d101      	bne.n	80064ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064e8:	2302      	movs	r3, #2
 80064ea:	e04a      	b.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Change the handler state */
	htim->State = HAL_TIM_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2202      	movs	r2, #2
 80064f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* Get the TIMx CR2 register value */
	tmpcr2 = htim->Instance->CR2;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	60fb      	str	r3, [r7, #12]

	/* Get the TIMx SMCR register value */
	tmpsmcr = htim->Instance->SMCR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	60bb      	str	r3, [r7, #8]

	/* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
	if (IS_TIM_TRGO2_INSTANCE(htim->Instance)) {
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d108      	bne.n	8006528 <HAL_TIMEx_MasterConfigSynchronization+0x54>
		/* Check the parameters */
		assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

		/* Clear the MMS2 bits */
		tmpcr2 &= ~TIM_CR2_MMS2;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800651c:	60fb      	str	r3, [r7, #12]
		/* Select the TRGO2 source*/
		tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	68fa      	ldr	r2, [r7, #12]
 8006524:	4313      	orrs	r3, r2
 8006526:	60fb      	str	r3, [r7, #12]
	}

	/* Reset the MMS Bits */
	tmpcr2 &= ~TIM_CR2_MMS;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652e:	60fb      	str	r3, [r7, #12]
	/* Select the TRGO source */
	tmpcr2 |= sMasterConfig->MasterOutputTrigger;
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	4313      	orrs	r3, r2
 8006538:	60fb      	str	r3, [r7, #12]

	/* Update TIMx CR2 */
	htim->Instance->CR2 = tmpcr2;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68fa      	ldr	r2, [r7, #12]
 8006540:	605a      	str	r2, [r3, #4]

	if (IS_TIM_SLAVE_INSTANCE(htim->Instance)) {
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a12      	ldr	r2, [pc, #72]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d004      	beq.n	8006556 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006554:	d10c      	bne.n	8006570 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
		/* Reset the MSM Bit */
		tmpsmcr &= ~TIM_SMCR_MSM;
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800655c:	60bb      	str	r3, [r7, #8]
		/* Set master mode */
		tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	68ba      	ldr	r2, [r7, #8]
 8006564:	4313      	orrs	r3, r2
 8006566:	60bb      	str	r3, [r7, #8]

		/* Update TIMx SMCR */
		htim->Instance->SMCR = tmpsmcr;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	68ba      	ldr	r2, [r7, #8]
 800656e:	609a      	str	r2, [r3, #8]
	}

	/* Change the htim state */
	htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	__HAL_UNLOCK(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 8006580:	2300      	movs	r3, #0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	40012c00 	.word	0x40012c00

08006594 <HAL_TIMEx_ConfigBreakDeadTime>:
 *         break input, the break 2 input or the system break input. Break
 *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
		TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig) {
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
	/* Keep this variable initialized to 0 as it is used to configure BDTR register */
	uint32_t tmpbdtr = 0U;
 800659e:	2300      	movs	r3, #0
 80065a0:	60fb      	str	r3, [r7, #12]
	assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
	assert_param(
			IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

	/* Check input state */
	__HAL_LOCK(htim);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	d101      	bne.n	80065b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80065ac:	2302      	movs	r3, #2
 80065ae:	e078      	b.n	80066a2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2201      	movs	r2, #1
 80065b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	/* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
	 the OSSI State, the dead time value and the Automatic Output Enable Bit */

	/* Set the BDTR bits */
	MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	4313      	orrs	r3, r2
 80065c4:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	4313      	orrs	r3, r2
 80065e0:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	695b      	ldr	r3, [r3, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]
	MODIFY_REG(tmpbdtr, TIM_BDTR_BKF,
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	699b      	ldr	r3, [r3, #24]
 8006624:	041b      	lsls	r3, r3, #16
 8006626:	4313      	orrs	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]
			(sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));

	if (IS_TIM_ADVANCED_INSTANCE(htim->Instance)) {
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a20      	ldr	r2, [pc, #128]	; (80066b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d106      	bne.n	8006642 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
		/* Check the parameters */
		assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

		/* Set BREAK AF mode */
		MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
	}

	if (IS_TIM_BKIN2_INSTANCE(htim->Instance)) {
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a1a      	ldr	r2, [pc, #104]	; (80066b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d121      	bne.n	8006690 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
		assert_param(
				IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
		assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

		/* Set the BREAK2 input related BDTR bits */
		MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F,
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006656:	051b      	lsls	r3, r3, #20
 8006658:	4313      	orrs	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
				(sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
		MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
		MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P,
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006674:	4313      	orrs	r3, r2
 8006676:	60fb      	str	r3, [r7, #12]
				sBreakDeadTimeConfig->Break2Polarity);

		if (IS_TIM_ADVANCED_INSTANCE(htim->Instance)) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a0c      	ldr	r2, [pc, #48]	; (80066b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d106      	bne.n	8006690 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
			/* Check the parameters */
			assert_param(
					IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

			/* Set BREAK2 AF mode */
			MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID,
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668c:	4313      	orrs	r3, r2
 800668e:	60fb      	str	r3, [r7, #12]
					sBreakDeadTimeConfig->Break2AFMode);
		}
	}

	/* Set TIMx_BDTR */
	htim->Instance->BDTR = tmpbdtr;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	645a      	str	r2, [r3, #68]	; 0x44

	__HAL_UNLOCK(htim);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

	return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3714      	adds	r7, #20
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	40012c00 	.word	0x40012c00

080066b4 <LL_GPIO_SetPinMode>:
 *         @arg @ref LL_GPIO_MODE_ALTERNATE
 *         @arg @ref LL_GPIO_MODE_ANALOG
 * @retval None
 */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Mode) {
 80066b4:	b480      	push	{r7}
 80066b6:	b089      	sub	sp, #36	; 0x24
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
	MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)),
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681a      	ldr	r2, [r3, #0]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	617b      	str	r3, [r7, #20]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	fa93 f3a3 	rbit	r3, r3
 80066ce:	613b      	str	r3, [r7, #16]
	return result;
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	fab3 f383 	clz	r3, r3
 80066d6:	b2db      	uxtb	r3, r3
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	2103      	movs	r1, #3
 80066dc:	fa01 f303 	lsl.w	r3, r1, r3
 80066e0:	43db      	mvns	r3, r3
 80066e2:	401a      	ands	r2, r3
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	fa93 f3a3 	rbit	r3, r3
 80066ee:	61bb      	str	r3, [r7, #24]
	return result;
 80066f0:	69bb      	ldr	r3, [r7, #24]
 80066f2:	fab3 f383 	clz	r3, r3
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	6879      	ldr	r1, [r7, #4]
 80066fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006700:	431a      	orrs	r2, r3
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	601a      	str	r2, [r3, #0]
			(Mode << (POSITION_VAL(Pin) * 2U)));
}
 8006706:	bf00      	nop
 8006708:	3724      	adds	r7, #36	; 0x24
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <LL_GPIO_SetPinOutputType>:
 *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
 *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
 * @retval None
 */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx,
		uint32_t PinMask, uint32_t OutputType) {
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
	MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	43db      	mvns	r3, r3
 8006726:	401a      	ands	r2, r3
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	431a      	orrs	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]
}
 8006736:	bf00      	nop
 8006738:	3714      	adds	r7, #20
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr

08006742 <LL_GPIO_SetPinSpeed>:
 *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
 *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
 * @retval None
 */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Speed) {
 8006742:	b480      	push	{r7}
 8006744:	b089      	sub	sp, #36	; 0x24
 8006746:	af00      	add	r7, sp, #0
 8006748:	60f8      	str	r0, [r7, #12]
 800674a:	60b9      	str	r1, [r7, #8]
 800674c:	607a      	str	r2, [r7, #4]
	MODIFY_REG(GPIOx->OSPEEDR,
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	689a      	ldr	r2, [r3, #8]
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	617b      	str	r3, [r7, #20]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	fa93 f3a3 	rbit	r3, r3
 800675c:	613b      	str	r3, [r7, #16]
	return result;
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	fab3 f383 	clz	r3, r3
 8006764:	b2db      	uxtb	r3, r3
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	2103      	movs	r1, #3
 800676a:	fa01 f303 	lsl.w	r3, r1, r3
 800676e:	43db      	mvns	r3, r3
 8006770:	401a      	ands	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006776:	69fb      	ldr	r3, [r7, #28]
 8006778:	fa93 f3a3 	rbit	r3, r3
 800677c:	61bb      	str	r3, [r7, #24]
	return result;
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	fab3 f383 	clz	r3, r3
 8006784:	b2db      	uxtb	r3, r3
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	6879      	ldr	r1, [r7, #4]
 800678a:	fa01 f303 	lsl.w	r3, r1, r3
 800678e:	431a      	orrs	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	609a      	str	r2, [r3, #8]
			(GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
			(Speed << (POSITION_VAL(Pin) * 2U)));
}
 8006794:	bf00      	nop
 8006796:	3724      	adds	r7, #36	; 0x24
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <LL_GPIO_SetPinPull>:
 *         @arg @ref LL_GPIO_PULL_UP
 *         @arg @ref LL_GPIO_PULL_DOWN
 * @retval None
 */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Pull) {
 80067a0:	b480      	push	{r7}
 80067a2:	b089      	sub	sp, #36	; 0x24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
	MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)),
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	617b      	str	r3, [r7, #20]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	fa93 f3a3 	rbit	r3, r3
 80067ba:	613b      	str	r3, [r7, #16]
	return result;
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	fab3 f383 	clz	r3, r3
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	2103      	movs	r1, #3
 80067c8:	fa01 f303 	lsl.w	r3, r1, r3
 80067cc:	43db      	mvns	r3, r3
 80067ce:	401a      	ands	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	fa93 f3a3 	rbit	r3, r3
 80067da:	61bb      	str	r3, [r7, #24]
	return result;
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	fab3 f383 	clz	r3, r3
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	005b      	lsls	r3, r3, #1
 80067e6:	6879      	ldr	r1, [r7, #4]
 80067e8:	fa01 f303 	lsl.w	r3, r1, r3
 80067ec:	431a      	orrs	r2, r3
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	60da      	str	r2, [r3, #12]
			(Pull << (POSITION_VAL(Pin) * 2U)));
}
 80067f2:	bf00      	nop
 80067f4:	3724      	adds	r7, #36	; 0x24
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <LL_GPIO_SetAFPin_0_7>:
 *         @arg @ref LL_GPIO_AF_14
 *         @arg @ref LL_GPIO_AF_15
 * @retval None
 */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Alternate) {
 80067fe:	b480      	push	{r7}
 8006800:	b089      	sub	sp, #36	; 0x24
 8006802:	af00      	add	r7, sp, #0
 8006804:	60f8      	str	r0, [r7, #12]
 8006806:	60b9      	str	r1, [r7, #8]
 8006808:	607a      	str	r2, [r7, #4]
	MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6a1a      	ldr	r2, [r3, #32]
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	617b      	str	r3, [r7, #20]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	fa93 f3a3 	rbit	r3, r3
 8006818:	613b      	str	r3, [r7, #16]
	return result;
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	fab3 f383 	clz	r3, r3
 8006820:	b2db      	uxtb	r3, r3
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	210f      	movs	r1, #15
 8006826:	fa01 f303 	lsl.w	r3, r1, r3
 800682a:	43db      	mvns	r3, r3
 800682c:	401a      	ands	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006832:	69fb      	ldr	r3, [r7, #28]
 8006834:	fa93 f3a3 	rbit	r3, r3
 8006838:	61bb      	str	r3, [r7, #24]
	return result;
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	fab3 f383 	clz	r3, r3
 8006840:	b2db      	uxtb	r3, r3
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	6879      	ldr	r1, [r7, #4]
 8006846:	fa01 f303 	lsl.w	r3, r1, r3
 800684a:	431a      	orrs	r2, r3
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	621a      	str	r2, [r3, #32]
			(Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8006850:	bf00      	nop
 8006852:	3724      	adds	r7, #36	; 0x24
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <LL_GPIO_SetAFPin_8_15>:
 *         @arg @ref LL_GPIO_AF_14
 *         @arg @ref LL_GPIO_AF_15
 * @retval None
 */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin,
		uint32_t Alternate) {
 800685c:	b480      	push	{r7}
 800685e:	b089      	sub	sp, #36	; 0x24
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
	MODIFY_REG(GPIOx->AFR[1],
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	0a1b      	lsrs	r3, r3, #8
 8006870:	617b      	str	r3, [r7, #20]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	fa93 f3a3 	rbit	r3, r3
 8006878:	613b      	str	r3, [r7, #16]
	return result;
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	fab3 f383 	clz	r3, r3
 8006880:	b2db      	uxtb	r3, r3
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	210f      	movs	r1, #15
 8006886:	fa01 f303 	lsl.w	r3, r1, r3
 800688a:	43db      	mvns	r3, r3
 800688c:	401a      	ands	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	0a1b      	lsrs	r3, r3, #8
 8006892:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006894:	69fb      	ldr	r3, [r7, #28]
 8006896:	fa93 f3a3 	rbit	r3, r3
 800689a:	61bb      	str	r3, [r7, #24]
	return result;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	fab3 f383 	clz	r3, r3
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	fa01 f303 	lsl.w	r3, r1, r3
 80068ac:	431a      	orrs	r2, r3
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	625a      	str	r2, [r3, #36]	; 0x24
			(GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
			(Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80068b2:	bf00      	nop
 80068b4:	3724      	adds	r7, #36	; 0x24
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <LL_GPIO_Init>:
 * @retval An ErrorStatus enumeration value:
 *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
 *          - ERROR:   Not applicable
 */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx,
		LL_GPIO_InitTypeDef *GPIO_InitStruct) {
 80068be:	b580      	push	{r7, lr}
 80068c0:	b088      	sub	sp, #32
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
	assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
	assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

	/* ------------------------- Configure the port pins ---------------- */
	/* Initialize  pinpos on first pin set */
	pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	617b      	str	r3, [r7, #20]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	fa93 f3a3 	rbit	r3, r3
 80068d4:	613b      	str	r3, [r7, #16]
	return result;
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	fab3 f383 	clz	r3, r3
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	61fb      	str	r3, [r7, #28]

	/* Configure the port pins */
	while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u) {
 80068e0:	e050      	b.n	8006984 <LL_GPIO_Init+0xc6>
		/* Get current io position */
		currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	681a      	ldr	r2, [r3, #0]
 80068e6:	2101      	movs	r1, #1
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	fa01 f303 	lsl.w	r3, r1, r3
 80068ee:	4013      	ands	r3, r2
 80068f0:	61bb      	str	r3, [r7, #24]

		if (currentpin != 0x00u) {
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d042      	beq.n	800697e <LL_GPIO_Init+0xc0>
			if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d003      	beq.n	8006908 <LL_GPIO_Init+0x4a>
					|| (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)) {
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d10d      	bne.n	8006924 <LL_GPIO_Init+0x66>
				/* Check Speed mode parameters */
				assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

				/* Speed mode configuration */
				LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	461a      	mov	r2, r3
 800690e:	69b9      	ldr	r1, [r7, #24]
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f7ff ff16 	bl	8006742 <LL_GPIO_SetPinSpeed>
				/* Check Output mode parameters */
				assert_param(
						IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

				/* Output mode configuration*/
				LL_GPIO_SetPinOutputType(GPIOx, currentpin,
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	461a      	mov	r2, r3
 800691c:	69b9      	ldr	r1, [r7, #24]
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7ff fef7 	bl	8006712 <LL_GPIO_SetPinOutputType>
						GPIO_InitStruct->OutputType);
			}

			/* Pull-up Pull down resistor configuration*/
			LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	461a      	mov	r2, r3
 800692a:	69b9      	ldr	r1, [r7, #24]
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff ff37 	bl	80067a0 <LL_GPIO_SetPinPull>

			if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE) {
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	2b02      	cmp	r3, #2
 8006938:	d11a      	bne.n	8006970 <LL_GPIO_Init+0xb2>
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	fa93 f3a3 	rbit	r3, r3
 8006944:	60bb      	str	r3, [r7, #8]
	return result;
 8006946:	68bb      	ldr	r3, [r7, #8]
				/* Check Alternate parameter */
				assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

				/* Speed mode configuration */
				if (POSITION_VAL(currentpin) < 0x00000008uL) {
 8006948:	fab3 f383 	clz	r3, r3
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b07      	cmp	r3, #7
 8006950:	d807      	bhi.n	8006962 <LL_GPIO_Init+0xa4>
					LL_GPIO_SetAFPin_0_7(GPIOx, currentpin,
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	461a      	mov	r2, r3
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f7ff ff4f 	bl	80067fe <LL_GPIO_SetAFPin_0_7>
 8006960:	e006      	b.n	8006970 <LL_GPIO_Init+0xb2>
							GPIO_InitStruct->Alternate);
				} else {
					LL_GPIO_SetAFPin_8_15(GPIOx, currentpin,
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	461a      	mov	r2, r3
 8006968:	69b9      	ldr	r1, [r7, #24]
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f7ff ff76 	bl	800685c <LL_GPIO_SetAFPin_8_15>
							GPIO_InitStruct->Alternate);
				}
			}

			/* Pin Mode configuration */
			LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	461a      	mov	r2, r3
 8006976:	69b9      	ldr	r1, [r7, #24]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff fe9b 	bl	80066b4 <LL_GPIO_SetPinMode>
		}
		pinpos++;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
	while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u) {
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	fa22 f303 	lsr.w	r3, r2, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d1a7      	bne.n	80068e2 <LL_GPIO_Init+0x24>
	}

	return (SUCCESS);
 8006992:	2300      	movs	r3, #0
}
 8006994:	4618      	mov	r0, r3
 8006996:	3720      	adds	r7, #32
 8006998:	46bd      	mov	sp, r7
 800699a:	bd80      	pop	{r7, pc}

0800699c <LL_SPI_IsEnabled>:
__STATIC_INLINE uint32_t LL_SPI_IsEnabled(SPI_TypeDef *SPIx) {
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
	return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b40      	cmp	r3, #64	; 0x40
 80069ae:	d101      	bne.n	80069b4 <LL_SPI_IsEnabled+0x18>
 80069b0:	2301      	movs	r3, #1
 80069b2:	e000      	b.n	80069b6 <LL_SPI_IsEnabled+0x1a>
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <LL_SPI_SetCRCPolynomial>:
		uint32_t CRCPoly) {
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	6039      	str	r1, [r7, #0]
	WRITE_REG(SPIx->CRCPR, (uint16_t )CRCPoly);
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	461a      	mov	r2, r3
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	611a      	str	r2, [r3, #16]
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr

080069e2 <LL_SPI_Init>:
 *         SPI peripheral should be in disabled state prior calling this function. Otherwise, ERROR result will be returned.
 * @param  SPIx SPI Instance
 * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
 * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
 */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct) {
 80069e2:	b580      	push	{r7, lr}
 80069e4:	b084      	sub	sp, #16
 80069e6:	af00      	add	r7, sp, #0
 80069e8:	6078      	str	r0, [r7, #4]
 80069ea:	6039      	str	r1, [r7, #0]
	ErrorStatus status = ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	73fb      	strb	r3, [r7, #15]
	assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
	assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
	assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
	assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

	if (LL_SPI_IsEnabled(SPIx) == 0x00000000U) {
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff ffd3 	bl	800699c <LL_SPI_IsEnabled>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d13b      	bne.n	8006a74 <LL_SPI_Init+0x92>
		 * - NSS management:     SPI_CR1_SSM bit
		 * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
		 * - BitOrder:           SPI_CR1_LSBFIRST bit
		 * - CRCCalculation:     SPI_CR1_CRCEN bit
		 */
		MODIFY_REG(SPIx->CR1, SPI_CR1_CLEAR_MASK,
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a04:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	6811      	ldr	r1, [r2, #0]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	6852      	ldr	r2, [r2, #4]
 8006a10:	4311      	orrs	r1, r2
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	68d2      	ldr	r2, [r2, #12]
 8006a16:	4311      	orrs	r1, r2
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	6912      	ldr	r2, [r2, #16]
 8006a1c:	4311      	orrs	r1, r2
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	6952      	ldr	r2, [r2, #20]
 8006a22:	4311      	orrs	r1, r2
 8006a24:	683a      	ldr	r2, [r7, #0]
 8006a26:	6992      	ldr	r2, [r2, #24]
 8006a28:	4311      	orrs	r1, r2
 8006a2a:	683a      	ldr	r2, [r7, #0]
 8006a2c:	69d2      	ldr	r2, [r2, #28]
 8006a2e:	4311      	orrs	r1, r2
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	6a12      	ldr	r2, [r2, #32]
 8006a34:	430a      	orrs	r2, r1
 8006a36:	431a      	orrs	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	601a      	str	r2, [r3, #0]
		/*---------------------------- SPIx CR2 Configuration ------------------------
		 * Configure SPIx CR2 with parameters:
		 * - DataWidth:          DS[3:0] bits
		 * - NSS management:     SSOE bit
		 */
		MODIFY_REG(SPIx->CR2, SPI_CR2_DS | SPI_CR2_SSOE,
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006a44:	f023 0304 	bic.w	r3, r3, #4
 8006a48:	683a      	ldr	r2, [r7, #0]
 8006a4a:	6891      	ldr	r1, [r2, #8]
 8006a4c:	683a      	ldr	r2, [r7, #0]
 8006a4e:	6952      	ldr	r2, [r2, #20]
 8006a50:	0c12      	lsrs	r2, r2, #16
 8006a52:	430a      	orrs	r2, r1
 8006a54:	431a      	orrs	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	605a      	str	r2, [r3, #4]

		/*---------------------------- SPIx CRCPR Configuration ----------------------
		 * Configure SPIx CRCPR with parameters:
		 * - CRCPoly:            CRCPOLY[15:0] bits
		 */
		if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE) {
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a62:	d105      	bne.n	8006a70 <LL_SPI_Init+0x8e>
			assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
			LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a68:	4619      	mov	r1, r3
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f7ff ffa9 	bl	80069c2 <LL_SPI_SetCRCPolynomial>
		}
		status = SUCCESS;
 8006a70:	2300      	movs	r3, #0
 8006a72:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}

08006a7e <aci_gap_set_non_discoverable>:
 ******************************************************************************
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable(void) {
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b088      	sub	sp, #32
 8006a82:	af00      	add	r7, sp, #0
	struct hci_request rq;
	tBleStatus status = 0;
 8006a84:	2300      	movs	r3, #0
 8006a86:	71fb      	strb	r3, [r7, #7]
	Osal_MemSet(&rq, 0, sizeof(rq));
 8006a88:	f107 0308 	add.w	r3, r7, #8
 8006a8c:	2218      	movs	r2, #24
 8006a8e:	2100      	movs	r1, #0
 8006a90:	4618      	mov	r0, r3
 8006a92:	f000 ff8b 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8006a96:	233f      	movs	r3, #63	; 0x3f
 8006a98:	813b      	strh	r3, [r7, #8]
	rq.ocf = 0x081;
 8006a9a:	2381      	movs	r3, #129	; 0x81
 8006a9c:	817b      	strh	r3, [r7, #10]
	rq.rparam = &status;
 8006a9e:	1dfb      	adds	r3, r7, #7
 8006aa0:	61bb      	str	r3, [r7, #24]
	rq.rlen = 1;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	61fb      	str	r3, [r7, #28]
	if (hci_send_req(&rq, FALSE) < 0)
 8006aa6:	f107 0308 	add.w	r3, r7, #8
 8006aaa:	2100      	movs	r1, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f001 f931 	bl	8007d14 <hci_send_req>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	da01      	bge.n	8006abc <aci_gap_set_non_discoverable+0x3e>
		return BLE_STATUS_TIMEOUT;
 8006ab8:	23ff      	movs	r3, #255	; 0xff
 8006aba:	e000      	b.n	8006abe <aci_gap_set_non_discoverable+0x40>
	return status;
 8006abc:	79fb      	ldrb	r3, [r7, #7]
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}

08006ac6 <aci_gap_set_discoverable>:
tBleStatus aci_gap_set_discoverable(uint8_t Advertising_Type,
		uint16_t Advertising_Interval_Min, uint16_t Advertising_Interval_Max,
		uint8_t Own_Address_Type, uint8_t Advertising_Filter_Policy,
		uint8_t Local_Name_Length, const uint8_t *Local_Name,
		uint8_t Service_Uuid_length, const uint8_t *Service_Uuid_List,
		uint16_t Slave_Conn_Interval_Min, uint16_t Slave_Conn_Interval_Max) {
 8006ac6:	b5b0      	push	{r4, r5, r7, lr}
 8006ac8:	b0ce      	sub	sp, #312	; 0x138
 8006aca:	af00      	add	r7, sp, #0
 8006acc:	4605      	mov	r5, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	4610      	mov	r0, r2
 8006ad2:	4619      	mov	r1, r3
 8006ad4:	1dfb      	adds	r3, r7, #7
 8006ad6:	462a      	mov	r2, r5
 8006ad8:	701a      	strb	r2, [r3, #0]
 8006ada:	1d3b      	adds	r3, r7, #4
 8006adc:	4622      	mov	r2, r4
 8006ade:	801a      	strh	r2, [r3, #0]
 8006ae0:	1cbb      	adds	r3, r7, #2
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	801a      	strh	r2, [r3, #0]
 8006ae6:	1dbb      	adds	r3, r7, #6
 8006ae8:	460a      	mov	r2, r1
 8006aea:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_gap_set_discoverable_cp0 *cp0 =
 8006aec:	f107 0310 	add.w	r3, r7, #16
 8006af0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
			(aci_gap_set_discoverable_cp0*) (cmd_buffer);
	aci_gap_set_discoverable_cp1 *cp1 =
			(aci_gap_set_discoverable_cp1*) (cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1
					+ Local_Name_Length * (sizeof(uint8_t)));
 8006af4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006af8:	3308      	adds	r3, #8
	aci_gap_set_discoverable_cp1 *cp1 =
 8006afa:	f107 0210 	add.w	r2, r7, #16
 8006afe:	4413      	add	r3, r2
 8006b00:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
	aci_gap_set_discoverable_cp2 *cp2 =
			(aci_gap_set_discoverable_cp2*) (cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1
					+ Local_Name_Length * (sizeof(uint8_t)) + 1
 8006b04:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
					+ Service_Uuid_length * (sizeof(uint8_t)));
 8006b08:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006b0c:	4413      	add	r3, r2
 8006b0e:	3309      	adds	r3, #9
	aci_gap_set_discoverable_cp2 *cp2 =
 8006b10:	f107 0210 	add.w	r2, r7, #16
 8006b14:	4413      	add	r3, r2
 8006b16:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	tBleStatus status = 0;
 8006b1a:	f107 030f 	add.w	r3, r7, #15
 8006b1e:	2200      	movs	r2, #0
 8006b20:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 8006b22:	2300      	movs	r3, #0
 8006b24:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Advertising_Type = Advertising_Type;
 8006b28:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b2c:	1dfa      	adds	r2, r7, #7
 8006b2e:	7812      	ldrb	r2, [r2, #0]
 8006b30:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 8006b32:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b36:	3301      	adds	r3, #1
 8006b38:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8006b3c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b40:	1d3a      	adds	r2, r7, #4
 8006b42:	8812      	ldrh	r2, [r2, #0]
 8006b44:	f8a3 2001 	strh.w	r2, [r3, #1]
	index_input += 2;
 8006b48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b4c:	3302      	adds	r3, #2
 8006b4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8006b52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b56:	1cba      	adds	r2, r7, #2
 8006b58:	8812      	ldrh	r2, [r2, #0]
 8006b5a:	f8a3 2003 	strh.w	r2, [r3, #3]
	index_input += 2;
 8006b5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b62:	3302      	adds	r3, #2
 8006b64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Own_Address_Type = Own_Address_Type;
 8006b68:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b6c:	1dba      	adds	r2, r7, #6
 8006b6e:	7812      	ldrb	r2, [r2, #0]
 8006b70:	715a      	strb	r2, [r3, #5]
	index_input += 1;
 8006b72:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b76:	3301      	adds	r3, #1
 8006b78:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8006b7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b80:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006b84:	719a      	strb	r2, [r3, #6]
	index_input += 1;
 8006b86:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b8a:	3301      	adds	r3, #1
 8006b8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Local_Name_Length = Local_Name_Length;
 8006b90:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006b94:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006b98:	71da      	strb	r2, [r3, #7]
	index_input += 1;
 8006b9a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006b9e:	3301      	adds	r3, #1
 8006ba0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	/* var_len_data input */
	{
		Osal_MemCpy((void*) &cp0->Local_Name, (const void*) Local_Name,
 8006ba4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8006ba8:	3308      	adds	r3, #8
 8006baa:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8006bae:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f000 feea 	bl	800798c <Osal_MemCpy>
				Local_Name_Length);
		index_input += Local_Name_Length;
 8006bb8:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 8006bbc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006bc0:	4413      	add	r3, r2
 8006bc2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		{
			cp1->Service_Uuid_length = Service_Uuid_length;
 8006bc6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bca:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006bce:	701a      	strb	r2, [r3, #0]
		}
		index_input += 1;
 8006bd0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		Osal_MemCpy((void*) &cp1->Service_Uuid_List,
 8006bda:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8006bde:	3301      	adds	r3, #1
 8006be0:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8006be4:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 fecf 	bl	800798c <Osal_MemCpy>
				(const void*) Service_Uuid_List, Service_Uuid_length);
		index_input += Service_Uuid_length;
 8006bee:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 8006bf2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		{
			cp2->Slave_Conn_Interval_Min = Slave_Conn_Interval_Min;
 8006bfc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c00:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8006c04:	801a      	strh	r2, [r3, #0]
		}
		index_input += 2;
 8006c06:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c0a:	3302      	adds	r3, #2
 8006c0c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
		{
			cp2->Slave_Conn_Interval_Max = Slave_Conn_Interval_Max;
 8006c10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006c14:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8006c18:	805a      	strh	r2, [r3, #2]
		}
		index_input += 2;
 8006c1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c1e:	3302      	adds	r3, #2
 8006c20:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	}
	Osal_MemSet(&rq, 0, sizeof(rq));
 8006c24:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c28:	2218      	movs	r2, #24
 8006c2a:	2100      	movs	r1, #0
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 febd 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8006c32:	233f      	movs	r3, #63	; 0x3f
 8006c34:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x083;
 8006c38:	2383      	movs	r3, #131	; 0x83
 8006c3a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8006c3e:	f107 0310 	add.w	r3, r7, #16
 8006c42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 8006c46:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006c4a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 8006c4e:	f107 030f 	add.w	r3, r7, #15
 8006c52:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 8006c5c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006c60:	2100      	movs	r1, #0
 8006c62:	4618      	mov	r0, r3
 8006c64:	f001 f856 	bl	8007d14 <hci_send_req>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da01      	bge.n	8006c72 <aci_gap_set_discoverable+0x1ac>
		return BLE_STATUS_TIMEOUT;
 8006c6e:	23ff      	movs	r3, #255	; 0xff
 8006c70:	e002      	b.n	8006c78 <aci_gap_set_discoverable+0x1b2>
	return status;
 8006c72:	f107 030f 	add.w	r3, r7, #15
 8006c76:	781b      	ldrb	r3, [r3, #0]
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bdb0      	pop	{r4, r5, r7, pc}

08006c82 <aci_gap_set_io_capability>:
	if (hci_send_req(&rq, FALSE) < 0)
		return BLE_STATUS_TIMEOUT;
	return status;
}

tBleStatus aci_gap_set_io_capability(uint8_t IO_Capability) {
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b0cc      	sub	sp, #304	; 0x130
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	4602      	mov	r2, r0
 8006c8a:	1dfb      	adds	r3, r7, #7
 8006c8c:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_gap_set_io_capability_cp0 *cp0 =
 8006c8e:	f107 0310 	add.w	r3, r7, #16
 8006c92:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			(aci_gap_set_io_capability_cp0*) (cmd_buffer);
	tBleStatus status = 0;
 8006c96:	f107 030f 	add.w	r3, r7, #15
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->IO_Capability = IO_Capability;
 8006ca4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ca8:	1dfa      	adds	r2, r7, #7
 8006caa:	7812      	ldrb	r2, [r2, #0]
 8006cac:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 8006cae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 8006cb8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cbc:	2218      	movs	r2, #24
 8006cbe:	2100      	movs	r1, #0
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fe73 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8006cc6:	233f      	movs	r3, #63	; 0x3f
 8006cc8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x085;
 8006ccc:	2385      	movs	r3, #133	; 0x85
 8006cce:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8006cd2:	f107 0310 	add.w	r3, r7, #16
 8006cd6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 8006cda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006cde:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 8006ce2:	f107 030f 	add.w	r3, r7, #15
 8006ce6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 8006cea:	2301      	movs	r3, #1
 8006cec:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 8006cf0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f001 f80c 	bl	8007d14 <hci_send_req>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	da01      	bge.n	8006d06 <aci_gap_set_io_capability+0x84>
		return BLE_STATUS_TIMEOUT;
 8006d02:	23ff      	movs	r3, #255	; 0xff
 8006d04:	e002      	b.n	8006d0c <aci_gap_set_io_capability+0x8a>
	return status;
 8006d06:	f107 030f 	add.w	r3, r7, #15
 8006d0a:	781b      	ldrb	r3, [r3, #0]
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <aci_gap_set_authentication_requirement>:

tBleStatus aci_gap_set_authentication_requirement(uint8_t Bonding_Mode,
		uint8_t MITM_Mode, uint8_t SC_Support,
		uint8_t KeyPress_Notification_Support, uint8_t Min_Encryption_Key_Size,
		uint8_t Max_Encryption_Key_Size, uint8_t Use_Fixed_Pin,
		uint32_t Fixed_Pin, uint8_t Identity_Address_Type) {
 8006d16:	b5b0      	push	{r4, r5, r7, lr}
 8006d18:	b0cc      	sub	sp, #304	; 0x130
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	4605      	mov	r5, r0
 8006d1e:	460c      	mov	r4, r1
 8006d20:	4610      	mov	r0, r2
 8006d22:	4619      	mov	r1, r3
 8006d24:	1dfb      	adds	r3, r7, #7
 8006d26:	462a      	mov	r2, r5
 8006d28:	701a      	strb	r2, [r3, #0]
 8006d2a:	1dbb      	adds	r3, r7, #6
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	1d7b      	adds	r3, r7, #5
 8006d32:	4602      	mov	r2, r0
 8006d34:	701a      	strb	r2, [r3, #0]
 8006d36:	1d3b      	adds	r3, r7, #4
 8006d38:	460a      	mov	r2, r1
 8006d3a:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_gap_set_authentication_requirement_cp0 *cp0 =
 8006d3c:	f107 0310 	add.w	r3, r7, #16
 8006d40:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			(aci_gap_set_authentication_requirement_cp0*) (cmd_buffer);
	tBleStatus status = 0;
 8006d44:	f107 030f 	add.w	r3, r7, #15
 8006d48:	2200      	movs	r2, #0
 8006d4a:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Bonding_Mode = Bonding_Mode;
 8006d52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d56:	1dfa      	adds	r2, r7, #7
 8006d58:	7812      	ldrb	r2, [r2, #0]
 8006d5a:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 8006d5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d60:	3301      	adds	r3, #1
 8006d62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->MITM_Mode = MITM_Mode;
 8006d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d6a:	1dba      	adds	r2, r7, #6
 8006d6c:	7812      	ldrb	r2, [r2, #0]
 8006d6e:	705a      	strb	r2, [r3, #1]
	index_input += 1;
 8006d70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d74:	3301      	adds	r3, #1
 8006d76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->SC_Support = SC_Support;
 8006d7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d7e:	1d7a      	adds	r2, r7, #5
 8006d80:	7812      	ldrb	r2, [r2, #0]
 8006d82:	709a      	strb	r2, [r3, #2]
	index_input += 1;
 8006d84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d88:	3301      	adds	r3, #1
 8006d8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 8006d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006d92:	1d3a      	adds	r2, r7, #4
 8006d94:	7812      	ldrb	r2, [r2, #0]
 8006d96:	70da      	strb	r2, [r3, #3]
	index_input += 1;
 8006d98:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006d9c:	3301      	adds	r3, #1
 8006d9e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 8006da2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006da6:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8006daa:	711a      	strb	r2, [r3, #4]
	index_input += 1;
 8006dac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006db0:	3301      	adds	r3, #1
 8006db2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 8006db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dba:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8006dbe:	715a      	strb	r2, [r3, #5]
	index_input += 1;
 8006dc0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 8006dca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006dce:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8006dd2:	719a      	strb	r2, [r3, #6]
	index_input += 1;
 8006dd4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dd8:	3301      	adds	r3, #1
 8006dda:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Fixed_Pin = Fixed_Pin;
 8006dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006de2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8006de6:	f8c3 2007 	str.w	r2, [r3, #7]
	index_input += 4;
 8006dea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006dee:	3304      	adds	r3, #4
 8006df0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Identity_Address_Type = Identity_Address_Type;
 8006df4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006df8:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8006dfc:	72da      	strb	r2, [r3, #11]
	index_input += 1;
 8006dfe:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e02:	3301      	adds	r3, #1
 8006e04:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 8006e08:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e0c:	2218      	movs	r2, #24
 8006e0e:	2100      	movs	r1, #0
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fdcb 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8006e16:	233f      	movs	r3, #63	; 0x3f
 8006e18:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x086;
 8006e1c:	2386      	movs	r3, #134	; 0x86
 8006e1e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 8006e2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 8006e32:	f107 030f 	add.w	r3, r7, #15
 8006e36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 8006e40:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 ff64 	bl	8007d14 <hci_send_req>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	da01      	bge.n	8006e56 <aci_gap_set_authentication_requirement+0x140>
		return BLE_STATUS_TIMEOUT;
 8006e52:	23ff      	movs	r3, #255	; 0xff
 8006e54:	e002      	b.n	8006e5c <aci_gap_set_authentication_requirement+0x146>
	return status;
 8006e56:	f107 030f 	add.w	r3, r7, #15
 8006e5a:	781b      	ldrb	r3, [r3, #0]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bdb0      	pop	{r4, r5, r7, pc}

08006e66 <aci_gap_pass_key_resp>:
	if (hci_send_req(&rq, FALSE) < 0)
		return BLE_STATUS_TIMEOUT;
	return status;
}

tBleStatus aci_gap_pass_key_resp(uint16_t Connection_Handle, uint32_t Pass_Key) {
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b0cc      	sub	sp, #304	; 0x130
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	463b      	mov	r3, r7
 8006e70:	6019      	str	r1, [r3, #0]
 8006e72:	1dbb      	adds	r3, r7, #6
 8006e74:	801a      	strh	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*) (cmd_buffer);
 8006e76:	f107 0310 	add.w	r3, r7, #16
 8006e7a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	tBleStatus status = 0;
 8006e7e:	f107 030f 	add.w	r3, r7, #15
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 8006e86:	2300      	movs	r3, #0
 8006e88:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Connection_Handle = Connection_Handle;
 8006e8c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006e90:	1dba      	adds	r2, r7, #6
 8006e92:	8812      	ldrh	r2, [r2, #0]
 8006e94:	801a      	strh	r2, [r3, #0]
	index_input += 2;
 8006e96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006e9a:	3302      	adds	r3, #2
 8006e9c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Pass_Key = Pass_Key;
 8006ea0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006ea4:	463a      	mov	r2, r7
 8006ea6:	6812      	ldr	r2, [r2, #0]
 8006ea8:	f8c3 2002 	str.w	r2, [r3, #2]
	index_input += 4;
 8006eac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 8006eb6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006eba:	2218      	movs	r2, #24
 8006ebc:	2100      	movs	r1, #0
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fd74 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8006ec4:	233f      	movs	r3, #63	; 0x3f
 8006ec6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x088;
 8006eca:	2388      	movs	r3, #136	; 0x88
 8006ecc:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8006ed0:	f107 0310 	add.w	r3, r7, #16
 8006ed4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 8006ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006edc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 8006ee0:	f107 030f 	add.w	r3, r7, #15
 8006ee4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 8006eee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f000 ff0d 	bl	8007d14 <hci_send_req>
 8006efa:	4603      	mov	r3, r0
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	da01      	bge.n	8006f04 <aci_gap_pass_key_resp+0x9e>
		return BLE_STATUS_TIMEOUT;
 8006f00:	23ff      	movs	r3, #255	; 0xff
 8006f02:	e002      	b.n	8006f0a <aci_gap_pass_key_resp+0xa4>
	return status;
 8006f04:	f107 030f 	add.w	r3, r7, #15
 8006f08:	781b      	ldrb	r3, [r3, #0]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <aci_gap_init>:
	return status;
}

tBleStatus aci_gap_init(uint8_t Role, uint8_t privacy_enabled,
		uint8_t device_name_char_len, uint16_t *Service_Handle,
		uint16_t *Dev_Name_Char_Handle, uint16_t *Appearance_Char_Handle) {
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b0cd      	sub	sp, #308	; 0x134
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	463a      	mov	r2, r7
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	1dfb      	adds	r3, r7, #7
 8006f26:	4622      	mov	r2, r4
 8006f28:	701a      	strb	r2, [r3, #0]
 8006f2a:	1dbb      	adds	r3, r7, #6
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	1d7b      	adds	r3, r7, #5
 8006f32:	460a      	mov	r2, r1
 8006f34:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*) (cmd_buffer);
 8006f36:	f107 0310 	add.w	r3, r7, #16
 8006f3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	aci_gap_init_rp0 resp;
	Osal_MemSet(&resp, 0, sizeof(resp));
 8006f3e:	f107 0308 	add.w	r3, r7, #8
 8006f42:	2207      	movs	r2, #7
 8006f44:	2100      	movs	r1, #0
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 fd30 	bl	80079ac <Osal_MemSet>
	int index_input = 0;
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Role = Role;
 8006f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f56:	1dfa      	adds	r2, r7, #7
 8006f58:	7812      	ldrb	r2, [r2, #0]
 8006f5a:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 8006f5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f60:	3301      	adds	r3, #1
 8006f62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->privacy_enabled = privacy_enabled;
 8006f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f6a:	1dba      	adds	r2, r7, #6
 8006f6c:	7812      	ldrb	r2, [r2, #0]
 8006f6e:	705a      	strb	r2, [r3, #1]
	index_input += 1;
 8006f70:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f74:	3301      	adds	r3, #1
 8006f76:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->device_name_char_len = device_name_char_len;
 8006f7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006f7e:	1d7a      	adds	r2, r7, #5
 8006f80:	7812      	ldrb	r2, [r2, #0]
 8006f82:	709a      	strb	r2, [r3, #2]
	index_input += 1;
 8006f84:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006f88:	3301      	adds	r3, #1
 8006f8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 8006f8e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006f92:	2218      	movs	r2, #24
 8006f94:	2100      	movs	r1, #0
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fd08 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8006f9c:	233f      	movs	r3, #63	; 0x3f
 8006f9e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x08a;
 8006fa2:	238a      	movs	r3, #138	; 0x8a
 8006fa4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8006fa8:	f107 0310 	add.w	r3, r7, #16
 8006fac:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 8006fb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006fb4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &resp;
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = sizeof(resp);
 8006fc0:	2307      	movs	r3, #7
 8006fc2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 8006fc6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006fca:	2100      	movs	r1, #0
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 fea1 	bl	8007d14 <hci_send_req>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	da01      	bge.n	8006fdc <aci_gap_init+0xc8>
		return BLE_STATUS_TIMEOUT;
 8006fd8:	23ff      	movs	r3, #255	; 0xff
 8006fda:	e021      	b.n	8007020 <aci_gap_init+0x10c>
	if (resp.Status)
 8006fdc:	f107 0308 	add.w	r3, r7, #8
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <aci_gap_init+0xda>
		return resp.Status;
 8006fe6:	f107 0308 	add.w	r3, r7, #8
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	e018      	b.n	8007020 <aci_gap_init+0x10c>
	*Service_Handle = resp.Service_Handle;
 8006fee:	f107 0308 	add.w	r3, r7, #8
 8006ff2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8006ff6:	b29a      	uxth	r2, r3
 8006ff8:	463b      	mov	r3, r7
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	801a      	strh	r2, [r3, #0]
	*Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 8006ffe:	f107 0308 	add.w	r3, r7, #8
 8007002:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8007006:	b29a      	uxth	r2, r3
 8007008:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800700c:	801a      	strh	r2, [r3, #0]
	*Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800700e:	f107 0308 	add.w	r3, r7, #8
 8007012:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 8007016:	b29a      	uxth	r2, r3
 8007018:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800701c:	801a      	strh	r2, [r3, #0]
	return BLE_STATUS_SUCCESS;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007026:	46bd      	mov	sp, r7
 8007028:	bd90      	pop	{r4, r7, pc}

0800702a <aci_gap_update_adv_data>:
	if (hci_send_req(&rq, FALSE) < 0)
		return BLE_STATUS_TIMEOUT;
	return status;
}

tBleStatus aci_gap_update_adv_data(uint8_t AdvDataLen, const uint8_t *AdvData) {
 800702a:	b580      	push	{r7, lr}
 800702c:	b0cc      	sub	sp, #304	; 0x130
 800702e:	af00      	add	r7, sp, #0
 8007030:	4602      	mov	r2, r0
 8007032:	463b      	mov	r3, r7
 8007034:	6019      	str	r1, [r3, #0]
 8007036:	1dfb      	adds	r3, r7, #7
 8007038:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_gap_update_adv_data_cp0 *cp0 =
 800703a:	f107 0310 	add.w	r3, r7, #16
 800703e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			(aci_gap_update_adv_data_cp0*) (cmd_buffer);
	tBleStatus status = 0;
 8007042:	f107 030f 	add.w	r3, r7, #15
 8007046:	2200      	movs	r2, #0
 8007048:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 800704a:	2300      	movs	r3, #0
 800704c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->AdvDataLen = AdvDataLen;
 8007050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007054:	1dfa      	adds	r2, r7, #7
 8007056:	7812      	ldrb	r2, [r2, #0]
 8007058:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 800705a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800705e:	3301      	adds	r3, #1
 8007060:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemCpy((void*) &cp0->AdvData, (const void*) AdvData, AdvDataLen);
 8007064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007068:	1c58      	adds	r0, r3, #1
 800706a:	1dfb      	adds	r3, r7, #7
 800706c:	781a      	ldrb	r2, [r3, #0]
 800706e:	463b      	mov	r3, r7
 8007070:	6819      	ldr	r1, [r3, #0]
 8007072:	f000 fc8b 	bl	800798c <Osal_MemCpy>
	index_input += AdvDataLen;
 8007076:	1dfb      	adds	r3, r7, #7
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800707e:	4413      	add	r3, r2
 8007080:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 8007084:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007088:	2218      	movs	r2, #24
 800708a:	2100      	movs	r1, #0
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fc8d 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8007092:	233f      	movs	r3, #63	; 0x3f
 8007094:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x08e;
 8007098:	238e      	movs	r3, #142	; 0x8e
 800709a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 800709e:	f107 0310 	add.w	r3, r7, #16
 80070a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 80070a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80070aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 80070ae:	f107 030f 	add.w	r3, r7, #15
 80070b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 80070b6:	2301      	movs	r3, #1
 80070b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 80070bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80070c0:	2100      	movs	r1, #0
 80070c2:	4618      	mov	r0, r3
 80070c4:	f000 fe26 	bl	8007d14 <hci_send_req>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	da01      	bge.n	80070d2 <aci_gap_update_adv_data+0xa8>
		return BLE_STATUS_TIMEOUT;
 80070ce:	23ff      	movs	r3, #255	; 0xff
 80070d0:	e002      	b.n	80070d8 <aci_gap_update_adv_data+0xae>
	return status;
 80070d2:	f107 030f 	add.w	r3, r7, #15
 80070d6:	781b      	ldrb	r3, [r3, #0]
}
 80070d8:	4618      	mov	r0, r3
 80070da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <aci_gap_configure_whitelist>:
	if (hci_send_req(&rq, FALSE) < 0)
		return BLE_STATUS_TIMEOUT;
	return status;
}

tBleStatus aci_gap_configure_whitelist(void) {
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b088      	sub	sp, #32
 80070e6:	af00      	add	r7, sp, #0
	struct hci_request rq;
	tBleStatus status = 0;
 80070e8:	2300      	movs	r3, #0
 80070ea:	71fb      	strb	r3, [r7, #7]
	Osal_MemSet(&rq, 0, sizeof(rq));
 80070ec:	f107 0308 	add.w	r3, r7, #8
 80070f0:	2218      	movs	r2, #24
 80070f2:	2100      	movs	r1, #0
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 fc59 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 80070fa:	233f      	movs	r3, #63	; 0x3f
 80070fc:	813b      	strh	r3, [r7, #8]
	rq.ocf = 0x092;
 80070fe:	2392      	movs	r3, #146	; 0x92
 8007100:	817b      	strh	r3, [r7, #10]
	rq.rparam = &status;
 8007102:	1dfb      	adds	r3, r7, #7
 8007104:	61bb      	str	r3, [r7, #24]
	rq.rlen = 1;
 8007106:	2301      	movs	r3, #1
 8007108:	61fb      	str	r3, [r7, #28]
	if (hci_send_req(&rq, FALSE) < 0)
 800710a:	f107 0308 	add.w	r3, r7, #8
 800710e:	2100      	movs	r1, #0
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fdff 	bl	8007d14 <hci_send_req>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	da01      	bge.n	8007120 <aci_gap_configure_whitelist+0x3e>
		return BLE_STATUS_TIMEOUT;
 800711c:	23ff      	movs	r3, #255	; 0xff
 800711e:	e000      	b.n	8007122 <aci_gap_configure_whitelist+0x40>
	return status;
 8007120:	79fb      	ldrb	r3, [r7, #7]
}
 8007122:	4618      	mov	r0, r3
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <aci_gap_numeric_comparison_value_confirm_yesno>:
		return BLE_STATUS_TIMEOUT;
	return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno(
		uint16_t Connection_Handle, uint8_t Confirm_Yes_No) {
 800712a:	b580      	push	{r7, lr}
 800712c:	b0cc      	sub	sp, #304	; 0x130
 800712e:	af00      	add	r7, sp, #0
 8007130:	4602      	mov	r2, r0
 8007132:	1dbb      	adds	r3, r7, #6
 8007134:	801a      	strh	r2, [r3, #0]
 8007136:	1d7b      	adds	r3, r7, #5
 8007138:	460a      	mov	r2, r1
 800713a:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 =
 800713c:	f107 0310 	add.w	r3, r7, #16
 8007140:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			(aci_gap_numeric_comparison_value_confirm_yesno_cp0*) (cmd_buffer);
	tBleStatus status = 0;
 8007144:	f107 030f 	add.w	r3, r7, #15
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 800714c:	2300      	movs	r3, #0
 800714e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Connection_Handle = Connection_Handle;
 8007152:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007156:	1dba      	adds	r2, r7, #6
 8007158:	8812      	ldrh	r2, [r2, #0]
 800715a:	801a      	strh	r2, [r3, #0]
	index_input += 2;
 800715c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007160:	3302      	adds	r3, #2
 8007162:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Confirm_Yes_No = Confirm_Yes_No;
 8007166:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800716a:	1d7a      	adds	r2, r7, #5
 800716c:	7812      	ldrb	r2, [r2, #0]
 800716e:	709a      	strb	r2, [r3, #2]
	index_input += 1;
 8007170:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007174:	3301      	adds	r3, #1
 8007176:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 800717a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800717e:	2218      	movs	r2, #24
 8007180:	2100      	movs	r1, #0
 8007182:	4618      	mov	r0, r3
 8007184:	f000 fc12 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8007188:	233f      	movs	r3, #63	; 0x3f
 800718a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x0a5;
 800718e:	23a5      	movs	r3, #165	; 0xa5
 8007190:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8007194:	f107 0310 	add.w	r3, r7, #16
 8007198:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 800719c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80071a0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 80071a4:	f107 030f 	add.w	r3, r7, #15
 80071a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 80071ac:	2301      	movs	r3, #1
 80071ae:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 80071b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fdab 	bl	8007d14 <hci_send_req>
 80071be:	4603      	mov	r3, r0
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	da01      	bge.n	80071c8 <aci_gap_numeric_comparison_value_confirm_yesno+0x9e>
		return BLE_STATUS_TIMEOUT;
 80071c4:	23ff      	movs	r3, #255	; 0xff
 80071c6:	e002      	b.n	80071ce <aci_gap_numeric_comparison_value_confirm_yesno+0xa4>
	return status;
 80071c8:	f107 030f 	add.w	r3, r7, #15
 80071cc:	781b      	ldrb	r3, [r3, #0]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}

080071d8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b088      	sub	sp, #32
 80071dc:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80071de:	2300      	movs	r3, #0
 80071e0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80071e2:	f107 0308 	add.w	r3, r7, #8
 80071e6:	2218      	movs	r2, #24
 80071e8:	2100      	movs	r1, #0
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 fbde 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80071f0:	233f      	movs	r3, #63	; 0x3f
 80071f2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80071f4:	f240 1301 	movw	r3, #257	; 0x101
 80071f8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80071fa:	1dfb      	adds	r3, r7, #7
 80071fc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80071fe:	2301      	movs	r3, #1
 8007200:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007202:	f107 0308 	add.w	r3, r7, #8
 8007206:	2100      	movs	r1, #0
 8007208:	4618      	mov	r0, r3
 800720a:	f000 fd83 	bl	8007d14 <hci_send_req>
 800720e:	4603      	mov	r3, r0
 8007210:	2b00      	cmp	r3, #0
 8007212:	da01      	bge.n	8007218 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 8007214:	23ff      	movs	r3, #255	; 0xff
 8007216:	e000      	b.n	800721a <aci_gatt_init+0x42>
  return status;
 8007218:	79fb      	ldrb	r3, [r7, #7]
}
 800721a:	4618      	mov	r0, r3
 800721c:	3720      	adds	r7, #32
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}

08007222 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 8007222:	b590      	push	{r4, r7, lr}
 8007224:	b0cf      	sub	sp, #316	; 0x13c
 8007226:	af00      	add	r7, sp, #0
 8007228:	4604      	mov	r4, r0
 800722a:	4638      	mov	r0, r7
 800722c:	6001      	str	r1, [r0, #0]
 800722e:	4610      	mov	r0, r2
 8007230:	4619      	mov	r1, r3
 8007232:	1dfb      	adds	r3, r7, #7
 8007234:	4622      	mov	r2, r4
 8007236:	701a      	strb	r2, [r3, #0]
 8007238:	1dbb      	adds	r3, r7, #6
 800723a:	4602      	mov	r2, r0
 800723c:	701a      	strb	r2, [r3, #0]
 800723e:	1d7b      	adds	r3, r7, #5
 8007240:	460a      	mov	r2, r1
 8007242:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8007244:	f107 0310 	add.w	r3, r7, #16
 8007248:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800724c:	1dfb      	adds	r3, r7, #7
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b01      	cmp	r3, #1
 8007252:	d007      	beq.n	8007264 <aci_gatt_add_service+0x42>
 8007254:	1dfb      	adds	r3, r7, #7
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b02      	cmp	r3, #2
 800725a:	d101      	bne.n	8007260 <aci_gatt_add_service+0x3e>
 800725c:	2311      	movs	r3, #17
 800725e:	e002      	b.n	8007266 <aci_gatt_add_service+0x44>
 8007260:	2301      	movs	r3, #1
 8007262:	e000      	b.n	8007266 <aci_gatt_add_service+0x44>
 8007264:	2303      	movs	r3, #3
 8007266:	f107 0210 	add.w	r2, r7, #16
 800726a:	4413      	add	r3, r2
 800726c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8007270:	f107 030c 	add.w	r3, r7, #12
 8007274:	2203      	movs	r2, #3
 8007276:	2100      	movs	r1, #0
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fb97 	bl	80079ac <Osal_MemSet>
  int index_input = 0;
 800727e:	2300      	movs	r3, #0
 8007280:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8007284:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007288:	1dfa      	adds	r2, r7, #7
 800728a:	7812      	ldrb	r2, [r2, #0]
 800728c:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800728e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007292:	3301      	adds	r3, #1
 8007294:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8007298:	1dfb      	adds	r3, r7, #7
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	2b01      	cmp	r3, #1
 800729e:	d002      	beq.n	80072a6 <aci_gatt_add_service+0x84>
 80072a0:	2b02      	cmp	r3, #2
 80072a2:	d004      	beq.n	80072ae <aci_gatt_add_service+0x8c>
 80072a4:	e007      	b.n	80072b6 <aci_gatt_add_service+0x94>
    {
      case 1: size = 2; break;
 80072a6:	2302      	movs	r3, #2
 80072a8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80072ac:	e005      	b.n	80072ba <aci_gatt_add_service+0x98>
      case 2: size = 16; break;
 80072ae:	2310      	movs	r3, #16
 80072b0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 80072b4:	e001      	b.n	80072ba <aci_gatt_add_service+0x98>
      default: return BLE_STATUS_ERROR;
 80072b6:	2347      	movs	r3, #71	; 0x47
 80072b8:	e05d      	b.n	8007376 <aci_gatt_add_service+0x154>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 80072ba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80072be:	1c58      	adds	r0, r3, #1
 80072c0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 80072c4:	463b      	mov	r3, r7
 80072c6:	6819      	ldr	r1, [r3, #0]
 80072c8:	f000 fb60 	bl	800798c <Osal_MemCpy>
    index_input += size;
 80072cc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 80072d0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80072d4:	4413      	add	r3, r2
 80072d6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 80072da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072de:	1dba      	adds	r2, r7, #6
 80072e0:	7812      	ldrb	r2, [r2, #0]
 80072e2:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80072e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072e8:	3301      	adds	r3, #1
 80072ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 80072ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80072f2:	1d7a      	adds	r2, r7, #5
 80072f4:	7812      	ldrb	r2, [r2, #0]
 80072f6:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 80072f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80072fc:	3301      	adds	r3, #1
 80072fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007302:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007306:	2218      	movs	r2, #24
 8007308:	2100      	movs	r1, #0
 800730a:	4618      	mov	r0, r3
 800730c:	f000 fb4e 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8007310:	233f      	movs	r3, #63	; 0x3f
 8007312:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8007316:	f44f 7381 	mov.w	r3, #258	; 0x102
 800731a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800731e:	f107 0310 	add.w	r3, r7, #16
 8007322:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007326:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800732a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800732e:	f107 030c 	add.w	r3, r7, #12
 8007332:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8007336:	2303      	movs	r3, #3
 8007338:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800733c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007340:	2100      	movs	r1, #0
 8007342:	4618      	mov	r0, r3
 8007344:	f000 fce6 	bl	8007d14 <hci_send_req>
 8007348:	4603      	mov	r3, r0
 800734a:	2b00      	cmp	r3, #0
 800734c:	da01      	bge.n	8007352 <aci_gatt_add_service+0x130>
    return BLE_STATUS_TIMEOUT;
 800734e:	23ff      	movs	r3, #255	; 0xff
 8007350:	e011      	b.n	8007376 <aci_gatt_add_service+0x154>
  if ( resp.Status )
 8007352:	f107 030c 	add.w	r3, r7, #12
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d003      	beq.n	8007364 <aci_gatt_add_service+0x142>
    return resp.Status;
 800735c:	f107 030c 	add.w	r3, r7, #12
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	e008      	b.n	8007376 <aci_gatt_add_service+0x154>
  *Service_Handle = resp.Service_Handle;
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800736c:	b29a      	uxth	r2, r3
 800736e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8007372:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800737c:	46bd      	mov	sp, r7
 800737e:	bd90      	pop	{r4, r7, pc}

08007380 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8007380:	b590      	push	{r4, r7, lr}
 8007382:	b0d1      	sub	sp, #324	; 0x144
 8007384:	af00      	add	r7, sp, #0
 8007386:	4604      	mov	r4, r0
 8007388:	4608      	mov	r0, r1
 800738a:	f107 0108 	add.w	r1, r7, #8
 800738e:	600a      	str	r2, [r1, #0]
 8007390:	4619      	mov	r1, r3
 8007392:	f107 030e 	add.w	r3, r7, #14
 8007396:	4622      	mov	r2, r4
 8007398:	801a      	strh	r2, [r3, #0]
 800739a:	f107 030d 	add.w	r3, r7, #13
 800739e:	4602      	mov	r2, r0
 80073a0:	701a      	strb	r2, [r3, #0]
 80073a2:	1dbb      	adds	r3, r7, #6
 80073a4:	460a      	mov	r2, r1
 80073a6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 80073a8:	f107 0318 	add.w	r3, r7, #24
 80073ac:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 80073b0:	f107 030d 	add.w	r3, r7, #13
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d008      	beq.n	80073cc <aci_gatt_add_char+0x4c>
 80073ba:	f107 030d 	add.w	r3, r7, #13
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b02      	cmp	r3, #2
 80073c2:	d101      	bne.n	80073c8 <aci_gatt_add_char+0x48>
 80073c4:	2313      	movs	r3, #19
 80073c6:	e002      	b.n	80073ce <aci_gatt_add_char+0x4e>
 80073c8:	2303      	movs	r3, #3
 80073ca:	e000      	b.n	80073ce <aci_gatt_add_char+0x4e>
 80073cc:	2305      	movs	r3, #5
 80073ce:	f107 0218 	add.w	r2, r7, #24
 80073d2:	4413      	add	r3, r2
 80073d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80073d8:	f107 0314 	add.w	r3, r7, #20
 80073dc:	2203      	movs	r2, #3
 80073de:	2100      	movs	r1, #0
 80073e0:	4618      	mov	r0, r3
 80073e2:	f000 fae3 	bl	80079ac <Osal_MemSet>
  int index_input = 0;
 80073e6:	2300      	movs	r3, #0
 80073e8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 80073ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80073f0:	f107 020e 	add.w	r2, r7, #14
 80073f4:	8812      	ldrh	r2, [r2, #0]
 80073f6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80073f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80073fc:	3302      	adds	r3, #2
 80073fe:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8007402:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007406:	f107 020d 	add.w	r2, r7, #13
 800740a:	7812      	ldrb	r2, [r2, #0]
 800740c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800740e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007412:	3301      	adds	r3, #1
 8007414:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8007418:	f107 030d 	add.w	r3, r7, #13
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d002      	beq.n	8007428 <aci_gatt_add_char+0xa8>
 8007422:	2b02      	cmp	r3, #2
 8007424:	d004      	beq.n	8007430 <aci_gatt_add_char+0xb0>
 8007426:	e007      	b.n	8007438 <aci_gatt_add_char+0xb8>
    {
      case 1: size = 2; break;
 8007428:	2302      	movs	r3, #2
 800742a:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800742e:	e005      	b.n	800743c <aci_gatt_add_char+0xbc>
      case 2: size = 16; break;
 8007430:	2310      	movs	r3, #16
 8007432:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8007436:	e001      	b.n	800743c <aci_gatt_add_char+0xbc>
      default: return BLE_STATUS_ERROR;
 8007438:	2347      	movs	r3, #71	; 0x47
 800743a:	e086      	b.n	800754a <aci_gatt_add_char+0x1ca>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800743c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8007440:	1cd8      	adds	r0, r3, #3
 8007442:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8007446:	f107 0308 	add.w	r3, r7, #8
 800744a:	6819      	ldr	r1, [r3, #0]
 800744c:	f000 fa9e 	bl	800798c <Osal_MemCpy>
    index_input += size;
 8007450:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8007454:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8007458:	4413      	add	r3, r2
 800745a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800745e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007462:	1dba      	adds	r2, r7, #6
 8007464:	8812      	ldrh	r2, [r2, #0]
 8007466:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8007468:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800746c:	3302      	adds	r3, #2
 800746e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8007472:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8007476:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800747a:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800747c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007480:	3301      	adds	r3, #1
 8007482:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8007486:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800748a:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800748e:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8007490:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8007494:	3301      	adds	r3, #1
 8007496:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800749a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800749e:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 80074a2:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 80074a4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074a8:	3301      	adds	r3, #1
 80074aa:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 80074ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074b2:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 80074b6:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 80074b8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074bc:	3301      	adds	r3, #1
 80074be:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 80074c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80074c6:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 80074ca:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 80074cc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074d0:	3301      	adds	r3, #1
 80074d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80074d6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80074da:	2218      	movs	r2, #24
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fa64 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 80074e4:	233f      	movs	r3, #63	; 0x3f
 80074e6:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 80074ea:	f44f 7382 	mov.w	r3, #260	; 0x104
 80074ee:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 80074f2:	f107 0318 	add.w	r3, r7, #24
 80074f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 80074fa:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80074fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8007502:	f107 0314 	add.w	r3, r7, #20
 8007506:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800750a:	2303      	movs	r3, #3
 800750c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8007510:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8007514:	2100      	movs	r1, #0
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fbfc 	bl	8007d14 <hci_send_req>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	da01      	bge.n	8007526 <aci_gatt_add_char+0x1a6>
    return BLE_STATUS_TIMEOUT;
 8007522:	23ff      	movs	r3, #255	; 0xff
 8007524:	e011      	b.n	800754a <aci_gatt_add_char+0x1ca>
  if ( resp.Status )
 8007526:	f107 0314 	add.w	r3, r7, #20
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d003      	beq.n	8007538 <aci_gatt_add_char+0x1b8>
    return resp.Status;
 8007530:	f107 0314 	add.w	r3, r7, #20
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	e008      	b.n	800754a <aci_gatt_add_char+0x1ca>
  *Char_Handle = resp.Char_Handle;
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007540:	b29a      	uxth	r2, r3
 8007542:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8007546:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8007548:	2300      	movs	r3, #0
}
 800754a:	4618      	mov	r0, r3
 800754c:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8007550:	46bd      	mov	sp, r7
 8007552:	bd90      	pop	{r4, r7, pc}

08007554 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8007554:	b5b0      	push	{r4, r5, r7, lr}
 8007556:	b0cc      	sub	sp, #304	; 0x130
 8007558:	af00      	add	r7, sp, #0
 800755a:	4605      	mov	r5, r0
 800755c:	460c      	mov	r4, r1
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	1dbb      	adds	r3, r7, #6
 8007564:	462a      	mov	r2, r5
 8007566:	801a      	strh	r2, [r3, #0]
 8007568:	1d3b      	adds	r3, r7, #4
 800756a:	4622      	mov	r2, r4
 800756c:	801a      	strh	r2, [r3, #0]
 800756e:	1cfb      	adds	r3, r7, #3
 8007570:	4602      	mov	r2, r0
 8007572:	701a      	strb	r2, [r3, #0]
 8007574:	1cbb      	adds	r3, r7, #2
 8007576:	460a      	mov	r2, r1
 8007578:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800757a:	f107 0310 	add.w	r3, r7, #16
 800757e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8007582:	f107 030f 	add.w	r3, r7, #15
 8007586:	2200      	movs	r2, #0
 8007588:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800758a:	2300      	movs	r3, #0
 800758c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8007590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007594:	1dba      	adds	r2, r7, #6
 8007596:	8812      	ldrh	r2, [r2, #0]
 8007598:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800759a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800759e:	3302      	adds	r3, #2
 80075a0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80075a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075a8:	1d3a      	adds	r2, r7, #4
 80075aa:	8812      	ldrh	r2, [r2, #0]
 80075ac:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80075ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075b2:	3302      	adds	r3, #2
 80075b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 80075b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075bc:	1cfa      	adds	r2, r7, #3
 80075be:	7812      	ldrb	r2, [r2, #0]
 80075c0:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80075c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075c6:	3301      	adds	r3, #1
 80075c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 80075cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075d0:	1cba      	adds	r2, r7, #2
 80075d2:	7812      	ldrb	r2, [r2, #0]
 80075d4:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 80075d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80075da:	3301      	adds	r3, #1
 80075dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 80075e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80075e4:	1d98      	adds	r0, r3, #6
 80075e6:	1cbb      	adds	r3, r7, #2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80075f0:	f000 f9cc 	bl	800798c <Osal_MemCpy>
  index_input += Char_Value_Length;
 80075f4:	1cbb      	adds	r3, r7, #2
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80075fc:	4413      	add	r3, r2
 80075fe:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8007602:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007606:	2218      	movs	r2, #24
 8007608:	2100      	movs	r1, #0
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f9ce 	bl	80079ac <Osal_MemSet>
  rq.ogf = 0x3f;
 8007610:	233f      	movs	r3, #63	; 0x3f
 8007612:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8007616:	f44f 7383 	mov.w	r3, #262	; 0x106
 800761a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800761e:	f107 0310 	add.w	r3, r7, #16
 8007622:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8007626:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800762a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800762e:	f107 030f 	add.w	r3, r7, #15
 8007632:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8007636:	2301      	movs	r3, #1
 8007638:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800763c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fb66 	bl	8007d14 <hci_send_req>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	da01      	bge.n	8007652 <aci_gatt_update_char_value+0xfe>
    return BLE_STATUS_TIMEOUT;
 800764e:	23ff      	movs	r3, #255	; 0xff
 8007650:	e002      	b.n	8007658 <aci_gatt_update_char_value+0x104>
  return status;
 8007652:	f107 030f 	add.w	r3, r7, #15
 8007656:	781b      	ldrb	r3, [r3, #0]
}
 8007658:	4618      	mov	r0, r3
 800765a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800765e:	46bd      	mov	sp, r7
 8007660:	bdb0      	pop	{r4, r5, r7, pc}

08007662 <aci_hal_write_config_data>:
	*Build_Number = resp.Build_Number;
	return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_write_config_data(uint8_t Offset, uint8_t Length,
		const uint8_t *Value) {
 8007662:	b580      	push	{r7, lr}
 8007664:	b0cc      	sub	sp, #304	; 0x130
 8007666:	af00      	add	r7, sp, #0
 8007668:	463b      	mov	r3, r7
 800766a:	601a      	str	r2, [r3, #0]
 800766c:	1dfb      	adds	r3, r7, #7
 800766e:	4602      	mov	r2, r0
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	1dbb      	adds	r3, r7, #6
 8007674:	460a      	mov	r2, r1
 8007676:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_hal_write_config_data_cp0 *cp0 =
 8007678:	f107 0310 	add.w	r3, r7, #16
 800767c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			(aci_hal_write_config_data_cp0*) (cmd_buffer);
	tBleStatus status = 0;
 8007680:	f107 030f 	add.w	r3, r7, #15
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 8007688:	2300      	movs	r3, #0
 800768a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Offset = Offset;
 800768e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007692:	1dfa      	adds	r2, r7, #7
 8007694:	7812      	ldrb	r2, [r2, #0]
 8007696:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 8007698:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800769c:	3301      	adds	r3, #1
 800769e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Length = Length;
 80076a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076a6:	1dba      	adds	r2, r7, #6
 80076a8:	7812      	ldrb	r2, [r2, #0]
 80076aa:	705a      	strb	r2, [r3, #1]
	index_input += 1;
 80076ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076b0:	3301      	adds	r3, #1
 80076b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemCpy((void*) &cp0->Value, (const void*) Value, Length);
 80076b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80076ba:	1c98      	adds	r0, r3, #2
 80076bc:	1dbb      	adds	r3, r7, #6
 80076be:	781a      	ldrb	r2, [r3, #0]
 80076c0:	463b      	mov	r3, r7
 80076c2:	6819      	ldr	r1, [r3, #0]
 80076c4:	f000 f962 	bl	800798c <Osal_MemCpy>
	index_input += Length;
 80076c8:	1dbb      	adds	r3, r7, #6
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80076d0:	4413      	add	r3, r2
 80076d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 80076d6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80076da:	2218      	movs	r2, #24
 80076dc:	2100      	movs	r1, #0
 80076de:	4618      	mov	r0, r3
 80076e0:	f000 f964 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 80076e4:	233f      	movs	r3, #63	; 0x3f
 80076e6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x00c;
 80076ea:	230c      	movs	r3, #12
 80076ec:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 80076f0:	f107 0310 	add.w	r3, r7, #16
 80076f4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 80076f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80076fc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 8007700:	f107 030f 	add.w	r3, r7, #15
 8007704:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 8007708:	2301      	movs	r3, #1
 800770a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 800770e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007712:	2100      	movs	r1, #0
 8007714:	4618      	mov	r0, r3
 8007716:	f000 fafd 	bl	8007d14 <hci_send_req>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	da01      	bge.n	8007724 <aci_hal_write_config_data+0xc2>
		return BLE_STATUS_TIMEOUT;
 8007720:	23ff      	movs	r3, #255	; 0xff
 8007722:	e002      	b.n	800772a <aci_hal_write_config_data+0xc8>
	return status;
 8007724:	f107 030f 	add.w	r3, r7, #15
 8007728:	781b      	ldrb	r3, [r3, #0]
}
 800772a:	4618      	mov	r0, r3
 800772c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <aci_hal_set_tx_power_level>:
	*Data_Length = resp.Data_Length;
	Osal_MemCpy((void*) Data, (const void*) resp.Data, *Data_Length);
	return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t En_High_Power, uint8_t PA_Level) {
 8007734:	b580      	push	{r7, lr}
 8007736:	b0cc      	sub	sp, #304	; 0x130
 8007738:	af00      	add	r7, sp, #0
 800773a:	4602      	mov	r2, r0
 800773c:	1dfb      	adds	r3, r7, #7
 800773e:	701a      	strb	r2, [r3, #0]
 8007740:	1dbb      	adds	r3, r7, #6
 8007742:	460a      	mov	r2, r1
 8007744:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_hal_set_tx_power_level_cp0 *cp0 =
 8007746:	f107 0310 	add.w	r3, r7, #16
 800774a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			(aci_hal_set_tx_power_level_cp0*) (cmd_buffer);
	tBleStatus status = 0;
 800774e:	f107 030f 	add.w	r3, r7, #15
 8007752:	2200      	movs	r2, #0
 8007754:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 8007756:	2300      	movs	r3, #0
 8007758:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->En_High_Power = En_High_Power;
 800775c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007760:	1dfa      	adds	r2, r7, #7
 8007762:	7812      	ldrb	r2, [r2, #0]
 8007764:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 8007766:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800776a:	3301      	adds	r3, #1
 800776c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->PA_Level = PA_Level;
 8007770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007774:	1dba      	adds	r2, r7, #6
 8007776:	7812      	ldrb	r2, [r2, #0]
 8007778:	705a      	strb	r2, [r3, #1]
	index_input += 1;
 800777a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800777e:	3301      	adds	r3, #1
 8007780:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 8007784:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007788:	2218      	movs	r2, #24
 800778a:	2100      	movs	r1, #0
 800778c:	4618      	mov	r0, r3
 800778e:	f000 f90d 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8007792:	233f      	movs	r3, #63	; 0x3f
 8007794:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x00f;
 8007798:	230f      	movs	r3, #15
 800779a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 800779e:	f107 0310 	add.w	r3, r7, #16
 80077a2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 80077a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80077aa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 80077ae:	f107 030f 	add.w	r3, r7, #15
 80077b2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 80077bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80077c0:	2100      	movs	r1, #0
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 faa6 	bl	8007d14 <hci_send_req>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	da01      	bge.n	80077d2 <aci_hal_set_tx_power_level+0x9e>
		return BLE_STATUS_TIMEOUT;
 80077ce:	23ff      	movs	r3, #255	; 0xff
 80077d0:	e002      	b.n	80077d8 <aci_hal_set_tx_power_level+0xa4>
	return status;
 80077d2:	f107 030f 	add.w	r3, r7, #15
 80077d6:	781b      	ldrb	r3, [r3, #0]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <aci_hal_set_radio_activity_mask>:
	Osal_MemCpy((void*) Link_Connection_Handle,
			(const void*) resp.Link_Connection_Handle, 16);
	return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask(uint16_t Radio_Activity_Mask) {
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b0cc      	sub	sp, #304	; 0x130
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	4602      	mov	r2, r0
 80077ea:	1dbb      	adds	r3, r7, #6
 80077ec:	801a      	strh	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	aci_hal_set_radio_activity_mask_cp0 *cp0 =
 80077ee:	f107 0310 	add.w	r3, r7, #16
 80077f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
			(aci_hal_set_radio_activity_mask_cp0*) (cmd_buffer);
	tBleStatus status = 0;
 80077f6:	f107 030f 	add.w	r3, r7, #15
 80077fa:	2200      	movs	r2, #0
 80077fc:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 80077fe:	2300      	movs	r3, #0
 8007800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 8007804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8007808:	1dba      	adds	r2, r7, #6
 800780a:	8812      	ldrh	r2, [r2, #0]
 800780c:	801a      	strh	r2, [r3, #0]
	index_input += 2;
 800780e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007812:	3302      	adds	r3, #2
 8007814:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 8007818:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800781c:	2218      	movs	r2, #24
 800781e:	2100      	movs	r1, #0
 8007820:	4618      	mov	r0, r3
 8007822:	f000 f8c3 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x3f;
 8007826:	233f      	movs	r3, #63	; 0x3f
 8007828:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x018;
 800782c:	2318      	movs	r3, #24
 800782e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8007832:	f107 0310 	add.w	r3, r7, #16
 8007836:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 800783a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800783e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 8007842:	f107 030f 	add.w	r3, r7, #15
 8007846:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 800784a:	2301      	movs	r3, #1
 800784c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 8007850:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007854:	2100      	movs	r1, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f000 fa5c 	bl	8007d14 <hci_send_req>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	da01      	bge.n	8007866 <aci_hal_set_radio_activity_mask+0x84>
		return BLE_STATUS_TIMEOUT;
 8007862:	23ff      	movs	r3, #255	; 0xff
 8007864:	e002      	b.n	800786c <aci_hal_set_radio_activity_mask+0x8a>
	return status;
 8007866:	f107 030f 	add.w	r3, r7, #15
 800786a:	781b      	ldrb	r3, [r3, #0]
}
 800786c:	4618      	mov	r0, r3
 800786e:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <hci_reset>:
	if (hci_send_req(&rq, FALSE) < 0)
		return BLE_STATUS_TIMEOUT;
	return status;
}

tBleStatus hci_reset(void) {
 8007876:	b580      	push	{r7, lr}
 8007878:	b088      	sub	sp, #32
 800787a:	af00      	add	r7, sp, #0
	struct hci_request rq;
	tBleStatus status = 0;
 800787c:	2300      	movs	r3, #0
 800787e:	71fb      	strb	r3, [r7, #7]
	Osal_MemSet(&rq, 0, sizeof(rq));
 8007880:	f107 0308 	add.w	r3, r7, #8
 8007884:	2218      	movs	r2, #24
 8007886:	2100      	movs	r1, #0
 8007888:	4618      	mov	r0, r3
 800788a:	f000 f88f 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x03;
 800788e:	2303      	movs	r3, #3
 8007890:	813b      	strh	r3, [r7, #8]
	rq.ocf = 0x003;
 8007892:	2303      	movs	r3, #3
 8007894:	817b      	strh	r3, [r7, #10]
	rq.rparam = &status;
 8007896:	1dfb      	adds	r3, r7, #7
 8007898:	61bb      	str	r3, [r7, #24]
	rq.rlen = 1;
 800789a:	2301      	movs	r3, #1
 800789c:	61fb      	str	r3, [r7, #28]
	if (hci_send_req(&rq, FALSE) < 0)
 800789e:	f107 0308 	add.w	r3, r7, #8
 80078a2:	2100      	movs	r1, #0
 80078a4:	4618      	mov	r0, r3
 80078a6:	f000 fa35 	bl	8007d14 <hci_send_req>
 80078aa:	4603      	mov	r3, r0
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	da01      	bge.n	80078b4 <hci_reset+0x3e>
		return BLE_STATUS_TIMEOUT;
 80078b0:	23ff      	movs	r3, #255	; 0xff
 80078b2:	e000      	b.n	80078b6 <hci_reset+0x40>
	return status;
 80078b4:	79fb      	ldrb	r3, [r7, #7]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3720      	adds	r7, #32
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}

080078be <hci_le_set_default_phy>:
	*RX_PHY = resp.RX_PHY;
	return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_default_phy(uint8_t ALL_PHYS, uint8_t TX_PHYS,
		uint8_t RX_PHYS) {
 80078be:	b590      	push	{r4, r7, lr}
 80078c0:	b0cd      	sub	sp, #308	; 0x134
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	4604      	mov	r4, r0
 80078c6:	4608      	mov	r0, r1
 80078c8:	4611      	mov	r1, r2
 80078ca:	1dfb      	adds	r3, r7, #7
 80078cc:	4622      	mov	r2, r4
 80078ce:	701a      	strb	r2, [r3, #0]
 80078d0:	1dbb      	adds	r3, r7, #6
 80078d2:	4602      	mov	r2, r0
 80078d4:	701a      	strb	r2, [r3, #0]
 80078d6:	1d7b      	adds	r3, r7, #5
 80078d8:	460a      	mov	r2, r1
 80078da:	701a      	strb	r2, [r3, #0]
	struct hci_request rq;
	uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
	hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*) (cmd_buffer);
 80078dc:	f107 0310 	add.w	r3, r7, #16
 80078e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
	tBleStatus status = 0;
 80078e4:	f107 030f 	add.w	r3, r7, #15
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
	int index_input = 0;
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->ALL_PHYS = ALL_PHYS;
 80078f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80078f6:	1dfa      	adds	r2, r7, #7
 80078f8:	7812      	ldrb	r2, [r2, #0]
 80078fa:	701a      	strb	r2, [r3, #0]
	index_input += 1;
 80078fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007900:	3301      	adds	r3, #1
 8007902:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->TX_PHYS = TX_PHYS;
 8007906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800790a:	1dba      	adds	r2, r7, #6
 800790c:	7812      	ldrb	r2, [r2, #0]
 800790e:	705a      	strb	r2, [r3, #1]
	index_input += 1;
 8007910:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007914:	3301      	adds	r3, #1
 8007916:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	cp0->RX_PHYS = RX_PHYS;
 800791a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800791e:	1d7a      	adds	r2, r7, #5
 8007920:	7812      	ldrb	r2, [r2, #0]
 8007922:	709a      	strb	r2, [r3, #2]
	index_input += 1;
 8007924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007928:	3301      	adds	r3, #1
 800792a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	Osal_MemSet(&rq, 0, sizeof(rq));
 800792e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8007932:	2218      	movs	r2, #24
 8007934:	2100      	movs	r1, #0
 8007936:	4618      	mov	r0, r3
 8007938:	f000 f838 	bl	80079ac <Osal_MemSet>
	rq.ogf = 0x08;
 800793c:	2308      	movs	r3, #8
 800793e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
	rq.ocf = 0x031;
 8007942:	2331      	movs	r3, #49	; 0x31
 8007944:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
	rq.cparam = cmd_buffer;
 8007948:	f107 0310 	add.w	r3, r7, #16
 800794c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	rq.clen = index_input;
 8007950:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8007954:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
	rq.rparam = &status;
 8007958:	f107 030f 	add.w	r3, r7, #15
 800795c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	rq.rlen = 1;
 8007960:	2301      	movs	r3, #1
 8007962:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	if (hci_send_req(&rq, FALSE) < 0)
 8007966:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800796a:	2100      	movs	r1, #0
 800796c:	4618      	mov	r0, r3
 800796e:	f000 f9d1 	bl	8007d14 <hci_send_req>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	da01      	bge.n	800797c <hci_le_set_default_phy+0xbe>
		return BLE_STATUS_TIMEOUT;
 8007978:	23ff      	movs	r3, #255	; 0xff
 800797a:	e002      	b.n	8007982 <hci_le_set_default_phy+0xc4>
	return status;
 800797c:	f107 030f 	add.w	r3, r7, #15
 8007980:	781b      	ldrb	r3, [r3, #0]
}
 8007982:	4618      	mov	r0, r3
 8007984:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8007988:	46bd      	mov	sp, r7
 800798a:	bd90      	pop	{r4, r7, pc}

0800798c <Osal_MemCpy>:
/**
 * Osal_MemCpy
 * 
 */

void* Osal_MemCpy(void *dest, const void *src, unsigned int size) {
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
	return memcpy(dest, src, size);
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68b9      	ldr	r1, [r7, #8]
 800799c:	68f8      	ldr	r0, [r7, #12]
 800799e:	f001 fed9 	bl	8009754 <memcpy>
 80079a2:	4603      	mov	r3, r0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <Osal_MemSet>:
/**
 * Osal_MemSet
 * 
 */

void* Osal_MemSet(void *ptr, int value, unsigned int size) {
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
	return memset(ptr, value, size);
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	68b9      	ldr	r1, [r7, #8]
 80079bc:	68f8      	ldr	r0, [r7, #12]
 80079be:	f001 fed7 	bl	8009770 <memset>
 80079c2:	4603      	mov	r3, r0
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3710      	adds	r7, #16
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <BLS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__weak void BLS_Init( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	af00      	add	r7, sp, #0
  return;
 80079d0:	bf00      	nop
}
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr

080079da <CRS_STM_Init>:
__weak void CRS_STM_Init( void )
{
 80079da:	b480      	push	{r7}
 80079dc:	af00      	add	r7, sp, #0
  return;
 80079de:	bf00      	nop
}
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <DIS_Init>:
__weak void DIS_Init( void )
{
 80079e8:	b480      	push	{r7}
 80079ea:	af00      	add	r7, sp, #0
  return;
 80079ec:	bf00      	nop
}
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr

080079f6 <EDS_STM_Init>:
__weak void EDS_STM_Init( void )
{
 80079f6:	b480      	push	{r7}
 80079f8:	af00      	add	r7, sp, #0
  return;
 80079fa:	bf00      	nop
}
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HIDS_Init>:
__weak void HIDS_Init( void )
{
 8007a04:	b480      	push	{r7}
 8007a06:	af00      	add	r7, sp, #0
  return;
 8007a08:	bf00      	nop
}
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr

08007a12 <HRS_Init>:
__weak void HRS_Init( void )
{
 8007a12:	b480      	push	{r7}
 8007a14:	af00      	add	r7, sp, #0
  return;
 8007a16:	bf00      	nop
}
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1e:	4770      	bx	lr

08007a20 <HTS_Init>:
__weak void HTS_Init( void )
{
 8007a20:	b480      	push	{r7}
 8007a22:	af00      	add	r7, sp, #0
  return;
 8007a24:	bf00      	nop
}
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <IAS_Init>:
__weak void IAS_Init( void )
{
 8007a2e:	b480      	push	{r7}
 8007a30:	af00      	add	r7, sp, #0
  return;
 8007a32:	bf00      	nop
}
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr

08007a3c <LLS_Init>:
__weak void LLS_Init( void )
{
 8007a3c:	b480      	push	{r7}
 8007a3e:	af00      	add	r7, sp, #0
  return;
 8007a40:	bf00      	nop
}
 8007a42:	46bd      	mov	sp, r7
 8007a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a48:	4770      	bx	lr

08007a4a <TPS_Init>:
__weak void TPS_Init( void )
{
 8007a4a:	b480      	push	{r7}
 8007a4c:	af00      	add	r7, sp, #0
  return;
 8007a4e:	bf00      	nop
}
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <MOTENV_STM_Init>:
__weak void MOTENV_STM_Init( void )
{
 8007a58:	b480      	push	{r7}
 8007a5a:	af00      	add	r7, sp, #0
  return;
 8007a5c:	bf00      	nop
}
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr

08007a66 <P2PS_STM_Init>:
__weak void P2PS_STM_Init( void )
{
 8007a66:	b480      	push	{r7}
 8007a68:	af00      	add	r7, sp, #0
  return;
 8007a6a:	bf00      	nop
}
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <OTAS_STM_Init>:
__weak void OTAS_STM_Init( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	af00      	add	r7, sp, #0
  return;
 8007a78:	bf00      	nop
}
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a80:	4770      	bx	lr

08007a82 <MESH_Init>:
__weak void MESH_Init( void )
{
 8007a82:	b480      	push	{r7}
 8007a84:	af00      	add	r7, sp, #0
  return;
 8007a86:	bf00      	nop
}
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <BVOPUS_STM_Init>:
__weak void BVOPUS_STM_Init( void )
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return;
 8007a94:	bf00      	nop
}
 8007a96:	46bd      	mov	sp, r7
 8007a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9c:	4770      	bx	lr
	...

08007aa0 <SVCCTL_Init>:
}

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8007aa4:	4b04      	ldr	r3, [pc, #16]	; (8007ab8 <SVCCTL_Init+0x18>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8007aaa:	4b04      	ldr	r3, [pc, #16]	; (8007abc <SVCCTL_Init+0x1c>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8007ab0:	f000 f806 	bl	8007ac0 <SVCCTL_SvcInit>

  return;
 8007ab4:	bf00      	nop
}
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	200000cc 	.word	0x200000cc
 8007abc:	200000ec 	.word	0x200000ec

08007ac0 <SVCCTL_SvcInit>:

__weak void SVCCTL_SvcInit(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  BLS_Init();
 8007ac4:	f7ff ff82 	bl	80079cc <BLS_Init>

  CRS_STM_Init();
 8007ac8:	f7ff ff87 	bl	80079da <CRS_STM_Init>

  DIS_Init();
 8007acc:	f7ff ff8c 	bl	80079e8 <DIS_Init>

  EDS_STM_Init();
 8007ad0:	f7ff ff91 	bl	80079f6 <EDS_STM_Init>

  HIDS_Init();
 8007ad4:	f7ff ff96 	bl	8007a04 <HIDS_Init>

  HRS_Init();
 8007ad8:	f7ff ff9b 	bl	8007a12 <HRS_Init>

  HTS_Init();
 8007adc:	f7ff ffa0 	bl	8007a20 <HTS_Init>

  IAS_Init();
 8007ae0:	f7ff ffa5 	bl	8007a2e <IAS_Init>

  LLS_Init();
 8007ae4:	f7ff ffaa 	bl	8007a3c <LLS_Init>

  TPS_Init();
 8007ae8:	f7ff ffaf 	bl	8007a4a <TPS_Init>

  MOTENV_STM_Init();
 8007aec:	f7ff ffb4 	bl	8007a58 <MOTENV_STM_Init>

  P2PS_STM_Init();
 8007af0:	f7ff ffb9 	bl	8007a66 <P2PS_STM_Init>

  OTAS_STM_Init();
 8007af4:	f7ff ffbe 	bl	8007a74 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8007af8:	f7ff ffca 	bl	8007a90 <BVOPUS_STM_Init>

  MESH_Init();
 8007afc:	f7ff ffc1 	bl	8007a82 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8007b00:	f001 f938 	bl	8008d74 <SVCCTL_InitCustomSvc>
  
  return;
 8007b04:	bf00      	nop
}
 8007b06:	bd80      	pop	{r7, pc}

08007b08 <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 8007b10:	4b09      	ldr	r3, [pc, #36]	; (8007b38 <SVCCTL_RegisterSvcHandler+0x30>)
 8007b12:	7f1b      	ldrb	r3, [r3, #28]
 8007b14:	4619      	mov	r1, r3
 8007b16:	4a08      	ldr	r2, [pc, #32]	; (8007b38 <SVCCTL_RegisterSvcHandler+0x30>)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 8007b1e:	4b06      	ldr	r3, [pc, #24]	; (8007b38 <SVCCTL_RegisterSvcHandler+0x30>)
 8007b20:	7f1b      	ldrb	r3, [r3, #28]
 8007b22:	3301      	adds	r3, #1
 8007b24:	b2da      	uxtb	r2, r3
 8007b26:	4b04      	ldr	r3, [pc, #16]	; (8007b38 <SVCCTL_RegisterSvcHandler+0x30>)
 8007b28:	771a      	strb	r2, [r3, #28]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 8007b2a:	bf00      	nop
}
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr
 8007b36:	bf00      	nop
 8007b38:	200000cc 	.word	0x200000cc

08007b3c <SVCCTL_UserEvtRx>:

  return;
}

SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b086      	sub	sp, #24
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  evt_blue_aci *blue_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	3301      	adds	r3, #1
 8007b48:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2bff      	cmp	r3, #255	; 0xff
 8007b54:	d125      	bne.n	8007ba2 <SVCCTL_UserEvtRx+0x66>
  {
    case EVT_VENDOR:
    {
      blue_evt = (evt_blue_aci*) event_pckt->data;
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	3302      	adds	r3, #2
 8007b5a:	60fb      	str	r3, [r7, #12]

      switch ((blue_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	881b      	ldrh	r3, [r3, #0]
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007b66:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b6a:	d118      	bne.n	8007b9e <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	757b      	strb	r3, [r7, #21]
 8007b70:	e00d      	b.n	8007b8e <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8007b72:	7d7b      	ldrb	r3, [r7, #21]
 8007b74:	4a1a      	ldr	r2, [pc, #104]	; (8007be0 <SVCCTL_UserEvtRx+0xa4>)
 8007b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	4798      	blx	r3
 8007b7e:	4603      	mov	r3, r0
 8007b80:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8007b82:	7dfb      	ldrb	r3, [r7, #23]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d108      	bne.n	8007b9a <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8007b88:	7d7b      	ldrb	r3, [r7, #21]
 8007b8a:	3301      	adds	r3, #1
 8007b8c:	757b      	strb	r3, [r7, #21]
 8007b8e:	4b14      	ldr	r3, [pc, #80]	; (8007be0 <SVCCTL_UserEvtRx+0xa4>)
 8007b90:	7f1b      	ldrb	r3, [r3, #28]
 8007b92:	7d7a      	ldrb	r2, [r7, #21]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d3ec      	bcc.n	8007b72 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 8007b98:	e002      	b.n	8007ba0 <SVCCTL_UserEvtRx+0x64>
              break;
 8007b9a:	bf00      	nop
          break;
 8007b9c:	e000      	b.n	8007ba0 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 8007b9e:	bf00      	nop
      }
    }
      break; /* HCI_EVT_VENDOR_SPECIFIC */
 8007ba0:	e000      	b.n	8007ba4 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 8007ba2:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the applicaiton.
   */
  switch (event_notification_status)
 8007ba4:	7dfb      	ldrb	r3, [r7, #23]
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d00f      	beq.n	8007bca <SVCCTL_UserEvtRx+0x8e>
 8007baa:	2b02      	cmp	r3, #2
 8007bac:	dc10      	bgt.n	8007bd0 <SVCCTL_UserEvtRx+0x94>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d002      	beq.n	8007bb8 <SVCCTL_UserEvtRx+0x7c>
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d006      	beq.n	8007bc4 <SVCCTL_UserEvtRx+0x88>
 8007bb6:	e00b      	b.n	8007bd0 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 fe11 	bl	80087e0 <SVCCTL_App_Notification>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	75bb      	strb	r3, [r7, #22]
      break;
 8007bc2:	e008      	b.n	8007bd6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	75bb      	strb	r3, [r7, #22]
      break;
 8007bc8:	e005      	b.n	8007bd6 <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	75bb      	strb	r3, [r7, #22]
      break;
 8007bce:	e002      	b.n	8007bd6 <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	75bb      	strb	r3, [r7, #22]
      break;
 8007bd4:	bf00      	nop
  }

  return (return_status);
 8007bd6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	200000cc 	.word	0x200000cc

08007be4 <SHCI_C2_BLE_Init>:
	shci_send( SHCI_OPCODE_C2_FUS_LOCK_USR_KEY, 1, local_buffer, p_rsp);

	return (SHCI_CmdStatus_t) (((TL_CcEvt_t*) (p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init(SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b088      	sub	sp, #32
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
	 * Buffer is large enough to hold command complete without payload
	 */
	uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
	TL_EvtPacket_t *p_rsp;

	p_rsp = (TL_EvtPacket_t*) local_buffer;
 8007bec:	f107 030c 	add.w	r3, r7, #12
 8007bf0:	61fb      	str	r3, [r7, #28]

	shci_send( SHCI_OPCODE_C2_BLE_INIT, sizeof(SHCI_C2_Ble_Init_Cmd_Param_t),
			(uint8_t*) &pCmdPacket->Param, p_rsp);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f103 020c 	add.w	r2, r3, #12
	shci_send( SHCI_OPCODE_C2_BLE_INIT, sizeof(SHCI_C2_Ble_Init_Cmd_Param_t),
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	2121      	movs	r1, #33	; 0x21
 8007bfc:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8007c00:	f000 fa1e 	bl	8008040 <shci_send>

	return (SHCI_CmdStatus_t) (((TL_CcEvt_t*) (p_rsp->evtserial.evt.payload))->payload[0]);
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	330b      	adds	r3, #11
 8007c08:	78db      	ldrb	r3, [r3, #3]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3720      	adds	r7, #32
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <SHCI_C2_DEBUG_Init>:
	shci_send( SHCI_OPCODE_C2_ZIGBEE_INIT, 0, 0, p_rsp);

	return (SHCI_CmdStatus_t) (((TL_CcEvt_t*) (p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init(SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket) {
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b088      	sub	sp, #32
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
	 * Buffer is large enough to hold command complete without payload
	 */
	uint8_t local_buffer[TL_BLEEVT_CS_BUFFER_SIZE];
	TL_EvtPacket_t *p_rsp;

	p_rsp = (TL_EvtPacket_t*) local_buffer;
 8007c1a:	f107 030c 	add.w	r3, r7, #12
 8007c1e:	61fb      	str	r3, [r7, #28]

	shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
			sizeof(SHCI_C2_DEBUG_init_Cmd_Param_t),
			(uint8_t*) &pCmdPacket->Param, p_rsp);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f103 020c 	add.w	r2, r3, #12
	shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8007c26:	69fb      	ldr	r3, [r7, #28]
 8007c28:	210f      	movs	r1, #15
 8007c2a:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8007c2e:	f000 fa07 	bl	8008040 <shci_send>

	return (SHCI_CmdStatus_t) (((TL_CcEvt_t*) (p_rsp->evtserial.evt.payload))->payload[0]);
 8007c32:	69fb      	ldr	r3, [r7, #28]
 8007c34:	330b      	adds	r3, #11
 8007c36:	78db      	ldrb	r3, [r3, #3]
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3720      	adds	r7, #32
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <hci_init>:
static void SendCmd(uint16_t opcode, uint8_t plen, void *param);
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit(TL_CmdPacket_t *p_cmdbuffer);

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void (*UserEvtRx)(void *pData), void *pConf) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	6039      	str	r1, [r7, #0]
	StatusNotCallBackFunction =
			((HCI_TL_HciInitConf_t*) pConf)->StatusNotCallBack;
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
	StatusNotCallBackFunction =
 8007c4e:	4a08      	ldr	r2, [pc, #32]	; (8007c70 <hci_init+0x30>)
 8007c50:	6013      	str	r3, [r2, #0]
	hciContext.UserEvtRx = UserEvtRx;
 8007c52:	4a08      	ldr	r2, [pc, #32]	; (8007c74 <hci_init+0x34>)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	61d3      	str	r3, [r2, #28]

	hci_register_io_bus(&hciContext.io);
 8007c58:	4806      	ldr	r0, [pc, #24]	; (8007c74 <hci_init+0x34>)
 8007c5a:	f000 f973 	bl	8007f44 <hci_register_io_bus>

	TlInit((TL_CmdPacket_t*) (((HCI_TL_HciInitConf_t*) pConf)->p_cmdbuffer));
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4618      	mov	r0, r3
 8007c64:	f000 f8d4 	bl	8007e10 <TlInit>

	return;
 8007c68:	bf00      	nop
}
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}
 8007c70:	20000208 	.word	0x20000208
 8007c74:	200001e0 	.word	0x200001e0

08007c78 <hci_user_evt_proc>:

void hci_user_evt_proc(void) {
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
	/**
	 * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
	 * in case the user overwrite the header where the next/prev pointers are located
	 */

	if ((LST_is_empty(&HciAsynchEventQueue) == FALSE)
 8007c7e:	4822      	ldr	r0, [pc, #136]	; (8007d08 <hci_user_evt_proc+0x90>)
 8007c80:	f000 fc92 	bl	80085a8 <LST_is_empty>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d12b      	bne.n	8007ce2 <hci_user_evt_proc+0x6a>
			&& (UserEventFlow != HCI_TL_UserEventFlow_Disable)) {
 8007c8a:	4b20      	ldr	r3, [pc, #128]	; (8007d0c <hci_user_evt_proc+0x94>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d027      	beq.n	8007ce2 <hci_user_evt_proc+0x6a>
		LST_remove_head(&HciAsynchEventQueue, (tListNode**) &phcievtbuffer);
 8007c92:	f107 030c 	add.w	r3, r7, #12
 8007c96:	4619      	mov	r1, r3
 8007c98:	481b      	ldr	r0, [pc, #108]	; (8007d08 <hci_user_evt_proc+0x90>)
 8007c9a:	f000 fd14 	bl	80086c6 <LST_remove_head>

		if (hciContext.UserEvtRx != NULL) {
 8007c9e:	4b1c      	ldr	r3, [pc, #112]	; (8007d10 <hci_user_evt_proc+0x98>)
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00c      	beq.n	8007cc0 <hci_user_evt_proc+0x48>
			UserEvtRxParam.pckt = phcievtbuffer;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	60bb      	str	r3, [r7, #8]
			UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8007caa:	2301      	movs	r3, #1
 8007cac:	713b      	strb	r3, [r7, #4]
			hciContext.UserEvtRx((void*) &UserEvtRxParam);
 8007cae:	4b18      	ldr	r3, [pc, #96]	; (8007d10 <hci_user_evt_proc+0x98>)
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	1d3a      	adds	r2, r7, #4
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
			UserEventFlow = UserEvtRxParam.status;
 8007cb8:	793a      	ldrb	r2, [r7, #4]
 8007cba:	4b14      	ldr	r3, [pc, #80]	; (8007d0c <hci_user_evt_proc+0x94>)
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e002      	b.n	8007cc6 <hci_user_evt_proc+0x4e>
		} else {
			UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007cc0:	4b12      	ldr	r3, [pc, #72]	; (8007d0c <hci_user_evt_proc+0x94>)
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	701a      	strb	r2, [r3, #0]
		}

		if (UserEventFlow != HCI_TL_UserEventFlow_Disable) {
 8007cc6:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <hci_user_evt_proc+0x94>)
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d004      	beq.n	8007cd8 <hci_user_evt_proc+0x60>
			TL_MM_EvtDone(phcievtbuffer);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fb91 	bl	80083f8 <TL_MM_EvtDone>
 8007cd6:	e004      	b.n	8007ce2 <hci_user_evt_proc+0x6a>
		} else {
			/**
			 * put back the event in the queue
			 */
			LST_insert_head(&HciAsynchEventQueue, (tListNode*) phcievtbuffer);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	4619      	mov	r1, r3
 8007cdc:	480a      	ldr	r0, [pc, #40]	; (8007d08 <hci_user_evt_proc+0x90>)
 8007cde:	f000 fc85 	bl	80085ec <LST_insert_head>
		}
	}

	if ((LST_is_empty(&HciAsynchEventQueue) == FALSE)
 8007ce2:	4809      	ldr	r0, [pc, #36]	; (8007d08 <hci_user_evt_proc+0x90>)
 8007ce4:	f000 fc60 	bl	80085a8 <LST_is_empty>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d107      	bne.n	8007cfe <hci_user_evt_proc+0x86>
			&& (UserEventFlow != HCI_TL_UserEventFlow_Disable)) {
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <hci_user_evt_proc+0x94>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d003      	beq.n	8007cfe <hci_user_evt_proc+0x86>
		hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8007cf6:	4804      	ldr	r0, [pc, #16]	; (8007d08 <hci_user_evt_proc+0x90>)
 8007cf8:	f000 ff96 	bl	8008c28 <hci_notify_asynch_evt>
	}

	return;
 8007cfc:	bf00      	nop
 8007cfe:	bf00      	nop
}
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	200000f4 	.word	0x200000f4
 8007d0c:	20000100 	.word	0x20000100
 8007d10:	200001e0 	.word	0x200001e0

08007d14 <hci_send_req>:
	hci_notify_asynch_evt((void*) &HciAsynchEventQueue);

	return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async) {
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b088      	sub	sp, #32
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	70fb      	strb	r3, [r7, #3]
	TL_CsEvt_t *pcommand_status_event;
	TL_EvtPacket_t *pevtpacket;
	uint8_t hci_cmd_complete_return_parameters_length;
	HCI_TL_CmdStatus_t local_cmd_status;

	NotifyCmdStatus(HCI_TL_CmdBusy);
 8007d20:	2000      	movs	r0, #0
 8007d22:	f000 f8cb 	bl	8007ebc <NotifyCmdStatus>
	local_cmd_status = HCI_TL_CmdBusy;
 8007d26:	2300      	movs	r3, #0
 8007d28:	77fb      	strb	r3, [r7, #31]
	opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	885b      	ldrh	r3, [r3, #2]
 8007d2e:	b21b      	sxth	r3, r3
 8007d30:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d34:	b21a      	sxth	r2, r3
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	881b      	ldrh	r3, [r3, #0]
 8007d3a:	029b      	lsls	r3, r3, #10
 8007d3c:	b21b      	sxth	r3, r3
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	b21b      	sxth	r3, r3
 8007d42:	83bb      	strh	r3, [r7, #28]
	SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	b2d9      	uxtb	r1, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	8bbb      	ldrh	r3, [r7, #28]
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f88d 	bl	8007e70 <SendCmd>

	while (local_cmd_status == HCI_TL_CmdBusy) {
 8007d56:	e04e      	b.n	8007df6 <hci_send_req+0xe2>
		hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8007d58:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8007d5c:	f000 ff7b 	bl	8008c56 <hci_cmd_resp_wait>

		/**
		 * Process Cmd Event
		 */
		while (LST_is_empty(&HciCmdEventQueue) == FALSE) {
 8007d60:	e043      	b.n	8007dea <hci_send_req+0xd6>
			LST_remove_head(&HciCmdEventQueue, (tListNode**) &pevtpacket);
 8007d62:	f107 030c 	add.w	r3, r7, #12
 8007d66:	4619      	mov	r1, r3
 8007d68:	4828      	ldr	r0, [pc, #160]	; (8007e0c <hci_send_req+0xf8>)
 8007d6a:	f000 fcac 	bl	80086c6 <LST_remove_head>

			if (pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE) {
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	7a5b      	ldrb	r3, [r3, #9]
 8007d72:	2b0f      	cmp	r3, #15
 8007d74:	d114      	bne.n	8007da0 <hci_send_req+0x8c>
				pcommand_status_event =
						(TL_CsEvt_t*) pevtpacket->evtserial.evt.payload;
 8007d76:	68fb      	ldr	r3, [r7, #12]
				pcommand_status_event =
 8007d78:	330b      	adds	r3, #11
 8007d7a:	613b      	str	r3, [r7, #16]
				if (pcommand_status_event->cmdcode == opcode) {
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	885b      	ldrh	r3, [r3, #2]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	8bba      	ldrh	r2, [r7, #28]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d104      	bne.n	8007d92 <hci_send_req+0x7e>
					*(uint8_t*) (p_cmd->rparam) = pcommand_status_event->status;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	691b      	ldr	r3, [r3, #16]
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	7812      	ldrb	r2, [r2, #0]
 8007d90:	701a      	strb	r2, [r3, #0]
				}

				if (pcommand_status_event->numcmd != 0) {
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	785b      	ldrb	r3, [r3, #1]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d027      	beq.n	8007dea <hci_send_req+0xd6>
					local_cmd_status = HCI_TL_CmdAvailable;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	77fb      	strb	r3, [r7, #31]
 8007d9e:	e024      	b.n	8007dea <hci_send_req+0xd6>
				}
			} else {
				pcommand_complete_event =
						(TL_CcEvt_t*) pevtpacket->evtserial.evt.payload;
 8007da0:	68fb      	ldr	r3, [r7, #12]
				pcommand_complete_event =
 8007da2:	330b      	adds	r3, #11
 8007da4:	61bb      	str	r3, [r7, #24]

				if (pcommand_complete_event->cmdcode == opcode) {
 8007da6:	69bb      	ldr	r3, [r7, #24]
 8007da8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	8bba      	ldrh	r2, [r7, #28]
 8007db0:	429a      	cmp	r2, r3
 8007db2:	d114      	bne.n	8007dde <hci_send_req+0xca>
					hci_cmd_complete_return_parameters_length =
							pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	7a9b      	ldrb	r3, [r3, #10]
					hci_cmd_complete_return_parameters_length =
 8007db8:	3b03      	subs	r3, #3
 8007dba:	75fb      	strb	r3, [r7, #23]
					p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length,
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	695a      	ldr	r2, [r3, #20]
 8007dc0:	7dfb      	ldrb	r3, [r7, #23]
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	bfa8      	it	ge
 8007dc6:	461a      	movge	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	615a      	str	r2, [r3, #20]
							p_cmd->rlen);
					memcpy(p_cmd->rparam, pcommand_complete_event->payload,
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6918      	ldr	r0, [r3, #16]
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	1cd9      	adds	r1, r3, #3
							p_cmd->rlen);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	695b      	ldr	r3, [r3, #20]
					memcpy(p_cmd->rparam, pcommand_complete_event->payload,
 8007dd8:	461a      	mov	r2, r3
 8007dda:	f001 fcbb 	bl	8009754 <memcpy>
				}

				if (pcommand_complete_event->numcmd != 0) {
 8007dde:	69bb      	ldr	r3, [r7, #24]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d001      	beq.n	8007dea <hci_send_req+0xd6>
					local_cmd_status = HCI_TL_CmdAvailable;
 8007de6:	2301      	movs	r3, #1
 8007de8:	77fb      	strb	r3, [r7, #31]
		while (LST_is_empty(&HciCmdEventQueue) == FALSE) {
 8007dea:	4808      	ldr	r0, [pc, #32]	; (8007e0c <hci_send_req+0xf8>)
 8007dec:	f000 fbdc 	bl	80085a8 <LST_is_empty>
 8007df0:	4603      	mov	r3, r0
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d0b5      	beq.n	8007d62 <hci_send_req+0x4e>
	while (local_cmd_status == HCI_TL_CmdBusy) {
 8007df6:	7ffb      	ldrb	r3, [r7, #31]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d0ad      	beq.n	8007d58 <hci_send_req+0x44>
				}
			}
		}
	}

	NotifyCmdStatus(HCI_TL_CmdAvailable);
 8007dfc:	2001      	movs	r0, #1
 8007dfe:	f000 f85d 	bl	8007ebc <NotifyCmdStatus>

	return 0;
 8007e02:	2300      	movs	r3, #0
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3720      	adds	r7, #32
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}
 8007e0c:	20000200 	.word	0x20000200

08007e10 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit(TL_CmdPacket_t *p_cmdbuffer) {
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
	TL_BLE_InitConf_t Conf;

	/**
	 * Always initialize the command event queue
	 */
	LST_init_head(&HciCmdEventQueue);
 8007e18:	480f      	ldr	r0, [pc, #60]	; (8007e58 <TlInit+0x48>)
 8007e1a:	f000 fbb5 	bl	8008588 <LST_init_head>

	pCmdBuffer = p_cmdbuffer;
 8007e1e:	4a0f      	ldr	r2, [pc, #60]	; (8007e5c <TlInit+0x4c>)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6013      	str	r3, [r2, #0]

	LST_init_head(&HciAsynchEventQueue);
 8007e24:	480e      	ldr	r0, [pc, #56]	; (8007e60 <TlInit+0x50>)
 8007e26:	f000 fbaf 	bl	8008588 <LST_init_head>

	UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <TlInit+0x54>)
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	701a      	strb	r2, [r3, #0]

	/* Initialize low level driver */
	if (hciContext.io.Init) {
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <TlInit+0x58>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00a      	beq.n	8007e4e <TlInit+0x3e>

		Conf.p_cmdbuffer = (uint8_t*) p_cmdbuffer;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	613b      	str	r3, [r7, #16]
		Conf.IoBusEvtCallBack = TlEvtReceived;
 8007e3c:	4b0b      	ldr	r3, [pc, #44]	; (8007e6c <TlInit+0x5c>)
 8007e3e:	60bb      	str	r3, [r7, #8]
		hciContext.io.Init(&Conf);
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <TlInit+0x58>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f107 0208 	add.w	r2, r7, #8
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
	}

	return;
 8007e4c:	bf00      	nop
 8007e4e:	bf00      	nop
}
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop
 8007e58:	20000200 	.word	0x20000200
 8007e5c:	200000fc 	.word	0x200000fc
 8007e60:	200000f4 	.word	0x200000f4
 8007e64:	20000100 	.word	0x20000100
 8007e68:	200001e0 	.word	0x200001e0
 8007e6c:	08007efd 	.word	0x08007efd

08007e70 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	603a      	str	r2, [r7, #0]
 8007e7a:	80fb      	strh	r3, [r7, #6]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	717b      	strb	r3, [r7, #5]
	pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8007e80:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <SendCmd+0x44>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	88fa      	ldrh	r2, [r7, #6]
 8007e86:	f8a3 2009 	strh.w	r2, [r3, #9]
	pCmdBuffer->cmdserial.cmd.plen = plen;
 8007e8a:	4b0a      	ldr	r3, [pc, #40]	; (8007eb4 <SendCmd+0x44>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	797a      	ldrb	r2, [r7, #5]
 8007e90:	72da      	strb	r2, [r3, #11]
	memcpy(pCmdBuffer->cmdserial.cmd.payload, param, plen);
 8007e92:	4b08      	ldr	r3, [pc, #32]	; (8007eb4 <SendCmd+0x44>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	330c      	adds	r3, #12
 8007e98:	797a      	ldrb	r2, [r7, #5]
 8007e9a:	6839      	ldr	r1, [r7, #0]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f001 fc59 	bl	8009754 <memcpy>

	hciContext.io.Send(0, 0);
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <SendCmd+0x48>)
 8007ea4:	691b      	ldr	r3, [r3, #16]
 8007ea6:	2100      	movs	r1, #0
 8007ea8:	2000      	movs	r0, #0
 8007eaa:	4798      	blx	r3

	return;
 8007eac:	bf00      	nop
}
 8007eae:	3708      	adds	r7, #8
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	200000fc 	.word	0x200000fc
 8007eb8:	200001e0 	.word	0x200001e0

08007ebc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus) {
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	71fb      	strb	r3, [r7, #7]
	if (hcicmdstatus == HCI_TL_CmdBusy) {
 8007ec6:	79fb      	ldrb	r3, [r7, #7]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d108      	bne.n	8007ede <NotifyCmdStatus+0x22>
		if (StatusNotCallBackFunction != 0) {
 8007ecc:	4b0a      	ldr	r3, [pc, #40]	; (8007ef8 <NotifyCmdStatus+0x3c>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d00d      	beq.n	8007ef0 <NotifyCmdStatus+0x34>
			StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8007ed4:	4b08      	ldr	r3, [pc, #32]	; (8007ef8 <NotifyCmdStatus+0x3c>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	2000      	movs	r0, #0
 8007eda:	4798      	blx	r3
		if (StatusNotCallBackFunction != 0) {
			StatusNotCallBackFunction(HCI_TL_CmdAvailable);
		}
	}

	return;
 8007edc:	e008      	b.n	8007ef0 <NotifyCmdStatus+0x34>
		if (StatusNotCallBackFunction != 0) {
 8007ede:	4b06      	ldr	r3, [pc, #24]	; (8007ef8 <NotifyCmdStatus+0x3c>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d004      	beq.n	8007ef0 <NotifyCmdStatus+0x34>
			StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8007ee6:	4b04      	ldr	r3, [pc, #16]	; (8007ef8 <NotifyCmdStatus+0x3c>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2001      	movs	r0, #1
 8007eec:	4798      	blx	r3
	return;
 8007eee:	bf00      	nop
 8007ef0:	bf00      	nop
}
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	20000208 	.word	0x20000208

08007efc <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
	if (((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	7a5b      	ldrb	r3, [r3, #9]
 8007f08:	2b0f      	cmp	r3, #15
 8007f0a:	d003      	beq.n	8007f14 <TlEvtReceived+0x18>
			|| ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE)) {
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	7a5b      	ldrb	r3, [r3, #9]
 8007f10:	2b0e      	cmp	r3, #14
 8007f12:	d107      	bne.n	8007f24 <TlEvtReceived+0x28>
		LST_insert_tail(&HciCmdEventQueue, (tListNode*) hcievt);
 8007f14:	6879      	ldr	r1, [r7, #4]
 8007f16:	4809      	ldr	r0, [pc, #36]	; (8007f3c <TlEvtReceived+0x40>)
 8007f18:	f000 fb8e 	bl	8008638 <LST_insert_tail>
		hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	f000 fe8f 	bl	8008c40 <hci_cmd_resp_release>
 8007f22:	e006      	b.n	8007f32 <TlEvtReceived+0x36>
	} else {
		LST_insert_tail(&HciAsynchEventQueue, (tListNode*) hcievt);
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4806      	ldr	r0, [pc, #24]	; (8007f40 <TlEvtReceived+0x44>)
 8007f28:	f000 fb86 	bl	8008638 <LST_insert_tail>
		hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8007f2c:	4804      	ldr	r0, [pc, #16]	; (8007f40 <TlEvtReceived+0x44>)
 8007f2e:	f000 fe7b 	bl	8008c28 <hci_notify_asynch_evt>
	}

	return;
 8007f32:	bf00      	nop
}
 8007f34:	3708      	adds	r7, #8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop
 8007f3c:	20000200 	.word	0x20000200
 8007f40:	200000f4 	.word	0x200000f4

08007f44 <hci_register_io_bus>:
 ******************************************************************************
 */
#include "hci_tl.h"
#include "tl.h"

void hci_register_io_bus(tHciIO *fops) {
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
	/* Register IO bus services */
	fops->Init = TL_BLE_Init;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	4a05      	ldr	r2, [pc, #20]	; (8007f64 <hci_register_io_bus+0x20>)
 8007f50:	601a      	str	r2, [r3, #0]
	fops->Send = TL_BLE_SendCmd;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a04      	ldr	r2, [pc, #16]	; (8007f68 <hci_register_io_bus+0x24>)
 8007f56:	611a      	str	r2, [r3, #16]

	return;
 8007f58:	bf00      	nop
}
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	08008255 	.word	0x08008255
 8007f68:	080082bd 	.word	0x080082bd

08007f6c <shci_init>:
static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt);
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit(TL_CmdPacket_t *p_cmdbuffer);

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void (*UserEvtRx)(void *pData), void *pConf) {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	StatusNotCallBackFunction =
			((SHCI_TL_HciInitConf_t*) pConf)->StatusNotCallBack;
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	685b      	ldr	r3, [r3, #4]
	StatusNotCallBackFunction =
 8007f7a:	4a08      	ldr	r2, [pc, #32]	; (8007f9c <shci_init+0x30>)
 8007f7c:	6013      	str	r3, [r2, #0]
	shciContext.UserEvtRx = UserEvtRx;
 8007f7e:	4a08      	ldr	r2, [pc, #32]	; (8007fa0 <shci_init+0x34>)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	61d3      	str	r3, [r2, #28]

	shci_register_io_bus(&shciContext.io);
 8007f84:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <shci_init+0x34>)
 8007f86:	f000 f911 	bl	80081ac <shci_register_io_bus>

	TlInit((TL_CmdPacket_t*) (((SHCI_TL_HciInitConf_t*) pConf)->p_cmdbuffer));
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 f894 	bl	80080bc <TlInit>

	return;
 8007f94:	bf00      	nop
}
 8007f96:	3708      	adds	r7, #8
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	2000022c 	.word	0x2000022c
 8007fa0:	2000020c 	.word	0x2000020c

08007fa4 <shci_user_evt_proc>:

void shci_user_evt_proc(void) {
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b084      	sub	sp, #16
 8007fa8:	af00      	add	r7, sp, #0

	/**
	 * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
	 * in case the user overwrite the header where the next/prev pointers are located
	 */
	if ((LST_is_empty(&SHciAsynchEventQueue) == FALSE)
 8007faa:	4822      	ldr	r0, [pc, #136]	; (8008034 <shci_user_evt_proc+0x90>)
 8007fac:	f000 fafc 	bl	80085a8 <LST_is_empty>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d12b      	bne.n	800800e <shci_user_evt_proc+0x6a>
			&& (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)) {
 8007fb6:	4b20      	ldr	r3, [pc, #128]	; (8008038 <shci_user_evt_proc+0x94>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d027      	beq.n	800800e <shci_user_evt_proc+0x6a>
		LST_remove_head(&SHciAsynchEventQueue, (tListNode**) &phcievtbuffer);
 8007fbe:	f107 030c 	add.w	r3, r7, #12
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	481b      	ldr	r0, [pc, #108]	; (8008034 <shci_user_evt_proc+0x90>)
 8007fc6:	f000 fb7e 	bl	80086c6 <LST_remove_head>

		if (shciContext.UserEvtRx != NULL) {
 8007fca:	4b1c      	ldr	r3, [pc, #112]	; (800803c <shci_user_evt_proc+0x98>)
 8007fcc:	69db      	ldr	r3, [r3, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d00c      	beq.n	8007fec <shci_user_evt_proc+0x48>
			UserEvtRxParam.pckt = phcievtbuffer;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	60bb      	str	r3, [r7, #8]
			UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	713b      	strb	r3, [r7, #4]
			shciContext.UserEvtRx((void*) &UserEvtRxParam);
 8007fda:	4b18      	ldr	r3, [pc, #96]	; (800803c <shci_user_evt_proc+0x98>)
 8007fdc:	69db      	ldr	r3, [r3, #28]
 8007fde:	1d3a      	adds	r2, r7, #4
 8007fe0:	4610      	mov	r0, r2
 8007fe2:	4798      	blx	r3
			SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 8007fe4:	793a      	ldrb	r2, [r7, #4]
 8007fe6:	4b14      	ldr	r3, [pc, #80]	; (8008038 <shci_user_evt_proc+0x94>)
 8007fe8:	701a      	strb	r2, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <shci_user_evt_proc+0x4e>
		} else {
			SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 8007fec:	4b12      	ldr	r3, [pc, #72]	; (8008038 <shci_user_evt_proc+0x94>)
 8007fee:	2201      	movs	r2, #1
 8007ff0:	701a      	strb	r2, [r3, #0]
		}

		if (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable) {
 8007ff2:	4b11      	ldr	r3, [pc, #68]	; (8008038 <shci_user_evt_proc+0x94>)
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <shci_user_evt_proc+0x60>
			TL_MM_EvtDone(phcievtbuffer);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	f000 f9fb 	bl	80083f8 <TL_MM_EvtDone>
 8008002:	e004      	b.n	800800e <shci_user_evt_proc+0x6a>
		} else {
			/**
			 * put back the event in the queue
			 */
			LST_insert_head(&SHciAsynchEventQueue, (tListNode*) phcievtbuffer);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	4619      	mov	r1, r3
 8008008:	480a      	ldr	r0, [pc, #40]	; (8008034 <shci_user_evt_proc+0x90>)
 800800a:	f000 faef 	bl	80085ec <LST_insert_head>
		}
	}

	if ((LST_is_empty(&SHciAsynchEventQueue) == FALSE)
 800800e:	4809      	ldr	r0, [pc, #36]	; (8008034 <shci_user_evt_proc+0x90>)
 8008010:	f000 faca 	bl	80085a8 <LST_is_empty>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d107      	bne.n	800802a <shci_user_evt_proc+0x86>
			&& (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)) {
 800801a:	4b07      	ldr	r3, [pc, #28]	; (8008038 <shci_user_evt_proc+0x94>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d003      	beq.n	800802a <shci_user_evt_proc+0x86>
		shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 8008022:	4804      	ldr	r0, [pc, #16]	; (8008034 <shci_user_evt_proc+0x90>)
 8008024:	f7f8 f979 	bl	800031a <shci_notify_asynch_evt>
	}

	return;
 8008028:	bf00      	nop
 800802a:	bf00      	nop
}
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20000110 	.word	0x20000110
 8008038:	20000120 	.word	0x20000120
 800803c:	2000020c 	.word	0x2000020c

08008040 <shci_send>:

	return;
}

void shci_send(uint16_t cmd_code, uint8_t len_cmd_payload,
		uint8_t *p_cmd_payload, TL_EvtPacket_t *p_rsp) {
 8008040:	b580      	push	{r7, lr}
 8008042:	b084      	sub	sp, #16
 8008044:	af00      	add	r7, sp, #0
 8008046:	60ba      	str	r2, [r7, #8]
 8008048:	607b      	str	r3, [r7, #4]
 800804a:	4603      	mov	r3, r0
 800804c:	81fb      	strh	r3, [r7, #14]
 800804e:	460b      	mov	r3, r1
 8008050:	737b      	strb	r3, [r7, #13]
	Cmd_SetStatus(SHCI_TL_CmdBusy);
 8008052:	2000      	movs	r0, #0
 8008054:	f000 f864 	bl	8008120 <Cmd_SetStatus>

	pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <shci_send+0x74>)
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	89fa      	ldrh	r2, [r7, #14]
 800805e:	f8a3 2009 	strh.w	r2, [r3, #9]
	pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 8008062:	4b14      	ldr	r3, [pc, #80]	; (80080b4 <shci_send+0x74>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	7b7a      	ldrb	r2, [r7, #13]
 8008068:	72da      	strb	r2, [r3, #11]

	memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload);
 800806a:	4b12      	ldr	r3, [pc, #72]	; (80080b4 <shci_send+0x74>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	330c      	adds	r3, #12
 8008070:	7b7a      	ldrb	r2, [r7, #13]
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	4618      	mov	r0, r3
 8008076:	f001 fb6d 	bl	8009754 <memcpy>

	shciContext.io.Send(0, 0);
 800807a:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <shci_send+0x78>)
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2100      	movs	r1, #0
 8008080:	2000      	movs	r0, #0
 8008082:	4798      	blx	r3

	shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8008084:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8008088:	f7f8 f95e 	bl	8000348 <shci_cmd_resp_wait>

	/**
	 * The command complete of a system command does not have the header
	 * It starts immediately with the evtserial field
	 */
	memcpy(&(p_rsp->evtserial), pCmdBuffer,
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f103 0008 	add.w	r0, r3, #8
 8008092:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <shci_send+0x74>)
 8008094:	6819      	ldr	r1, [r3, #0]
			((TL_EvtSerial_t*) pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE);
 8008096:	4b07      	ldr	r3, [pc, #28]	; (80080b4 <shci_send+0x74>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	789b      	ldrb	r3, [r3, #2]
 800809c:	3303      	adds	r3, #3
	memcpy(&(p_rsp->evtserial), pCmdBuffer,
 800809e:	461a      	mov	r2, r3
 80080a0:	f001 fb58 	bl	8009754 <memcpy>

	Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80080a4:	2001      	movs	r0, #1
 80080a6:	f000 f83b 	bl	8008120 <Cmd_SetStatus>

	return;
 80080aa:	bf00      	nop
}
 80080ac:	3710      	adds	r7, #16
 80080ae:	46bd      	mov	sp, r7
 80080b0:	bd80      	pop	{r7, pc}
 80080b2:	bf00      	nop
 80080b4:	2000011c 	.word	0x2000011c
 80080b8:	2000020c 	.word	0x2000020c

080080bc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit(TL_CmdPacket_t *p_cmdbuffer) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
	TL_SYS_InitConf_t Conf;

	pCmdBuffer = p_cmdbuffer;
 80080c4:	4a10      	ldr	r2, [pc, #64]	; (8008108 <TlInit+0x4c>)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6013      	str	r3, [r2, #0]

	LST_init_head(&SHciAsynchEventQueue);
 80080ca:	4810      	ldr	r0, [pc, #64]	; (800810c <TlInit+0x50>)
 80080cc:	f000 fa5c 	bl	8008588 <LST_init_head>

	Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80080d0:	2001      	movs	r0, #1
 80080d2:	f000 f825 	bl	8008120 <Cmd_SetStatus>

	SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80080d6:	4b0e      	ldr	r3, [pc, #56]	; (8008110 <TlInit+0x54>)
 80080d8:	2201      	movs	r2, #1
 80080da:	701a      	strb	r2, [r3, #0]

	/* Initialize low level driver */
	if (shciContext.io.Init) {
 80080dc:	4b0d      	ldr	r3, [pc, #52]	; (8008114 <TlInit+0x58>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00c      	beq.n	80080fe <TlInit+0x42>

		Conf.p_cmdbuffer = (uint8_t*) p_cmdbuffer;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	617b      	str	r3, [r7, #20]
		Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80080e8:	4b0b      	ldr	r3, [pc, #44]	; (8008118 <TlInit+0x5c>)
 80080ea:	60fb      	str	r3, [r7, #12]
		Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80080ec:	4b0b      	ldr	r3, [pc, #44]	; (800811c <TlInit+0x60>)
 80080ee:	613b      	str	r3, [r7, #16]
		shciContext.io.Init(&Conf);
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <TlInit+0x58>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f107 020c 	add.w	r2, r7, #12
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
	}

	return;
 80080fc:	bf00      	nop
 80080fe:	bf00      	nop
}
 8008100:	3718      	adds	r7, #24
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}
 8008106:	bf00      	nop
 8008108:	2000011c 	.word	0x2000011c
 800810c:	20000110 	.word	0x20000110
 8008110:	20000120 	.word	0x20000120
 8008114:	2000020c 	.word	0x2000020c
 8008118:	08008171 	.word	0x08008171
 800811c:	08008189 	.word	0x08008189

08008120 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus) {
 8008120:	b580      	push	{r7, lr}
 8008122:	b082      	sub	sp, #8
 8008124:	af00      	add	r7, sp, #0
 8008126:	4603      	mov	r3, r0
 8008128:	71fb      	strb	r3, [r7, #7]
	if (shcicmdstatus == SHCI_TL_CmdBusy) {
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10b      	bne.n	8008148 <Cmd_SetStatus+0x28>
		if (StatusNotCallBackFunction != 0) {
 8008130:	4b0d      	ldr	r3, [pc, #52]	; (8008168 <Cmd_SetStatus+0x48>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d003      	beq.n	8008140 <Cmd_SetStatus+0x20>
			StatusNotCallBackFunction(SHCI_TL_CmdBusy);
 8008138:	4b0b      	ldr	r3, [pc, #44]	; (8008168 <Cmd_SetStatus+0x48>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2000      	movs	r0, #0
 800813e:	4798      	blx	r3
		}
		SHCICmdStatus = SHCI_TL_CmdBusy;
 8008140:	4b0a      	ldr	r3, [pc, #40]	; (800816c <Cmd_SetStatus+0x4c>)
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
		if (StatusNotCallBackFunction != 0) {
			StatusNotCallBackFunction(SHCI_TL_CmdAvailable);
		}
	}

	return;
 8008146:	e00b      	b.n	8008160 <Cmd_SetStatus+0x40>
		SHCICmdStatus = SHCI_TL_CmdAvailable;
 8008148:	4b08      	ldr	r3, [pc, #32]	; (800816c <Cmd_SetStatus+0x4c>)
 800814a:	2201      	movs	r2, #1
 800814c:	701a      	strb	r2, [r3, #0]
		if (StatusNotCallBackFunction != 0) {
 800814e:	4b06      	ldr	r3, [pc, #24]	; (8008168 <Cmd_SetStatus+0x48>)
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d004      	beq.n	8008160 <Cmd_SetStatus+0x40>
			StatusNotCallBackFunction(SHCI_TL_CmdAvailable);
 8008156:	4b04      	ldr	r3, [pc, #16]	; (8008168 <Cmd_SetStatus+0x48>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2001      	movs	r0, #1
 800815c:	4798      	blx	r3
	return;
 800815e:	bf00      	nop
 8008160:	bf00      	nop
}
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}
 8008168:	2000022c 	.word	0x2000022c
 800816c:	20000118 	.word	0x20000118

08008170 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
	(void) (shcievt);
	shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 8008178:	2000      	movs	r0, #0
 800817a:	f7f8 f8da 	bl	8000332 <shci_cmd_resp_release>

	return;
 800817e:	bf00      	nop
}
 8008180:	3708      	adds	r7, #8
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
	...

08008188 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt) {
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
	LST_insert_tail(&SHciAsynchEventQueue, (tListNode*) shcievt);
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4805      	ldr	r0, [pc, #20]	; (80081a8 <TlUserEvtReceived+0x20>)
 8008194:	f000 fa50 	bl	8008638 <LST_insert_tail>
	shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8008198:	4803      	ldr	r0, [pc, #12]	; (80081a8 <TlUserEvtReceived+0x20>)
 800819a:	f7f8 f8be 	bl	800031a <shci_notify_asynch_evt>

	return;
 800819e:	bf00      	nop
}
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	20000110 	.word	0x20000110

080081ac <shci_register_io_bus>:
 ******************************************************************************
 */
#include "shci_tl.h"
#include "tl.h"

void shci_register_io_bus(tSHciIO *fops) {
 80081ac:	b480      	push	{r7}
 80081ae:	b083      	sub	sp, #12
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
	/* Register IO bus services */
	fops->Init = TL_SYS_Init;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4a05      	ldr	r2, [pc, #20]	; (80081cc <shci_register_io_bus+0x20>)
 80081b8:	601a      	str	r2, [r3, #0]
	fops->Send = TL_SYS_SendCmd;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a04      	ldr	r2, [pc, #16]	; (80081d0 <shci_register_io_bus+0x24>)
 80081be:	611a      	str	r2, [r3, #16]

	return;
 80081c0:	bf00      	nop
}
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	080082f5 	.word	0x080082f5
 80081d0:	08008349 	.word	0x08008349

080081d4 <TL_Enable>:
/* Public Functions Definition ------------------------------------------------------*/

/******************************************************************************
 * GENERAL
 ******************************************************************************/
void TL_Enable(void) {
 80081d4:	b580      	push	{r7, lr}
 80081d6:	af00      	add	r7, sp, #0
	HW_IPCC_Enable();
 80081d8:	f000 ffbc 	bl	8009154 <HW_IPCC_Enable>

	return;
 80081dc:	bf00      	nop
}
 80081de:	bd80      	pop	{r7, pc}

080081e0 <TL_Init>:

void TL_Init(void) {
 80081e0:	b580      	push	{r7, lr}
 80081e2:	af00      	add	r7, sp, #0
	TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80081e4:	4b10      	ldr	r3, [pc, #64]	; (8008228 <TL_Init+0x48>)
 80081e6:	4a11      	ldr	r2, [pc, #68]	; (800822c <TL_Init+0x4c>)
 80081e8:	601a      	str	r2, [r3, #0]
	TL_RefTable.p_ble_table = &TL_BleTable;
 80081ea:	4b0f      	ldr	r3, [pc, #60]	; (8008228 <TL_Init+0x48>)
 80081ec:	4a10      	ldr	r2, [pc, #64]	; (8008230 <TL_Init+0x50>)
 80081ee:	605a      	str	r2, [r3, #4]
	TL_RefTable.p_thread_table = &TL_ThreadTable;
 80081f0:	4b0d      	ldr	r3, [pc, #52]	; (8008228 <TL_Init+0x48>)
 80081f2:	4a10      	ldr	r2, [pc, #64]	; (8008234 <TL_Init+0x54>)
 80081f4:	609a      	str	r2, [r3, #8]
	TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80081f6:	4b0c      	ldr	r3, [pc, #48]	; (8008228 <TL_Init+0x48>)
 80081f8:	4a0f      	ldr	r2, [pc, #60]	; (8008238 <TL_Init+0x58>)
 80081fa:	621a      	str	r2, [r3, #32]
	TL_RefTable.p_lld_ble_table = &TL_LldBleTable;
 80081fc:	4b0a      	ldr	r3, [pc, #40]	; (8008228 <TL_Init+0x48>)
 80081fe:	4a0f      	ldr	r2, [pc, #60]	; (800823c <TL_Init+0x5c>)
 8008200:	625a      	str	r2, [r3, #36]	; 0x24
	TL_RefTable.p_sys_table = &TL_SysTable;
 8008202:	4b09      	ldr	r3, [pc, #36]	; (8008228 <TL_Init+0x48>)
 8008204:	4a0e      	ldr	r2, [pc, #56]	; (8008240 <TL_Init+0x60>)
 8008206:	60da      	str	r2, [r3, #12]
	TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 8008208:	4b07      	ldr	r3, [pc, #28]	; (8008228 <TL_Init+0x48>)
 800820a:	4a0e      	ldr	r2, [pc, #56]	; (8008244 <TL_Init+0x64>)
 800820c:	611a      	str	r2, [r3, #16]
	TL_RefTable.p_traces_table = &TL_TracesTable;
 800820e:	4b06      	ldr	r3, [pc, #24]	; (8008228 <TL_Init+0x48>)
 8008210:	4a0d      	ldr	r2, [pc, #52]	; (8008248 <TL_Init+0x68>)
 8008212:	615a      	str	r2, [r3, #20]
	TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8008214:	4b04      	ldr	r3, [pc, #16]	; (8008228 <TL_Init+0x48>)
 8008216:	4a0d      	ldr	r2, [pc, #52]	; (800824c <TL_Init+0x6c>)
 8008218:	619a      	str	r2, [r3, #24]
	TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800821a:	4b03      	ldr	r3, [pc, #12]	; (8008228 <TL_Init+0x48>)
 800821c:	4a0c      	ldr	r2, [pc, #48]	; (8008250 <TL_Init+0x70>)
 800821e:	61da      	str	r2, [r3, #28]
	HW_IPCC_Init();
 8008220:	f000 ffa8 	bl	8009174 <HW_IPCC_Init>

	return;
 8008224:	bf00      	nop
}
 8008226:	bd80      	pop	{r7, pc}
 8008228:	20030000 	.word	0x20030000
 800822c:	20030028 	.word	0x20030028
 8008230:	20030048 	.word	0x20030048
 8008234:	20030058 	.word	0x20030058
 8008238:	20030064 	.word	0x20030064
 800823c:	2003006c 	.word	0x2003006c
 8008240:	20030074 	.word	0x20030074
 8008244:	2003007c 	.word	0x2003007c
 8008248:	20030098 	.word	0x20030098
 800824c:	2003009c 	.word	0x2003009c
 8008250:	200300a8 	.word	0x200300a8

08008254 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init(void *pConf) {
 8008254:	b580      	push	{r7, lr}
 8008256:	b084      	sub	sp, #16
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
	MB_BleTable_t *p_bletable;

	TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t*) pConf;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	60fb      	str	r3, [r7, #12]

	LST_init_head(&EvtQueue);
 8008260:	4811      	ldr	r0, [pc, #68]	; (80082a8 <TL_BLE_Init+0x54>)
 8008262:	f000 f991 	bl	8008588 <LST_init_head>

	p_bletable = TL_RefTable.p_ble_table;
 8008266:	4b11      	ldr	r3, [pc, #68]	; (80082ac <TL_BLE_Init+0x58>)
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	60bb      	str	r3, [r7, #8]

	p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689a      	ldr	r2, [r3, #8]
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	601a      	str	r2, [r3, #0]
	p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68da      	ldr	r2, [r3, #12]
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	60da      	str	r2, [r3, #12]
	p_bletable->pcs_buffer = (uint8_t*) CsBuffer;
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	4a0c      	ldr	r2, [pc, #48]	; (80082b0 <TL_BLE_Init+0x5c>)
 8008280:	605a      	str	r2, [r3, #4]
	p_bletable->pevt_queue = (uint8_t*) &EvtQueue;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	4a08      	ldr	r2, [pc, #32]	; (80082a8 <TL_BLE_Init+0x54>)
 8008286:	609a      	str	r2, [r3, #8]

	HW_IPCC_BLE_Init();
 8008288:	f000 ff8a 	bl	80091a0 <HW_IPCC_BLE_Init>

	BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <TL_BLE_Init+0x60>)
 8008292:	6013      	str	r3, [r2, #0]
	BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	4a07      	ldr	r2, [pc, #28]	; (80082b8 <TL_BLE_Init+0x64>)
 800829a:	6013      	str	r3, [r2, #0]

	return 0;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	200300c4 	.word	0x200300c4
 80082ac:	20030000 	.word	0x20030000
 80082b0:	20030a48 	.word	0x20030a48
 80082b4:	20000238 	.word	0x20000238
 80082b8:	2000023c 	.word	0x2000023c

080082bc <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd(uint8_t *buffer, uint16_t size) {
 80082bc:	b580      	push	{r7, lr}
 80082be:	b082      	sub	sp, #8
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	6078      	str	r0, [r7, #4]
 80082c4:	460b      	mov	r3, r1
 80082c6:	807b      	strh	r3, [r7, #2]
	(void) (buffer);
	(void) (size);

	((TL_CmdPacket_t*) (TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type =
 80082c8:	4b09      	ldr	r3, [pc, #36]	; (80082f0 <TL_BLE_SendCmd+0x34>)
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2201      	movs	r2, #1
 80082d0:	721a      	strb	r2, [r3, #8]
			TL_BLECMD_PKT_TYPE;

	OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80082d2:	4b07      	ldr	r3, [pc, #28]	; (80082f0 <TL_BLE_SendCmd+0x34>)
 80082d4:	685b      	ldr	r3, [r3, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4619      	mov	r1, r3
 80082da:	2001      	movs	r0, #1
 80082dc:	f000 f8d6 	bl	800848c <OutputDbgTrace>

	HW_IPCC_BLE_SendCmd();
 80082e0:	f000 ff68 	bl	80091b4 <HW_IPCC_BLE_SendCmd>

	return 0;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	3708      	adds	r7, #8
 80082ea:	46bd      	mov	sp, r7
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20030000 	.word	0x20030000

080082f4 <TL_SYS_Init>:
}

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init(void *pConf) {
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b084      	sub	sp, #16
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
	MB_SysTable_t *p_systable;

	TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t*) pConf;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	60fb      	str	r3, [r7, #12]

	LST_init_head(&SystemEvtQueue);
 8008300:	480d      	ldr	r0, [pc, #52]	; (8008338 <TL_SYS_Init+0x44>)
 8008302:	f000 f941 	bl	8008588 <LST_init_head>
	p_systable = TL_RefTable.p_sys_table;
 8008306:	4b0d      	ldr	r3, [pc, #52]	; (800833c <TL_SYS_Init+0x48>)
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	60bb      	str	r3, [r7, #8]
	p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	689a      	ldr	r2, [r3, #8]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	601a      	str	r2, [r3, #0]
	p_systable->sys_queue = (uint8_t*) &SystemEvtQueue;
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	4a08      	ldr	r2, [pc, #32]	; (8008338 <TL_SYS_Init+0x44>)
 8008318:	605a      	str	r2, [r3, #4]

	HW_IPCC_SYS_Init();
 800831a:	f000 ff55 	bl	80091c8 <HW_IPCC_SYS_Init>

	SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a07      	ldr	r2, [pc, #28]	; (8008340 <TL_SYS_Init+0x4c>)
 8008324:	6013      	str	r3, [r2, #0]
	SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	4a06      	ldr	r2, [pc, #24]	; (8008344 <TL_SYS_Init+0x50>)
 800832c:	6013      	str	r3, [r2, #0]

	return 0;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3710      	adds	r7, #16
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	200300cc 	.word	0x200300cc
 800833c:	20030000 	.word	0x20030000
 8008340:	20000240 	.word	0x20000240
 8008344:	20000244 	.word	0x20000244

08008348 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd(uint8_t *buffer, uint16_t size) {
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
	(void) (buffer);
	(void) (size);

	((TL_CmdPacket_t*) (TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type =
 8008354:	4b09      	ldr	r3, [pc, #36]	; (800837c <TL_SYS_SendCmd+0x34>)
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2210      	movs	r2, #16
 800835c:	721a      	strb	r2, [r3, #8]
			TL_SYSCMD_PKT_TYPE;

	OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800835e:	4b07      	ldr	r3, [pc, #28]	; (800837c <TL_SYS_SendCmd+0x34>)
 8008360:	68db      	ldr	r3, [r3, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4619      	mov	r1, r3
 8008366:	2004      	movs	r0, #4
 8008368:	f000 f890 	bl	800848c <OutputDbgTrace>

	HW_IPCC_SYS_SendCmd();
 800836c:	f000 ff36 	bl	80091dc <HW_IPCC_SYS_SendCmd>

	return 0;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20030000 	.word	0x20030000

08008380 <TL_MM_Init>:
#endif

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init(TL_MM_Config_t *p_Config) {
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
	static MB_MemManagerTable_t *p_mem_manager_table;

	LST_init_head(&FreeBufQueue);
 8008388:	4817      	ldr	r0, [pc, #92]	; (80083e8 <TL_MM_Init+0x68>)
 800838a:	f000 f8fd 	bl	8008588 <LST_init_head>
	LST_init_head(&LocalFreeBufQueue);
 800838e:	4817      	ldr	r0, [pc, #92]	; (80083ec <TL_MM_Init+0x6c>)
 8008390:	f000 f8fa 	bl	8008588 <LST_init_head>

	p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 8008394:	4b16      	ldr	r3, [pc, #88]	; (80083f0 <TL_MM_Init+0x70>)
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	4a16      	ldr	r2, [pc, #88]	; (80083f4 <TL_MM_Init+0x74>)
 800839a:	6013      	str	r3, [r2, #0]

	p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800839c:	4b15      	ldr	r3, [pc, #84]	; (80083f4 <TL_MM_Init+0x74>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	687a      	ldr	r2, [r7, #4]
 80083a2:	6892      	ldr	r2, [r2, #8]
 80083a4:	609a      	str	r2, [r3, #8]
	p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 80083a6:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <TL_MM_Init+0x74>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	68d2      	ldr	r2, [r2, #12]
 80083ae:	60da      	str	r2, [r3, #12]
	p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*) &FreeBufQueue;
 80083b0:	4b10      	ldr	r3, [pc, #64]	; (80083f4 <TL_MM_Init+0x74>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	4a0c      	ldr	r2, [pc, #48]	; (80083e8 <TL_MM_Init+0x68>)
 80083b6:	611a      	str	r2, [r3, #16]
	p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 80083b8:	4b0e      	ldr	r3, [pc, #56]	; (80083f4 <TL_MM_Init+0x74>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	6812      	ldr	r2, [r2, #0]
 80083c0:	601a      	str	r2, [r3, #0]
	p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 80083c2:	4b0c      	ldr	r3, [pc, #48]	; (80083f4 <TL_MM_Init+0x74>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	687a      	ldr	r2, [r7, #4]
 80083c8:	6852      	ldr	r2, [r2, #4]
 80083ca:	605a      	str	r2, [r3, #4]
	p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80083cc:	4b09      	ldr	r3, [pc, #36]	; (80083f4 <TL_MM_Init+0x74>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	6912      	ldr	r2, [r2, #16]
 80083d4:	615a      	str	r2, [r3, #20]
	p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80083d6:	4b07      	ldr	r3, [pc, #28]	; (80083f4 <TL_MM_Init+0x74>)
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	687a      	ldr	r2, [r7, #4]
 80083dc:	6952      	ldr	r2, [r2, #20]
 80083de:	619a      	str	r2, [r3, #24]

	return;
 80083e0:	bf00      	nop
}
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	200300b4 	.word	0x200300b4
 80083ec:	20000230 	.word	0x20000230
 80083f0:	20030000 	.word	0x20030000
 80083f4:	20000248 	.word	0x20000248

080083f8 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t *phcievt) {
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b082      	sub	sp, #8
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
	LST_insert_tail(&LocalFreeBufQueue, (tListNode*) phcievt);
 8008400:	6879      	ldr	r1, [r7, #4]
 8008402:	4807      	ldr	r0, [pc, #28]	; (8008420 <TL_MM_EvtDone+0x28>)
 8008404:	f000 f918 	bl	8008638 <LST_insert_tail>

	OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*) phcievt);
 8008408:	6879      	ldr	r1, [r7, #4]
 800840a:	2000      	movs	r0, #0
 800840c:	f000 f83e 	bl	800848c <OutputDbgTrace>

	HW_IPCC_MM_SendFreeBuf(SendFreeBuf);
 8008410:	4804      	ldr	r0, [pc, #16]	; (8008424 <TL_MM_EvtDone+0x2c>)
 8008412:	f000 fef1 	bl	80091f8 <HW_IPCC_MM_SendFreeBuf>

	return;
 8008416:	bf00      	nop
}
 8008418:	3708      	adds	r7, #8
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000230 	.word	0x20000230
 8008424:	08008429 	.word	0x08008429

08008428 <SendFreeBuf>:

static void SendFreeBuf(void) {
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
	tListNode *p_node;

	while ( FALSE == LST_is_empty(&LocalFreeBufQueue)) {
 800842e:	e00c      	b.n	800844a <SendFreeBuf+0x22>
		LST_remove_head(&LocalFreeBufQueue, (tListNode**) &p_node);
 8008430:	1d3b      	adds	r3, r7, #4
 8008432:	4619      	mov	r1, r3
 8008434:	480a      	ldr	r0, [pc, #40]	; (8008460 <SendFreeBuf+0x38>)
 8008436:	f000 f946 	bl	80086c6 <LST_remove_head>
		LST_insert_tail(
				(tListNode*) (TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue),
 800843a:	4b0a      	ldr	r3, [pc, #40]	; (8008464 <SendFreeBuf+0x3c>)
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	691b      	ldr	r3, [r3, #16]
		LST_insert_tail(
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	4611      	mov	r1, r2
 8008444:	4618      	mov	r0, r3
 8008446:	f000 f8f7 	bl	8008638 <LST_insert_tail>
	while ( FALSE == LST_is_empty(&LocalFreeBufQueue)) {
 800844a:	4805      	ldr	r0, [pc, #20]	; (8008460 <SendFreeBuf+0x38>)
 800844c:	f000 f8ac 	bl	80085a8 <LST_is_empty>
 8008450:	4603      	mov	r3, r0
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0ec      	beq.n	8008430 <SendFreeBuf+0x8>
				p_node);
	}

	return;
 8008456:	bf00      	nop
}
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
 800845e:	bf00      	nop
 8008460:	20000230 	.word	0x20000230
 8008464:	20030000 	.word	0x20030000

08008468 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init(void) {
 8008468:	b580      	push	{r7, lr}
 800846a:	af00      	add	r7, sp, #0
	LST_init_head(&TracesEvtQueue);
 800846c:	4805      	ldr	r0, [pc, #20]	; (8008484 <TL_TRACES_Init+0x1c>)
 800846e:	f000 f88b 	bl	8008588 <LST_init_head>

	TL_RefTable.p_traces_table->traces_queue = (uint8_t*) &TracesEvtQueue;
 8008472:	4b05      	ldr	r3, [pc, #20]	; (8008488 <TL_TRACES_Init+0x20>)
 8008474:	695b      	ldr	r3, [r3, #20]
 8008476:	4a03      	ldr	r2, [pc, #12]	; (8008484 <TL_TRACES_Init+0x1c>)
 8008478:	601a      	str	r2, [r3, #0]

	HW_IPCC_TRACES_Init();
 800847a:	f000 fedf 	bl	800923c <HW_IPCC_TRACES_Init>

	return;
 800847e:	bf00      	nop
}
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	200300bc 	.word	0x200300bc
 8008488:	20030000 	.word	0x20030000

0800848c <OutputDbgTrace>:
}

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t *buffer) {
 800848c:	b480      	push	{r7}
 800848e:	b085      	sub	sp, #20
 8008490:	af00      	add	r7, sp, #0
 8008492:	4603      	mov	r3, r0
 8008494:	6039      	str	r1, [r7, #0]
 8008496:	71fb      	strb	r3, [r7, #7]
	TL_EvtPacket_t *p_evt_packet;
	TL_CmdPacket_t *p_cmd_packet;

	switch (packet_type) {
 8008498:	79fb      	ldrb	r3, [r7, #7]
 800849a:	2b06      	cmp	r3, #6
 800849c:	d845      	bhi.n	800852a <OutputDbgTrace+0x9e>
 800849e:	a201      	add	r2, pc, #4	; (adr r2, 80084a4 <OutputDbgTrace+0x18>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084c1 	.word	0x080084c1
 80084a8:	080084e5 	.word	0x080084e5
 80084ac:	080084eb 	.word	0x080084eb
 80084b0:	080084ff 	.word	0x080084ff
 80084b4:	0800850b 	.word	0x0800850b
 80084b8:	08008511 	.word	0x08008511
 80084bc:	0800851f 	.word	0x0800851f
	case TL_MB_MM_RELEASE_BUFFER:
		p_evt_packet = (TL_EvtPacket_t*) buffer;
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	60fb      	str	r3, [r7, #12]
		switch (p_evt_packet->evtserial.evt.evtcode) {
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	7a5b      	ldrb	r3, [r3, #9]
 80084c8:	2bff      	cmp	r3, #255	; 0xff
 80084ca:	d005      	beq.n	80084d8 <OutputDbgTrace+0x4c>
 80084cc:	2bff      	cmp	r3, #255	; 0xff
 80084ce:	dc05      	bgt.n	80084dc <OutputDbgTrace+0x50>
 80084d0:	2b0e      	cmp	r3, #14
 80084d2:	d005      	beq.n	80084e0 <OutputDbgTrace+0x54>
 80084d4:	2b0f      	cmp	r3, #15

		default:
			TL_MM_DBG_MSG("mm evt released: 0x%02X",
					p_evt_packet->evtserial.evt.evtcode);
			TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
			break;
 80084d6:	e001      	b.n	80084dc <OutputDbgTrace+0x50>
			break;
 80084d8:	bf00      	nop
 80084da:	e027      	b.n	800852c <OutputDbgTrace+0xa0>
			break;
 80084dc:	bf00      	nop
 80084de:	e025      	b.n	800852c <OutputDbgTrace+0xa0>
			break;
 80084e0:	bf00      	nop
		}

		TL_MM_DBG_MSG("\r\n");
		break;
 80084e2:	e023      	b.n	800852c <OutputDbgTrace+0xa0>

	case TL_MB_BLE_CMD:
		p_cmd_packet = (TL_CmdPacket_t*) buffer;
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	60bb      	str	r3, [r7, #8]
		}
		TL_HCI_CMD_DBG_MSG("\r\n");

		TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial,
				p_cmd_packet->cmdserial.cmd.plen + TL_CMD_HDR_SIZE);
		break;
 80084e8:	e020      	b.n	800852c <OutputDbgTrace+0xa0>

	case TL_MB_BLE_CMD_RSP:
		p_evt_packet = (TL_EvtPacket_t*) buffer;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	60fb      	str	r3, [r7, #12]
		switch (p_evt_packet->evtserial.evt.evtcode) {
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	7a5b      	ldrb	r3, [r3, #9]
 80084f2:	2b0e      	cmp	r3, #14
 80084f4:	d001      	beq.n	80084fa <OutputDbgTrace+0x6e>
 80084f6:	2b0f      	cmp	r3, #15
			break;

		default:
			TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X",
					p_evt_packet->evtserial.evt.evtcode);
			break;
 80084f8:	e000      	b.n	80084fc <OutputDbgTrace+0x70>
			break;
 80084fa:	bf00      	nop

		TL_HCI_CMD_DBG_MSG("\r\n");

		TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial,
				p_evt_packet->evtserial.evt.plen + TL_EVT_HDR_SIZE);
		break;
 80084fc:	e016      	b.n	800852c <OutputDbgTrace+0xa0>

	case TL_MB_BLE_ASYNCH_EVT:
		p_evt_packet = (TL_EvtPacket_t*) buffer;
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	60fb      	str	r3, [r7, #12]
		if (p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE) {
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	7a5b      	ldrb	r3, [r3, #9]
 8008506:	2bff      	cmp	r3, #255	; 0xff

		TL_HCI_EVT_DBG_MSG("\r\n");

		TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial,
				p_evt_packet->evtserial.evt.plen + TL_EVT_HDR_SIZE);
		break;
 8008508:	e010      	b.n	800852c <OutputDbgTrace+0xa0>

	case TL_MB_SYS_CMD:
		p_cmd_packet = (TL_CmdPacket_t*) buffer;
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	60bb      	str	r3, [r7, #8]
		}
		TL_SHCI_CMD_DBG_MSG("\r\n");

		TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial,
				p_cmd_packet->cmdserial.cmd.plen + TL_CMD_HDR_SIZE);
		break;
 800850e:	e00d      	b.n	800852c <OutputDbgTrace+0xa0>

	case TL_MB_SYS_CMD_RSP:
		p_evt_packet = (TL_EvtPacket_t*) buffer;
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	60fb      	str	r3, [r7, #12]
		switch (p_evt_packet->evtserial.evt.evtcode) {
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	7a5b      	ldrb	r3, [r3, #9]
 8008518:	2b0e      	cmp	r3, #14
			break;

		default:
			TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X",
					p_evt_packet->evtserial.evt.evtcode);
			break;
 800851a:	bf00      	nop

		TL_SHCI_CMD_DBG_MSG("\r\n");

		TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial,
				p_evt_packet->evtserial.evt.plen + TL_EVT_HDR_SIZE);
		break;
 800851c:	e006      	b.n	800852c <OutputDbgTrace+0xa0>

	case TL_MB_SYS_ASYNCH_EVT:
		p_evt_packet = (TL_EvtPacket_t*) buffer;
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	60fb      	str	r3, [r7, #12]
		if (p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE) {
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	7a5b      	ldrb	r3, [r3, #9]
 8008526:	2bff      	cmp	r3, #255	; 0xff

		TL_SHCI_EVT_DBG_MSG("\r\n");

		TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial,
				p_evt_packet->evtserial.evt.plen + TL_EVT_HDR_SIZE);
		break;
 8008528:	e000      	b.n	800852c <OutputDbgTrace+0xa0>

	default:
		break;
 800852a:	bf00      	nop
	}

	return;
 800852c:	bf00      	nop
}
 800852e:	3714      	adds	r7, #20
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <OTP_Read>:
/* Private variables ---------------------------------------------------------*/
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t* OTP_Read(uint8_t id) {
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	4603      	mov	r3, r0
 8008540:	71fb      	strb	r3, [r7, #7]
	uint8_t *p_id;

	p_id = (uint8_t*) (CFG_OTP_END_ADRESS - 7);
 8008542:	4b0f      	ldr	r3, [pc, #60]	; (8008580 <OTP_Read+0x48>)
 8008544:	60fb      	str	r3, [r7, #12]

	while (((*(p_id + 7)) != id) && (p_id != (uint8_t*) CFG_OTP_BASE_ADDRESS)) {
 8008546:	e002      	b.n	800854e <OTP_Read+0x16>
		p_id -= 8;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	3b08      	subs	r3, #8
 800854c:	60fb      	str	r3, [r7, #12]
	while (((*(p_id + 7)) != id) && (p_id != (uint8_t*) CFG_OTP_BASE_ADDRESS)) {
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3307      	adds	r3, #7
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	79fa      	ldrb	r2, [r7, #7]
 8008556:	429a      	cmp	r2, r3
 8008558:	d003      	beq.n	8008562 <OTP_Read+0x2a>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	4a09      	ldr	r2, [pc, #36]	; (8008584 <OTP_Read+0x4c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d1f2      	bne.n	8008548 <OTP_Read+0x10>
	}

	if ((*(p_id + 7)) != id) {
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	3307      	adds	r3, #7
 8008566:	781b      	ldrb	r3, [r3, #0]
 8008568:	79fa      	ldrb	r2, [r7, #7]
 800856a:	429a      	cmp	r2, r3
 800856c:	d001      	beq.n	8008572 <OTP_Read+0x3a>
		p_id = 0;
 800856e:	2300      	movs	r3, #0
 8008570:	60fb      	str	r3, [r7, #12]
	}

	return p_id;
 8008572:	68fb      	ldr	r3, [r7, #12]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3714      	adds	r7, #20
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr
 8008580:	1fff73f8 	.word	0x1fff73f8
 8008584:	1fff7000 	.word	0x1fff7000

08008588 <LST_init_head>:
#include "stm_list.h"

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head(tListNode *listHead) {
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	listHead->next = listHead;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	601a      	str	r2, [r3, #0]
	listHead->prev = listHead;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	687a      	ldr	r2, [r7, #4]
 800859a:	605a      	str	r2, [r3, #4]
}
 800859c:	bf00      	nop
 800859e:	370c      	adds	r7, #12
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <LST_is_empty>:

uint8_t LST_is_empty(tListNode *listHead) {
 80085a8:	b480      	push	{r7}
 80085aa:	b087      	sub	sp, #28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085b0:	f3ef 8310 	mrs	r3, PRIMASK
 80085b4:	60fb      	str	r3, [r7, #12]
	return (result);
 80085b6:	68fb      	ldr	r3, [r7, #12]
	uint32_t primask_bit;
	uint8_t return_value;

	primask_bit = __get_PRIMASK(); /**< backup PRIMASK bit */
 80085b8:	613b      	str	r3, [r7, #16]
	__ASM volatile ("cpsid i" : : : "memory");
 80085ba:	b672      	cpsid	i
}
 80085bc:	bf00      	nop
	__disable_irq(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
	if (listHead->next == listHead) {
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d102      	bne.n	80085ce <LST_is_empty+0x26>
		return_value = TRUE;
 80085c8:	2301      	movs	r3, #1
 80085ca:	75fb      	strb	r3, [r7, #23]
 80085cc:	e001      	b.n	80085d2 <LST_is_empty+0x2a>
	} else {
		return_value = FALSE;
 80085ce:	2300      	movs	r3, #0
 80085d0:	75fb      	strb	r3, [r7, #23]
 80085d2:	693b      	ldr	r3, [r7, #16]
 80085d4:	60bb      	str	r3, [r7, #8]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f383 8810 	msr	PRIMASK, r3
}
 80085dc:	bf00      	nop
	}
	__set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/

	return return_value;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e0:	4618      	mov	r0, r3
 80085e2:	371c      	adds	r7, #28
 80085e4:	46bd      	mov	sp, r7
 80085e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ea:	4770      	bx	lr

080085ec <LST_insert_head>:

void LST_insert_head(tListNode *listHead, tListNode *node) {
 80085ec:	b480      	push	{r7}
 80085ee:	b087      	sub	sp, #28
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085f6:	f3ef 8310 	mrs	r3, PRIMASK
 80085fa:	60fb      	str	r3, [r7, #12]
	return (result);
 80085fc:	68fb      	ldr	r3, [r7, #12]
	uint32_t primask_bit;

	primask_bit = __get_PRIMASK(); /**< backup PRIMASK bit */
 80085fe:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 8008600:	b672      	cpsid	i
}
 8008602:	bf00      	nop
	__disable_irq(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

	node->next = listHead->next;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681a      	ldr	r2, [r3, #0]
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	601a      	str	r2, [r3, #0]
	node->prev = listHead;
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	605a      	str	r2, [r3, #4]
	listHead->next = node;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	683a      	ldr	r2, [r7, #0]
 8008616:	601a      	str	r2, [r3, #0]
	(node->next)->prev = node;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	683a      	ldr	r2, [r7, #0]
 800861e:	605a      	str	r2, [r3, #4]
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f383 8810 	msr	PRIMASK, r3
}
 800862a:	bf00      	nop

	__set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
}
 800862c:	bf00      	nop
 800862e:	371c      	adds	r7, #28
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <LST_insert_tail>:

void LST_insert_tail(tListNode *listHead, tListNode *node) {
 8008638:	b480      	push	{r7}
 800863a:	b087      	sub	sp, #28
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008642:	f3ef 8310 	mrs	r3, PRIMASK
 8008646:	60fb      	str	r3, [r7, #12]
	return (result);
 8008648:	68fb      	ldr	r3, [r7, #12]
	uint32_t primask_bit;

	primask_bit = __get_PRIMASK(); /**< backup PRIMASK bit */
 800864a:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 800864c:	b672      	cpsid	i
}
 800864e:	bf00      	nop
	__disable_irq(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

	node->next = listHead;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	687a      	ldr	r2, [r7, #4]
 8008654:	601a      	str	r2, [r3, #0]
	node->prev = listHead->prev;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	683b      	ldr	r3, [r7, #0]
 800865c:	605a      	str	r2, [r3, #4]
	listHead->prev = node;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	605a      	str	r2, [r3, #4]
	(node->prev)->next = node;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	683a      	ldr	r2, [r7, #0]
 800866a:	601a      	str	r2, [r3, #0]
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f383 8810 	msr	PRIMASK, r3
}
 8008676:	bf00      	nop

	__set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
}
 8008678:	bf00      	nop
 800867a:	371c      	adds	r7, #28
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <LST_remove_node>:

void LST_remove_node(tListNode *node) {
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800868c:	f3ef 8310 	mrs	r3, PRIMASK
 8008690:	60fb      	str	r3, [r7, #12]
	return (result);
 8008692:	68fb      	ldr	r3, [r7, #12]
	uint32_t primask_bit;

	primask_bit = __get_PRIMASK(); /**< backup PRIMASK bit */
 8008694:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 8008696:	b672      	cpsid	i
}
 8008698:	bf00      	nop
	__disable_irq(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

	(node->prev)->next = node->next;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6812      	ldr	r2, [r2, #0]
 80086a2:	601a      	str	r2, [r3, #0]
	(node->next)->prev = node->prev;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6852      	ldr	r2, [r2, #4]
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	697b      	ldr	r3, [r7, #20]
 80086b0:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	f383 8810 	msr	PRIMASK, r3
}
 80086b8:	bf00      	nop

	__set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
}
 80086ba:	bf00      	nop
 80086bc:	371c      	adds	r7, #28
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <LST_remove_head>:

void LST_remove_head(tListNode *listHead, tListNode **node) {
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b086      	sub	sp, #24
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d0:	f3ef 8310 	mrs	r3, PRIMASK
 80086d4:	60fb      	str	r3, [r7, #12]
	return (result);
 80086d6:	68fb      	ldr	r3, [r7, #12]
	uint32_t primask_bit;

	primask_bit = __get_PRIMASK(); /**< backup PRIMASK bit */
 80086d8:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 80086da:	b672      	cpsid	i
}
 80086dc:	bf00      	nop
	__disable_irq(); /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

	*node = listHead->next;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	601a      	str	r2, [r3, #0]
	LST_remove_node(listHead->next);
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4618      	mov	r0, r3
 80086ec:	f7ff ffca 	bl	8008684 <LST_remove_node>
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	f383 8810 	msr	PRIMASK, r3
}
 80086fa:	bf00      	nop

	__set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
}
 80086fc:	bf00      	nop
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8008704:	b480      	push	{r7}
 8008706:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8008708:	4b03      	ldr	r3, [pc, #12]	; (8008718 <LL_FLASH_GetUDN+0x14>)
 800870a:	681b      	ldr	r3, [r3, #0]
}
 800870c:	4618      	mov	r0, r3
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	1fff7580 	.word	0x1fff7580

0800871c <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 fo STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 800871c:	b480      	push	{r7}
 800871e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8008720:	4b03      	ldr	r3, [pc, #12]	; (8008730 <LL_FLASH_GetDeviceID+0x14>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	b2db      	uxtb	r3, r3
}
 8008726:	4618      	mov	r0, r3
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	1fff7584 	.word	0x1fff7584

08008734 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Compagny ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Compagny ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8008734:	b480      	push	{r7}
 8008736:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U ) & 0x00FFFFFFU);
 8008738:	4b03      	ldr	r3, [pc, #12]	; (8008748 <LL_FLASH_GetSTCompanyID+0x14>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	0a1b      	lsrs	r3, r3, #8
}
 800873e:	4618      	mov	r0, r3
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr
 8008748:	1fff7584 	.word	0x1fff7584

0800874c <APP_BLE_Init>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800874c:	b5b0      	push	{r4, r5, r7, lr}
 800874e:	b08c      	sub	sp, #48	; 0x30
 8008750:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8008752:	4b1f      	ldr	r3, [pc, #124]	; (80087d0 <APP_BLE_Init+0x84>)
 8008754:	463c      	mov	r4, r7
 8008756:	461d      	mov	r5, r3
 8008758:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800875a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800875c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800875e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008760:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8008764:	c407      	stmia	r4!, {r0, r1, r2}
 8008766:	7023      	strb	r3, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 8008768:	f000 f8fa 	bl	8008960 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 800876c:	2101      	movs	r1, #1
 800876e:	2002      	movs	r0, #2
 8008770:	f000 fd80 	bl	8009274 <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8008774:	4a17      	ldr	r2, [pc, #92]	; (80087d4 <APP_BLE_Init+0x88>)
 8008776:	2100      	movs	r1, #0
 8008778:	2004      	movs	r0, #4
 800877a:	f000 fe8f 	bl	800949c <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  SHCI_C2_BLE_Init( &ble_init_cmd_packet );
 800877e:	463b      	mov	r3, r7
 8008780:	4618      	mov	r0, r3
 8008782:	f7ff fa2f 	bl	8007be4 <SHCI_C2_BLE_Init>

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8008786:	f000 f901 	bl	800898c <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 800878a:	f7ff f989 	bl	8007aa0 <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800878e:	4b12      	ldr	r3, [pc, #72]	; (80087d8 <APP_BLE_Init+0x8c>)
 8008790:	2200      	movs	r2, #0
 8008792:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8008796:	4b10      	ldr	r3, [pc, #64]	; (80087d8 <APP_BLE_Init+0x8c>)
 8008798:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800879c:	84da      	strh	r2, [r3, #38]	; 0x26
  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800879e:	4a0f      	ldr	r2, [pc, #60]	; (80087dc <APP_BLE_Init+0x90>)
 80087a0:	2100      	movs	r1, #0
 80087a2:	2001      	movs	r0, #1
 80087a4:	f000 fe7a 	bl	800949c <UTIL_SEQ_RegTask>
  /**
   * Initialization of ADV - Ad Manufacturer Element - Support OTA Bit Mask
   */
#if(RADIO_ACTIVITY_EVENT != 0)
  aci_hal_set_radio_activity_mask(0x0006);
 80087a8:	2006      	movs	r0, #6
 80087aa:	f7ff f81a 	bl	80077e2 <aci_hal_set_radio_activity_mask>
  mutex = 1;
#endif
  /**
   * Initialize Custom Template Application
   */
  Custom_APP_Init();
 80087ae:	f000 faa8 	bl	8008d02 <Custom_APP_Init>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 80087b2:	4b09      	ldr	r3, [pc, #36]	; (80087d8 <APP_BLE_Init+0x8c>)
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 80087ba:	4b07      	ldr	r3, [pc, #28]	; (80087d8 <APP_BLE_Init+0x8c>)
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  /**
   * Start to Advertise to be connected by a Client
   */
   Adv_Request(APP_BLE_FAST_ADV);
 80087c2:	2001      	movs	r0, #1
 80087c4:	f000 f9a2 	bl	8008b0c <Adv_Request>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */
  return;
 80087c8:	bf00      	nop
}
 80087ca:	3730      	adds	r7, #48	; 0x30
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bdb0      	pop	{r4, r5, r7, pc}
 80087d0:	080097e0 	.word	0x080097e0
 80087d4:	08007c79 	.word	0x08007c79
 80087d8:	20000124 	.word	0x20000124
 80087dc:	08008bf5 	.word	0x08008bf5

080087e0 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *pckt )
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b08a      	sub	sp, #40	; 0x28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_le_meta_event *meta_evt;
  evt_blue_aci *blue_evt;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	3301      	adds	r3, #1
 80087ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  switch (event_pckt->evt)
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	2bff      	cmp	r3, #255	; 0xff
 80087f4:	d053      	beq.n	800889e <SVCCTL_App_Notification+0xbe>
 80087f6:	2bff      	cmp	r3, #255	; 0xff
 80087f8:	f300 80a3 	bgt.w	8008942 <SVCCTL_App_Notification+0x162>
 80087fc:	2b05      	cmp	r3, #5
 80087fe:	d002      	beq.n	8008806 <SVCCTL_App_Notification+0x26>
 8008800:	2b3e      	cmp	r3, #62	; 0x3e
 8008802:	d020      	beq.n	8008846 <SVCCTL_App_Notification+0x66>

      default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
        break;
 8008804:	e09d      	b.n	8008942 <SVCCTL_App_Notification+0x162>
      disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) event_pckt->data;
 8008806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008808:	3302      	adds	r3, #2
 800880a:	60bb      	str	r3, [r7, #8]
      if (disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008812:	b29a      	uxth	r2, r3
 8008814:	4b4f      	ldr	r3, [pc, #316]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008818:	429a      	cmp	r2, r3
 800881a:	d106      	bne.n	800882a <SVCCTL_App_Notification+0x4a>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800881c:	4b4d      	ldr	r3, [pc, #308]	; (8008954 <SVCCTL_App_Notification+0x174>)
 800881e:	2200      	movs	r2, #0
 8008820:	84da      	strh	r2, [r3, #38]	; 0x26
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008822:	4b4c      	ldr	r3, [pc, #304]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008824:	2200      	movs	r2, #0
 8008826:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      Adv_Request(APP_BLE_FAST_ADV);
 800882a:	2001      	movs	r0, #1
 800882c:	f000 f96e 	bl	8008b0c <Adv_Request>
      handleNotification.Custom_Evt_Opcode = CUSTOM_DISCON_HANDLE_EVT;
 8008830:	4b49      	ldr	r3, [pc, #292]	; (8008958 <SVCCTL_App_Notification+0x178>)
 8008832:	2201      	movs	r2, #1
 8008834:	701a      	strb	r2, [r3, #0]
      handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8008836:	4b47      	ldr	r3, [pc, #284]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008838:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 800883a:	4b47      	ldr	r3, [pc, #284]	; (8008958 <SVCCTL_App_Notification+0x178>)
 800883c:	805a      	strh	r2, [r3, #2]
      Custom_APP_Notification(&handleNotification);
 800883e:	4846      	ldr	r0, [pc, #280]	; (8008958 <SVCCTL_App_Notification+0x178>)
 8008840:	f000 fa4b 	bl	8008cda <Custom_APP_Notification>
    break; /* EVT_DISCONN_COMPLETE */
 8008844:	e080      	b.n	8008948 <SVCCTL_App_Notification+0x168>
      meta_evt = (evt_le_meta_event*) event_pckt->data;
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	3302      	adds	r3, #2
 800884a:	613b      	str	r3, [r7, #16]
      switch (meta_evt->subevent)
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	781b      	ldrb	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d001      	beq.n	8008858 <SVCCTL_App_Notification+0x78>
 8008854:	2b03      	cmp	r3, #3
          break;
 8008856:	e021      	b.n	800889c <SVCCTL_App_Notification+0xbc>
          connection_complete_event = (hci_le_connection_complete_event_rp0 *) meta_evt->data;
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	3301      	adds	r3, #1
 800885c:	60fb      	str	r3, [r7, #12]
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 800885e:	4b3d      	ldr	r3, [pc, #244]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008860:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008864:	2b04      	cmp	r3, #4
 8008866:	d104      	bne.n	8008872 <SVCCTL_App_Notification+0x92>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8008868:	4b3a      	ldr	r3, [pc, #232]	; (8008954 <SVCCTL_App_Notification+0x174>)
 800886a:	2206      	movs	r2, #6
 800886c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
 8008870:	e003      	b.n	800887a <SVCCTL_App_Notification+0x9a>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8008872:	4b38      	ldr	r3, [pc, #224]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008874:	2205      	movs	r2, #5
 8008876:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = connection_complete_event->Connection_Handle;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8008880:	b29a      	uxth	r2, r3
 8008882:	4b34      	ldr	r3, [pc, #208]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008884:	84da      	strh	r2, [r3, #38]	; 0x26
          handleNotification.Custom_Evt_Opcode = CUSTOM_CONN_HANDLE_EVT;
 8008886:	4b34      	ldr	r3, [pc, #208]	; (8008958 <SVCCTL_App_Notification+0x178>)
 8008888:	2200      	movs	r2, #0
 800888a:	701a      	strb	r2, [r3, #0]
          handleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 800888c:	4b31      	ldr	r3, [pc, #196]	; (8008954 <SVCCTL_App_Notification+0x174>)
 800888e:	8cda      	ldrh	r2, [r3, #38]	; 0x26
 8008890:	4b31      	ldr	r3, [pc, #196]	; (8008958 <SVCCTL_App_Notification+0x178>)
 8008892:	805a      	strh	r2, [r3, #2]
          Custom_APP_Notification(&handleNotification);
 8008894:	4830      	ldr	r0, [pc, #192]	; (8008958 <SVCCTL_App_Notification+0x178>)
 8008896:	f000 fa20 	bl	8008cda <Custom_APP_Notification>
        break; /* HCI_EVT_LE_CONN_COMPLETE */
 800889a:	bf00      	nop
    break; /* HCI_EVT_LE_META_EVENT */
 800889c:	e054      	b.n	8008948 <SVCCTL_App_Notification+0x168>
      blue_evt = (evt_blue_aci*) event_pckt->data;
 800889e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088a0:	3302      	adds	r3, #2
 80088a2:	623b      	str	r3, [r7, #32]
      switch (blue_evt->ecode)
 80088a4:	6a3b      	ldr	r3, [r7, #32]
 80088a6:	881b      	ldrh	r3, [r3, #0]
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ae:	d042      	beq.n	8008936 <SVCCTL_App_Notification+0x156>
 80088b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088b4:	dc47      	bgt.n	8008946 <SVCCTL_App_Notification+0x166>
 80088b6:	2b04      	cmp	r3, #4
 80088b8:	d03f      	beq.n	800893a <SVCCTL_App_Notification+0x15a>
 80088ba:	2b04      	cmp	r3, #4
 80088bc:	db43      	blt.n	8008946 <SVCCTL_App_Notification+0x166>
 80088be:	f240 420a 	movw	r2, #1034	; 0x40a
 80088c2:	4293      	cmp	r3, r2
 80088c4:	dc3f      	bgt.n	8008946 <SVCCTL_App_Notification+0x166>
 80088c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ca:	dd3c      	ble.n	8008946 <SVCCTL_App_Notification+0x166>
 80088cc:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 80088d0:	2b09      	cmp	r3, #9
 80088d2:	d838      	bhi.n	8008946 <SVCCTL_App_Notification+0x166>
 80088d4:	a201      	add	r2, pc, #4	; (adr r2, 80088dc <SVCCTL_App_Notification+0xfc>)
 80088d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088da:	bf00      	nop
 80088dc:	0800892f 	.word	0x0800892f
 80088e0:	08008905 	.word	0x08008905
 80088e4:	08008947 	.word	0x08008947
 80088e8:	08008947 	.word	0x08008947
 80088ec:	08008947 	.word	0x08008947
 80088f0:	08008947 	.word	0x08008947
 80088f4:	0800893f 	.word	0x0800893f
 80088f8:	08008947 	.word	0x08008947
 80088fc:	08008913 	.word	0x08008913
 8008900:	0800893f 	.word	0x0800893f
            aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, CFG_FIXED_PIN);
 8008904:	4b13      	ldr	r3, [pc, #76]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008906:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008908:	4914      	ldr	r1, [pc, #80]	; (800895c <SVCCTL_App_Notification+0x17c>)
 800890a:	4618      	mov	r0, r3
 800890c:	f7fe faab 	bl	8006e66 <aci_gap_pass_key_resp>
        break;
 8008910:	e016      	b.n	8008940 <SVCCTL_App_Notification+0x160>
            evt_numeric_value = (aci_gap_numeric_comparison_value_event_rp0 *)blue_evt->data;
 8008912:	6a3b      	ldr	r3, [r7, #32]
 8008914:	3302      	adds	r3, #2
 8008916:	61fb      	str	r3, [r7, #28]
            numeric_value = evt_numeric_value->Numeric_Value;
 8008918:	69fb      	ldr	r3, [r7, #28]
 800891a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800891e:	61bb      	str	r3, [r7, #24]
            aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES);
 8008920:	4b0c      	ldr	r3, [pc, #48]	; (8008954 <SVCCTL_App_Notification+0x174>)
 8008922:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008924:	2101      	movs	r1, #1
 8008926:	4618      	mov	r0, r3
 8008928:	f7fe fbff 	bl	800712a <aci_gap_numeric_comparison_value_confirm_yesno>
        break;
 800892c:	e008      	b.n	8008940 <SVCCTL_App_Notification+0x160>
            pairing_complete = (aci_gap_pairing_complete_event_rp0*)blue_evt->data;
 800892e:	6a3b      	ldr	r3, [r7, #32]
 8008930:	3302      	adds	r3, #2
 8008932:	617b      	str	r3, [r7, #20]
        break;
 8008934:	e004      	b.n	8008940 <SVCCTL_App_Notification+0x160>
      break;
 8008936:	bf00      	nop
 8008938:	e005      	b.n	8008946 <SVCCTL_App_Notification+0x166>
          break; /* RADIO_ACTIVITY_EVENT */
 800893a:	bf00      	nop
 800893c:	e003      	b.n	8008946 <SVCCTL_App_Notification+0x166>
          break; /* EVT_BLUE_GAP_PROCEDURE_COMPLETE */
 800893e:	bf00      	nop
      break; /* EVT_VENDOR */
 8008940:	e001      	b.n	8008946 <SVCCTL_App_Notification+0x166>
        break;
 8008942:	bf00      	nop
 8008944:	e000      	b.n	8008948 <SVCCTL_App_Notification+0x168>
      break; /* EVT_VENDOR */
 8008946:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8008948:	2301      	movs	r3, #1
}
 800894a:	4618      	mov	r0, r3
 800894c:	3728      	adds	r7, #40	; 0x28
 800894e:	46bd      	mov	sp, r7
 8008950:	bd80      	pop	{r7, pc}
 8008952:	bf00      	nop
 8008954:	20000124 	.word	0x20000124
 8008958:	200004bc 	.word	0x200004bc
 800895c:	0001b207 	.word	0x0001b207

08008960 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8008966:	4b06      	ldr	r3, [pc, #24]	; (8008980 <Ble_Tl_Init+0x20>)
 8008968:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800896a:	4b06      	ldr	r3, [pc, #24]	; (8008984 <Ble_Tl_Init+0x24>)
 800896c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800896e:	463b      	mov	r3, r7
 8008970:	4619      	mov	r1, r3
 8008972:	4805      	ldr	r0, [pc, #20]	; (8008988 <Ble_Tl_Init+0x28>)
 8008974:	f7ff f964 	bl	8007c40 <hci_init>

  return;
 8008978:	bf00      	nop
}
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}
 8008980:	200300d4 	.word	0x200300d4
 8008984:	08008ca5 	.word	0x08008ca5
 8008988:	08008c6d 	.word	0x08008c6d

0800898c <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void){
 800898c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800898e:	b091      	sub	sp, #68	; 0x44
 8008990:	af06      	add	r7, sp, #24
  uint8_t role;
  uint8_t index;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *bd_addr;
  uint32_t srd_bd_addr[2];
  uint16_t appearance[1] = { BLE_CFG_GAP_APPEARANCE };
 8008992:	2300      	movs	r3, #0
 8008994:	80bb      	strh	r3, [r7, #4]

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  hci_reset();
 8008996:	f7fe ff6e 	bl	8007876 <hci_reset>

  /**
   * Write the BD Address
   */

  bd_addr = BleGetBdAddress();
 800899a:	f000 f8e7 	bl	8008b6c <BleGetBdAddress>
 800899e:	6238      	str	r0, [r7, #32]
  aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 80089a0:	6a3a      	ldr	r2, [r7, #32]
 80089a2:	2106      	movs	r1, #6
 80089a4:	2000      	movs	r0, #0
 80089a6:	f7fe fe5c 	bl	8007662 <aci_hal_write_config_data>
   * Static random Address
   * The two upper bits shall be set to 1
   * The lowest 32bits is read from the UDN to differentiate between devices
   * The RNG may be used to provide a random number on each power on
   */
  srd_bd_addr[1] =  0x0000ED6E;
 80089aa:	f64e 536e 	movw	r3, #60782	; 0xed6e
 80089ae:	60fb      	str	r3, [r7, #12]
  srd_bd_addr[0] =  LL_FLASH_GetUDN( );
 80089b0:	f7ff fea8 	bl	8008704 <LL_FLASH_GetUDN>
 80089b4:	4603      	mov	r3, r0
 80089b6:	60bb      	str	r3, [r7, #8]
  aci_hal_write_config_data( CONFIG_DATA_RANDOM_ADDRESS_OFFSET, CONFIG_DATA_RANDOM_ADDRESS_LEN, (uint8_t*)srd_bd_addr );
 80089b8:	f107 0308 	add.w	r3, r7, #8
 80089bc:	461a      	mov	r2, r3
 80089be:	2106      	movs	r1, #6
 80089c0:	202e      	movs	r0, #46	; 0x2e
 80089c2:	f7fe fe4e 	bl	8007662 <aci_hal_write_config_data>

  /**
   * Write Identity root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)BLE_CFG_IR_VALUE );
 80089c6:	4a4c      	ldr	r2, [pc, #304]	; (8008af8 <Ble_Hci_Gap_Gatt_Init+0x16c>)
 80089c8:	2110      	movs	r1, #16
 80089ca:	2018      	movs	r0, #24
 80089cc:	f7fe fe49 	bl	8007662 <aci_hal_write_config_data>

   /**
   * Write Encryption root key used to derive LTK and CSRK
   */
    aci_hal_write_config_data( CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)BLE_CFG_ER_VALUE );
 80089d0:	4a4a      	ldr	r2, [pc, #296]	; (8008afc <Ble_Hci_Gap_Gatt_Init+0x170>)
 80089d2:	2110      	movs	r1, #16
 80089d4:	2008      	movs	r0, #8
 80089d6:	f7fe fe44 	bl	8007662 <aci_hal_write_config_data>

  /**
   * Set TX Power to 0dBm.
   */
  aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 80089da:	211f      	movs	r1, #31
 80089dc:	2001      	movs	r0, #1
 80089de:	f7fe fea9 	bl	8007734 <aci_hal_set_tx_power_level>

  /**
   * Initialize GATT interface
   */
  aci_gatt_init();
 80089e2:	f7fe fbf9 	bl	80071d8 <aci_gatt_init>

  /**
   * Initialize GAP interface
   */
  role = 0;
 80089e6:	2300      	movs	r3, #0
 80089e8:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 80089ea:	7ffb      	ldrb	r3, [r7, #31]
 80089ec:	f043 0301 	orr.w	r3, r3, #1
 80089f0:	77fb      	strb	r3, [r7, #31]

#if (BLE_CFG_CENTRAL == 1)
  role |= GAP_CENTRAL_ROLE;
#endif

  if (role > 0)
 80089f2:	7ffb      	ldrb	r3, [r7, #31]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d01e      	beq.n	8008a36 <Ble_Hci_Gap_Gatt_Init+0xaa>
  {
    const char *name = CFG_GAP_DEVICE_NAME;
 80089f8:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <Ble_Hci_Gap_Gatt_Init+0x174>)
 80089fa:	61bb      	str	r3, [r7, #24]
    aci_gap_init(role, 0,
 80089fc:	f107 0216 	add.w	r2, r7, #22
 8008a00:	7ff8      	ldrb	r0, [r7, #31]
 8008a02:	f107 0312 	add.w	r3, r7, #18
 8008a06:	9301      	str	r3, [sp, #4]
 8008a08:	f107 0314 	add.w	r3, r7, #20
 8008a0c:	9300      	str	r3, [sp, #0]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	220f      	movs	r2, #15
 8008a12:	2100      	movs	r1, #0
 8008a14:	f7fe fa7e 	bl	8006f14 <aci_gap_init>
                CFG_GAP_DEVICE_NAME_LENGTH,
                 &gap_service_handle, &gap_dev_name_char_handle, &gap_appearance_char_handle);

    if (aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name))
 8008a18:	8afc      	ldrh	r4, [r7, #22]
 8008a1a:	8abd      	ldrh	r5, [r7, #20]
 8008a1c:	69b8      	ldr	r0, [r7, #24]
 8008a1e:	f7f7 fbad 	bl	800017c <strlen>
 8008a22:	4603      	mov	r3, r0
 8008a24:	b2da      	uxtb	r2, r3
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	9300      	str	r3, [sp, #0]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	4629      	mov	r1, r5
 8008a30:	4620      	mov	r0, r4
 8008a32:	f7fe fd8f 	bl	8007554 <aci_gatt_update_char_value>
    {
      BLE_DBG_SVCCTL_MSG("Device Name aci_gatt_update_char_value failed.\n");
    }
  }

  if(aci_gatt_update_char_value(gap_service_handle,
 8008a36:	8af8      	ldrh	r0, [r7, #22]
 8008a38:	8a79      	ldrh	r1, [r7, #18]
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	2302      	movs	r3, #2
 8008a40:	2200      	movs	r2, #0
 8008a42:	f7fe fd87 	bl	8007554 <aci_gatt_update_char_value>
    BLE_DBG_SVCCTL_MSG("Appearance aci_gatt_update_char_value failed.\n");
  }
  /**
   * Initialize Default PHY
   */
  hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8008a46:	2202      	movs	r2, #2
 8008a48:	2102      	movs	r1, #2
 8008a4a:	2000      	movs	r0, #0
 8008a4c:	f7fe ff37 	bl	80078be <hci_le_set_default_phy>

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8008a50:	4b2c      	ldr	r3, [pc, #176]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a52:	2201      	movs	r2, #1
 8008a54:	701a      	strb	r2, [r3, #0]
  aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8008a56:	4b2b      	ldr	r3, [pc, #172]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f7fe f911 	bl	8006c82 <aci_gap_set_io_capability>

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8008a60:	4b28      	ldr	r3, [pc, #160]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a62:	2201      	movs	r2, #1
 8008a64:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data_Present = 0;
 8008a66:	4b27      	ldr	r3, [pc, #156]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a68:	2200      	movs	r2, #0
 8008a6a:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8008a6c:	4b25      	ldr	r3, [pc, #148]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a6e:	2208      	movs	r2, #8
 8008a70:	755a      	strb	r2, [r3, #21]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8008a72:	4b24      	ldr	r3, [pc, #144]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a74:	2210      	movs	r2, #16
 8008a76:	759a      	strb	r2, [r3, #22]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8008a78:	4b22      	ldr	r3, [pc, #136]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	751a      	strb	r2, [r3, #20]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8008a7e:	4b21      	ldr	r3, [pc, #132]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a80:	4a21      	ldr	r2, [pc, #132]	; (8008b08 <Ble_Hci_Gap_Gatt_Init+0x17c>)
 8008a82:	619a      	str	r2, [r3, #24]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8008a84:	4b1f      	ldr	r3, [pc, #124]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a86:	2200      	movs	r2, #0
 8008a88:	709a      	strb	r2, [r3, #2]
  for (index = 0; index < 16; index++)
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008a90:	e00b      	b.n	8008aaa <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.OOB_Data[index] = (uint8_t) index;
 8008a92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008a96:	4a1b      	ldr	r2, [pc, #108]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008a98:	4413      	add	r3, r2
 8008a9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008a9e:	711a      	strb	r2, [r3, #4]
  for (index = 0; index < 16; index++)
 8008aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008aae:	2b0f      	cmp	r3, #15
 8008ab0:	d9ef      	bls.n	8008a92 <Ble_Hci_Gap_Gatt_Init+0x106>
  }

  aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8008ab2:	4b14      	ldr	r3, [pc, #80]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008ab4:	789c      	ldrb	r4, [r3, #2]
 8008ab6:	4b13      	ldr	r3, [pc, #76]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008ab8:	785d      	ldrb	r5, [r3, #1]
 8008aba:	4b12      	ldr	r3, [pc, #72]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008abc:	7d5b      	ldrb	r3, [r3, #21]
 8008abe:	4a11      	ldr	r2, [pc, #68]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008ac0:	7d92      	ldrb	r2, [r2, #22]
 8008ac2:	4910      	ldr	r1, [pc, #64]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008ac4:	7d09      	ldrb	r1, [r1, #20]
 8008ac6:	480f      	ldr	r0, [pc, #60]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008ac8:	6980      	ldr	r0, [r0, #24]
 8008aca:	2600      	movs	r6, #0
 8008acc:	9604      	str	r6, [sp, #16]
 8008ace:	9003      	str	r0, [sp, #12]
 8008ad0:	9102      	str	r1, [sp, #8]
 8008ad2:	9201      	str	r2, [sp, #4]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	2201      	movs	r2, #1
 8008ada:	4629      	mov	r1, r5
 8008adc:	4620      	mov	r0, r4
 8008ade:	f7fe f91a 	bl	8006d16 <aci_gap_set_authentication_requirement>
                                         );

  /**
   * Initialize whitelist
   */
   if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 8008ae2:	4b08      	ldr	r3, [pc, #32]	; (8008b04 <Ble_Hci_Gap_Gatt_Init+0x178>)
 8008ae4:	789b      	ldrb	r3, [r3, #2]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d001      	beq.n	8008aee <Ble_Hci_Gap_Gatt_Init+0x162>
   {
     aci_gap_configure_whitelist();
 8008aea:	f7fe fafa 	bl	80070e2 <aci_gap_configure_whitelist>
   }
}
 8008aee:	bf00      	nop
 8008af0:	372c      	adds	r7, #44	; 0x2c
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008af6:	bf00      	nop
 8008af8:	080099b8 	.word	0x080099b8
 8008afc:	080099c8 	.word	0x080099c8
 8008b00:	08009810 	.word	0x08009810
 8008b04:	20000124 	.word	0x20000124
 8008b08:	0001b207 	.word	0x0001b207

08008b0c <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t New_Status)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b08c      	sub	sp, #48	; 0x30
 8008b10:	af08      	add	r7, sp, #32
 8008b12:	4603      	mov	r3, r0
 8008b14:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8008b16:	2342      	movs	r3, #66	; 0x42
 8008b18:	73fb      	strb	r3, [r7, #15]

    BleApplicationContext.Device_Connection_Status = New_Status;
 8008b1a:	4a12      	ldr	r2, [pc, #72]	; (8008b64 <Adv_Request+0x58>)
 8008b1c:	79fb      	ldrb	r3, [r7, #7]
 8008b1e:	f882 3090 	strb.w	r3, [r2, #144]	; 0x90
    /* Start Fast or Low Power Advertising */
    ret = aci_gap_set_discoverable(
 8008b22:	2300      	movs	r3, #0
 8008b24:	9306      	str	r3, [sp, #24]
 8008b26:	2300      	movs	r3, #0
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9304      	str	r3, [sp, #16]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	9303      	str	r3, [sp, #12]
 8008b32:	2300      	movs	r3, #0
 8008b34:	9302      	str	r3, [sp, #8]
 8008b36:	2300      	movs	r3, #0
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	2300      	movs	r3, #0
 8008b40:	22a0      	movs	r2, #160	; 0xa0
 8008b42:	2180      	movs	r1, #128	; 0x80
 8008b44:	2000      	movs	r0, #0
 8008b46:	f7fd ffbe 	bl	8006ac6 <aci_gap_set_discoverable>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	73fb      	strb	r3, [r7, #15]
        0,
        0,
        0);

    /* Update Advertising data */
    ret = aci_gap_update_adv_data(sizeof(ad_data), (uint8_t*) ad_data);
 8008b4e:	4906      	ldr	r1, [pc, #24]	; (8008b68 <Adv_Request+0x5c>)
 8008b50:	2017      	movs	r0, #23
 8008b52:	f7fe fa6a 	bl	800702a <aci_gap_update_adv_data>
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
    else
    {
        APP_DBG_MSG("Start Fast Advertising Failed , result: %d \n", ret);
    }

  return;
 8008b5a:	bf00      	nop
}
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20000124 	.word	0x20000124
 8008b68:	20000010 	.word	0x20000010

08008b6c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
  const uint8_t *bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8008b72:	f7ff fdc7 	bl	8008704 <LL_FLASH_GetUDN>
 8008b76:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b7e:	d023      	beq.n	8008bc8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8008b80:	f7ff fdd8 	bl	8008734 <LL_FLASH_GetSTCompanyID>
 8008b84:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8008b86:	f7ff fdc9 	bl	800871c <LL_FLASH_GetDeviceID>
 8008b8a:	6078      	str	r0, [r7, #4]

    bd_addr_udn[0] = (uint8_t)(udn & 0x000000FF);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	b2da      	uxtb	r2, r3
 8008b90:	4b16      	ldr	r3, [pc, #88]	; (8008bec <BleGetBdAddress+0x80>)
 8008b92:	701a      	strb	r2, [r3, #0]
    bd_addr_udn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	0a1b      	lsrs	r3, r3, #8
 8008b98:	b2da      	uxtb	r2, r3
 8008b9a:	4b14      	ldr	r3, [pc, #80]	; (8008bec <BleGetBdAddress+0x80>)
 8008b9c:	705a      	strb	r2, [r3, #1]
    bd_addr_udn[2] = (uint8_t)( (udn & 0x00FF0000) >> 16 );
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	0c1b      	lsrs	r3, r3, #16
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	4b11      	ldr	r3, [pc, #68]	; (8008bec <BleGetBdAddress+0x80>)
 8008ba6:	709a      	strb	r2, [r3, #2]
    bd_addr_udn[3] = (uint8_t)device_id;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	b2da      	uxtb	r2, r3
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <BleGetBdAddress+0x80>)
 8008bae:	70da      	strb	r2, [r3, #3]
    bd_addr_udn[4] = (uint8_t)(company_id & 0x000000FF);;
 8008bb0:	68bb      	ldr	r3, [r7, #8]
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	4b0d      	ldr	r3, [pc, #52]	; (8008bec <BleGetBdAddress+0x80>)
 8008bb6:	711a      	strb	r2, [r3, #4]
    bd_addr_udn[5] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	0a1b      	lsrs	r3, r3, #8
 8008bbc:	b2da      	uxtb	r2, r3
 8008bbe:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <BleGetBdAddress+0x80>)
 8008bc0:	715a      	strb	r2, [r3, #5]

    bd_addr = (const uint8_t *)bd_addr_udn;
 8008bc2:	4b0a      	ldr	r3, [pc, #40]	; (8008bec <BleGetBdAddress+0x80>)
 8008bc4:	617b      	str	r3, [r7, #20]
 8008bc6:	e00b      	b.n	8008be0 <BleGetBdAddress+0x74>
  }
  else
  {
    otp_addr = OTP_Read(0);
 8008bc8:	2000      	movs	r0, #0
 8008bca:	f7ff fcb5 	bl	8008538 <OTP_Read>
 8008bce:	60f8      	str	r0, [r7, #12]
    if(otp_addr)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d002      	beq.n	8008bdc <BleGetBdAddress+0x70>
    {
      bd_addr = ((OTP_ID0_t*)otp_addr)->bd_address;
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	617b      	str	r3, [r7, #20]
 8008bda:	e001      	b.n	8008be0 <BleGetBdAddress+0x74>
    }
    else
    {
      bd_addr = M_bd_addr;
 8008bdc:	4b04      	ldr	r3, [pc, #16]	; (8008bf0 <BleGetBdAddress+0x84>)
 8008bde:	617b      	str	r3, [r7, #20]
    }

  }

  return bd_addr;
 8008be0:	697b      	ldr	r3, [r7, #20]
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	2000024c 	.word	0x2000024c
 8008bf0:	080099b0 	.word	0x080099b0

08008bf4 <Adv_Cancel>:
 *
 *SPECIFIC FUNCTIONS FOR CUSTOM
 *
 *************************************************************/
static void Adv_Cancel( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Adv_Cancel_1 */

/* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8008bfa:	4b0a      	ldr	r3, [pc, #40]	; (8008c24 <Adv_Cancel+0x30>)
 8008bfc:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 8008c00:	2b05      	cmp	r3, #5
 8008c02:	d00a      	beq.n	8008c1a <Adv_Cancel+0x26>

  {

    tBleStatus result = 0x00;
 8008c04:	2300      	movs	r3, #0
 8008c06:	71fb      	strb	r3, [r7, #7]

    result = aci_gap_set_non_discoverable();
 8008c08:	f7fd ff39 	bl	8006a7e <aci_gap_set_non_discoverable>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8008c10:	4b04      	ldr	r3, [pc, #16]	; (8008c24 <Adv_Cancel+0x30>)
 8008c12:	2200      	movs	r2, #0
 8008c14:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  }

/* USER CODE BEGIN Adv_Cancel_2 */

/* USER CODE END Adv_Cancel_2 */
  return;
 8008c18:	bf00      	nop
 8008c1a:	bf00      	nop
}
 8008c1c:	3708      	adds	r7, #8
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	20000124 	.word	0x20000124

08008c28 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* pdata)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8008c30:	2100      	movs	r1, #0
 8008c32:	2004      	movs	r0, #4
 8008c34:	f000 fc54 	bl	80094e0 <UTIL_SEQ_SetTask>
  return;
 8008c38:	bf00      	nop
}
 8008c3a:	3708      	adds	r7, #8
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t flag)
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b082      	sub	sp, #8
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c48:	2001      	movs	r0, #1
 8008c4a:	f000 fcb5 	bl	80095b8 <UTIL_SEQ_SetEvt>
  return;
 8008c4e:	bf00      	nop
}
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t timeout)
{
 8008c56:	b580      	push	{r7, lr}
 8008c58:	b082      	sub	sp, #8
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8008c5e:	2001      	movs	r0, #1
 8008c60:	f000 fcca 	bl	80095f8 <UTIL_SEQ_WaitEvt>
  return;
 8008c64:	bf00      	nop
}
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * pPayload )
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *pParam;

  pParam = (tHCI_UserEvtRxParam *)pPayload;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(pParam->pckt->evtserial));
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe ff5c 	bl	8007b3c <SVCCTL_UserEvtRx>
 8008c84:	4603      	mov	r3, r0
 8008c86:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8008c88:	7afb      	ldrb	r3, [r7, #11]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d003      	beq.n	8008c96 <BLE_UserEvtRx+0x2a>
  {
    pParam->status = HCI_TL_UserEventFlow_Enable;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	2201      	movs	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    pParam->status = HCI_TL_UserEventFlow_Disable;
  }
}
 8008c94:	e002      	b.n	8008c9c <BLE_UserEvtRx+0x30>
    pParam->status = HCI_TL_UserEventFlow_Disable;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
}
 8008c9c:	bf00      	nop
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t status )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (status)
 8008cae:	79fb      	ldrb	r3, [r7, #7]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <BLE_StatusNot+0x16>
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d006      	beq.n	8008cc6 <BLE_StatusNot+0x22>
      UTIL_SEQ_ResumeTask(task_id_list);

      break;

    default:
      break;
 8008cb8:	e00b      	b.n	8008cd2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008cba:	2307      	movs	r3, #7
 8008cbc:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f000 fc3a 	bl	8009538 <UTIL_SEQ_PauseTask>
      break;
 8008cc4:	e005      	b.n	8008cd2 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8008cc6:	2307      	movs	r3, #7
 8008cc8:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 8008cca:	68f8      	ldr	r0, [r7, #12]
 8008ccc:	f000 fc54 	bl	8009578 <UTIL_SEQ_ResumeTask>
      break;
 8008cd0:	bf00      	nop
  }
  return;
 8008cd2:	bf00      	nop
}
 8008cd4:	3710      	adds	r7, #16
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	bd80      	pop	{r7, pc}

08008cda <Custom_APP_Notification>:

	/* USER CODE END CUSTOM_STM_App_Notification_2 */
	return;
}

void Custom_APP_Notification(Custom_App_ConnHandle_Not_evt_t *pNotification) {
 8008cda:	b480      	push	{r7}
 8008cdc:	b083      	sub	sp, #12
 8008cde:	af00      	add	r7, sp, #0
 8008ce0:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN CUSTOM_APP_Notification_1 */

	/* USER CODE END CUSTOM_APP_Notification_1 */

	switch (pNotification->Custom_Evt_Opcode) {
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d002      	beq.n	8008cf0 <Custom_APP_Notification+0x16>
 8008cea:	2b01      	cmp	r3, #1
 8008cec:	d002      	beq.n	8008cf4 <Custom_APP_Notification+0x1a>

	default:
		/* USER CODE BEGIN CUSTOM_APP_Notification_default */

		/* USER CODE END CUSTOM_APP_Notification_default */
		break;
 8008cee:	e002      	b.n	8008cf6 <Custom_APP_Notification+0x1c>
		break;
 8008cf0:	bf00      	nop
 8008cf2:	e000      	b.n	8008cf6 <Custom_APP_Notification+0x1c>
		break;
 8008cf4:	bf00      	nop

	/* USER CODE BEGIN CUSTOM_APP_Notification_2 */

	/* USER CODE END CUSTOM_APP_Notification_2 */

	return;
 8008cf6:	bf00      	nop
}
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <Custom_APP_Init>:

void Custom_APP_Init(void) {
 8008d02:	b480      	push	{r7}
 8008d04:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN CUSTOM_APP_Init */

	/* USER CODE END CUSTOM_APP_Init */
	return;
 8008d06:	bf00      	nop
}
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <Custom_STM_Event_Handler>:
/**
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t Custom_STM_Event_Handler(void *Event) {
 8008d10:	b480      	push	{r7}
 8008d12:	b087      	sub	sp, #28
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
	evt_blue_aci *blue_evt;
	/* USER CODE BEGIN Custom_STM_Event_Handler_1 */

	/* USER CODE END Custom_STM_Event_Handler_1 */

	return_value = SVCCTL_EvtNotAck;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	75fb      	strb	r3, [r7, #23]
	event_pckt = (hci_event_pckt*) (((hci_uart_pckt*) Event)->data);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	3301      	adds	r3, #1
 8008d20:	613b      	str	r3, [r7, #16]

	switch (event_pckt->evt) {
 8008d22:	693b      	ldr	r3, [r7, #16]
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2bff      	cmp	r3, #255	; 0xff
 8008d28:	d11b      	bne.n	8008d62 <Custom_STM_Event_Handler+0x52>
	case EVT_VENDOR:
		blue_evt = (evt_blue_aci*) event_pckt->data;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	60fb      	str	r3, [r7, #12]
		switch (blue_evt->ecode) {
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	881b      	ldrh	r3, [r3, #0]
 8008d34:	b29b      	uxth	r3, r3
 8008d36:	f640 4214 	movw	r2, #3092	; 0xc14
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d00b      	beq.n	8008d56 <Custom_STM_Event_Handler+0x46>
 8008d3e:	f640 4214 	movw	r2, #3092	; 0xc14
 8008d42:	4293      	cmp	r3, r2
 8008d44:	dc09      	bgt.n	8008d5a <Custom_STM_Event_Handler+0x4a>
 8008d46:	f640 4201 	movw	r2, #3073	; 0xc01
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d007      	beq.n	8008d5e <Custom_STM_Event_Handler+0x4e>
 8008d4e:	f640 4213 	movw	r2, #3091	; 0xc13
 8008d52:	4293      	cmp	r3, r2
			break;
		case EVT_BLUE_GATT_WRITE_PERMIT_REQ:
			/* USER CODE BEGIN EVT_BLUE_GATT_WRITE_PERMIT_REQ */

			/* USER CODE END EVT_BLUE_GATT_WRITE_PERMIT_REQ */
			break;
 8008d54:	e004      	b.n	8008d60 <Custom_STM_Event_Handler+0x50>
			break;
 8008d56:	bf00      	nop
 8008d58:	e004      	b.n	8008d64 <Custom_STM_Event_Handler+0x54>

		default:
			/* USER CODE BEGIN EVT_DEFAULT */

			/* USER CODE END EVT_DEFAULT */
			break;
 8008d5a:	bf00      	nop
 8008d5c:	e002      	b.n	8008d64 <Custom_STM_Event_Handler+0x54>
			break;
 8008d5e:	bf00      	nop
		}
		/* USER CODE BEGIN EVT_VENDOR*/

		/* USER CODE END EVT_VENDOR*/
		break; /* EVT_VENDOR */
 8008d60:	e000      	b.n	8008d64 <Custom_STM_Event_Handler+0x54>
		/* USER CODE BEGIN EVENT_PCKT_CASES*/

		/* USER CODE END EVENT_PCKT_CASES*/

	default:
		break;
 8008d62:	bf00      	nop

	/* USER CODE BEGIN Custom_STM_Event_Handler_2 */

	/* USER CODE END Custom_STM_Event_Handler_2 */

	return (return_value);
 8008d64:	7dfb      	ldrb	r3, [r7, #23]
}/* end Custom_STM_Event_Handler */
 8008d66:	4618      	mov	r0, r3
 8008d68:	371c      	adds	r7, #28
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
	...

08008d74 <SVCCTL_InitCustomSvc>:
/**
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void SVCCTL_InitCustomSvc(void) {
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b08a      	sub	sp, #40	; 0x28
 8008d78:	af06      	add	r7, sp, #24
	/* USER CODE END SVCCTL_InitCustomSvc_1 */

	/**
	 *	Register the event handler to the BLE controller
	 */
	SVCCTL_RegisterSvcHandler(Custom_STM_Event_Handler);
 8008d7a:	4893      	ldr	r0, [pc, #588]	; (8008fc8 <SVCCTL_InitCustomSvc+0x254>)
 8008d7c:	f7fe fec4 	bl	8007b08 <SVCCTL_RegisterSvcHandler>
	 *                                2 for OTA_REQ +
	 *                                1 for COMMAND_FEEDBACK_CHAR configuration descriptor +
	 *                              = 8
	 */

	COPY_STIMULATION_COMMAND_SERVICE_UUID(uuid.Char_UUID_128);
 8008d80:	238f      	movs	r3, #143	; 0x8f
 8008d82:	703b      	strb	r3, [r7, #0]
 8008d84:	23e5      	movs	r3, #229	; 0xe5
 8008d86:	707b      	strb	r3, [r7, #1]
 8008d88:	23b3      	movs	r3, #179	; 0xb3
 8008d8a:	70bb      	strb	r3, [r7, #2]
 8008d8c:	23d5      	movs	r3, #213	; 0xd5
 8008d8e:	70fb      	strb	r3, [r7, #3]
 8008d90:	232e      	movs	r3, #46	; 0x2e
 8008d92:	713b      	strb	r3, [r7, #4]
 8008d94:	237f      	movs	r3, #127	; 0x7f
 8008d96:	717b      	strb	r3, [r7, #5]
 8008d98:	234a      	movs	r3, #74	; 0x4a
 8008d9a:	71bb      	strb	r3, [r7, #6]
 8008d9c:	2398      	movs	r3, #152	; 0x98
 8008d9e:	71fb      	strb	r3, [r7, #7]
 8008da0:	232a      	movs	r3, #42	; 0x2a
 8008da2:	723b      	strb	r3, [r7, #8]
 8008da4:	2348      	movs	r3, #72	; 0x48
 8008da6:	727b      	strb	r3, [r7, #9]
 8008da8:	237a      	movs	r3, #122	; 0x7a
 8008daa:	72bb      	strb	r3, [r7, #10]
 8008dac:	23cc      	movs	r3, #204	; 0xcc
 8008dae:	72fb      	strb	r3, [r7, #11]
 8008db0:	2340      	movs	r3, #64	; 0x40
 8008db2:	733b      	strb	r3, [r7, #12]
 8008db4:	23fe      	movs	r3, #254	; 0xfe
 8008db6:	737b      	strb	r3, [r7, #13]
 8008db8:	2300      	movs	r3, #0
 8008dba:	73bb      	strb	r3, [r7, #14]
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_service(UUID_TYPE_128, (Service_UUID_t*) &uuid,
 8008dc0:	4639      	mov	r1, r7
 8008dc2:	4b82      	ldr	r3, [pc, #520]	; (8008fcc <SVCCTL_InitCustomSvc+0x258>)
 8008dc4:	9300      	str	r3, [sp, #0]
 8008dc6:	2308      	movs	r3, #8
 8008dc8:	2201      	movs	r2, #1
 8008dca:	2002      	movs	r0, #2
 8008dcc:	f7fe fa29 	bl	8007222 <aci_gatt_add_service>
	PRIMARY_SERVICE, 8, &(CustomContext.CustomStim_Cmd_SvcsHdle));

	/**
	 *  SERIAL_COMMAND_INPUT_CHAR
	 */
	COPY_SERIAL_COMMAND_INPUT_CHAR_UUID(uuid.Char_UUID_128);
 8008dd0:	2319      	movs	r3, #25
 8008dd2:	703b      	strb	r3, [r7, #0]
 8008dd4:	23ed      	movs	r3, #237	; 0xed
 8008dd6:	707b      	strb	r3, [r7, #1]
 8008dd8:	2382      	movs	r3, #130	; 0x82
 8008dda:	70bb      	strb	r3, [r7, #2]
 8008ddc:	23ae      	movs	r3, #174	; 0xae
 8008dde:	70fb      	strb	r3, [r7, #3]
 8008de0:	23ed      	movs	r3, #237	; 0xed
 8008de2:	713b      	strb	r3, [r7, #4]
 8008de4:	2321      	movs	r3, #33	; 0x21
 8008de6:	717b      	strb	r3, [r7, #5]
 8008de8:	234c      	movs	r3, #76	; 0x4c
 8008dea:	71bb      	strb	r3, [r7, #6]
 8008dec:	239d      	movs	r3, #157	; 0x9d
 8008dee:	71fb      	strb	r3, [r7, #7]
 8008df0:	2341      	movs	r3, #65	; 0x41
 8008df2:	723b      	strb	r3, [r7, #8]
 8008df4:	2345      	movs	r3, #69	; 0x45
 8008df6:	727b      	strb	r3, [r7, #9]
 8008df8:	2322      	movs	r3, #34	; 0x22
 8008dfa:	72bb      	strb	r3, [r7, #10]
 8008dfc:	238e      	movs	r3, #142	; 0x8e
 8008dfe:	72fb      	strb	r3, [r7, #11]
 8008e00:	2341      	movs	r3, #65	; 0x41
 8008e02:	733b      	strb	r3, [r7, #12]
 8008e04:	23fe      	movs	r3, #254	; 0xfe
 8008e06:	737b      	strb	r3, [r7, #13]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	73bb      	strb	r3, [r7, #14]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(CustomContext.CustomStim_Cmd_SvcsHdle,
 8008e10:	4b6e      	ldr	r3, [pc, #440]	; (8008fcc <SVCCTL_InitCustomSvc+0x258>)
 8008e12:	8818      	ldrh	r0, [r3, #0]
 8008e14:	2305      	movs	r3, #5
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	463a      	mov	r2, r7
 8008e1a:	496d      	ldr	r1, [pc, #436]	; (8008fd0 <SVCCTL_InitCustomSvc+0x25c>)
 8008e1c:	9105      	str	r1, [sp, #20]
 8008e1e:	2100      	movs	r1, #0
 8008e20:	9104      	str	r1, [sp, #16]
 8008e22:	2110      	movs	r1, #16
 8008e24:	9103      	str	r1, [sp, #12]
 8008e26:	2102      	movs	r1, #2
 8008e28:	9102      	str	r1, [sp, #8]
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	9101      	str	r1, [sp, #4]
 8008e2e:	2104      	movs	r1, #4
 8008e30:	9100      	str	r1, [sp, #0]
 8008e32:	2102      	movs	r1, #2
 8008e34:	f7fe faa4 	bl	8007380 <aci_gatt_add_char>
	GATT_NOTIFY_WRITE_REQ_AND_WAIT_FOR_APPL_RESP, 0x10,
	CHAR_VALUE_LEN_CONSTANT, &(CustomContext.CustomSerial_Cmd_CharHdle));
	/**
	 *  COMMAND_FEEDBACK_CHAR
	 */
	COPY_COMMAND_FEEDBACK_CHAR_UUID(uuid.Char_UUID_128);
 8008e38:	2319      	movs	r3, #25
 8008e3a:	703b      	strb	r3, [r7, #0]
 8008e3c:	23ed      	movs	r3, #237	; 0xed
 8008e3e:	707b      	strb	r3, [r7, #1]
 8008e40:	2382      	movs	r3, #130	; 0x82
 8008e42:	70bb      	strb	r3, [r7, #2]
 8008e44:	23ae      	movs	r3, #174	; 0xae
 8008e46:	70fb      	strb	r3, [r7, #3]
 8008e48:	23ed      	movs	r3, #237	; 0xed
 8008e4a:	713b      	strb	r3, [r7, #4]
 8008e4c:	2321      	movs	r3, #33	; 0x21
 8008e4e:	717b      	strb	r3, [r7, #5]
 8008e50:	234c      	movs	r3, #76	; 0x4c
 8008e52:	71bb      	strb	r3, [r7, #6]
 8008e54:	239d      	movs	r3, #157	; 0x9d
 8008e56:	71fb      	strb	r3, [r7, #7]
 8008e58:	2341      	movs	r3, #65	; 0x41
 8008e5a:	723b      	strb	r3, [r7, #8]
 8008e5c:	2345      	movs	r3, #69	; 0x45
 8008e5e:	727b      	strb	r3, [r7, #9]
 8008e60:	2322      	movs	r3, #34	; 0x22
 8008e62:	72bb      	strb	r3, [r7, #10]
 8008e64:	238e      	movs	r3, #142	; 0x8e
 8008e66:	72fb      	strb	r3, [r7, #11]
 8008e68:	2342      	movs	r3, #66	; 0x42
 8008e6a:	733b      	strb	r3, [r7, #12]
 8008e6c:	23fe      	movs	r3, #254	; 0xfe
 8008e6e:	737b      	strb	r3, [r7, #13]
 8008e70:	2300      	movs	r3, #0
 8008e72:	73bb      	strb	r3, [r7, #14]
 8008e74:	2300      	movs	r3, #0
 8008e76:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(CustomContext.CustomStim_Cmd_SvcsHdle,
 8008e78:	4b54      	ldr	r3, [pc, #336]	; (8008fcc <SVCCTL_InitCustomSvc+0x258>)
 8008e7a:	8818      	ldrh	r0, [r3, #0]
 8008e7c:	2305      	movs	r3, #5
 8008e7e:	b29b      	uxth	r3, r3
 8008e80:	463a      	mov	r2, r7
 8008e82:	4954      	ldr	r1, [pc, #336]	; (8008fd4 <SVCCTL_InitCustomSvc+0x260>)
 8008e84:	9105      	str	r1, [sp, #20]
 8008e86:	2100      	movs	r1, #0
 8008e88:	9104      	str	r1, [sp, #16]
 8008e8a:	2110      	movs	r1, #16
 8008e8c:	9103      	str	r1, [sp, #12]
 8008e8e:	2101      	movs	r1, #1
 8008e90:	9102      	str	r1, [sp, #8]
 8008e92:	2100      	movs	r1, #0
 8008e94:	9101      	str	r1, [sp, #4]
 8008e96:	2110      	movs	r1, #16
 8008e98:	9100      	str	r1, [sp, #0]
 8008e9a:	2102      	movs	r1, #2
 8008e9c:	f7fe fa70 	bl	8007380 <aci_gatt_add_char>
	GATT_NOTIFY_ATTRIBUTE_WRITE, 0x10,
	CHAR_VALUE_LEN_CONSTANT, &(CustomContext.CustomCmd_Fb_CharHdle));
	/**
	 *  OTA_REQ
	 */
	COPY_OTA_REQ_UUID(uuid.Char_UUID_128);
 8008ea0:	2319      	movs	r3, #25
 8008ea2:	703b      	strb	r3, [r7, #0]
 8008ea4:	23ed      	movs	r3, #237	; 0xed
 8008ea6:	707b      	strb	r3, [r7, #1]
 8008ea8:	2382      	movs	r3, #130	; 0x82
 8008eaa:	70bb      	strb	r3, [r7, #2]
 8008eac:	23ae      	movs	r3, #174	; 0xae
 8008eae:	70fb      	strb	r3, [r7, #3]
 8008eb0:	23ed      	movs	r3, #237	; 0xed
 8008eb2:	713b      	strb	r3, [r7, #4]
 8008eb4:	2321      	movs	r3, #33	; 0x21
 8008eb6:	717b      	strb	r3, [r7, #5]
 8008eb8:	234c      	movs	r3, #76	; 0x4c
 8008eba:	71bb      	strb	r3, [r7, #6]
 8008ebc:	239d      	movs	r3, #157	; 0x9d
 8008ebe:	71fb      	strb	r3, [r7, #7]
 8008ec0:	2341      	movs	r3, #65	; 0x41
 8008ec2:	723b      	strb	r3, [r7, #8]
 8008ec4:	2345      	movs	r3, #69	; 0x45
 8008ec6:	727b      	strb	r3, [r7, #9]
 8008ec8:	2322      	movs	r3, #34	; 0x22
 8008eca:	72bb      	strb	r3, [r7, #10]
 8008ecc:	238e      	movs	r3, #142	; 0x8e
 8008ece:	72fb      	strb	r3, [r7, #11]
 8008ed0:	2311      	movs	r3, #17
 8008ed2:	733b      	strb	r3, [r7, #12]
 8008ed4:	23fe      	movs	r3, #254	; 0xfe
 8008ed6:	737b      	strb	r3, [r7, #13]
 8008ed8:	2300      	movs	r3, #0
 8008eda:	73bb      	strb	r3, [r7, #14]
 8008edc:	2300      	movs	r3, #0
 8008ede:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(CustomContext.CustomStim_Cmd_SvcsHdle,
 8008ee0:	4b3a      	ldr	r3, [pc, #232]	; (8008fcc <SVCCTL_InitCustomSvc+0x258>)
 8008ee2:	8818      	ldrh	r0, [r3, #0]
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	b29b      	uxth	r3, r3
 8008ee8:	463a      	mov	r2, r7
 8008eea:	493b      	ldr	r1, [pc, #236]	; (8008fd8 <SVCCTL_InitCustomSvc+0x264>)
 8008eec:	9105      	str	r1, [sp, #20]
 8008eee:	2100      	movs	r1, #0
 8008ef0:	9104      	str	r1, [sp, #16]
 8008ef2:	2110      	movs	r1, #16
 8008ef4:	9103      	str	r1, [sp, #12]
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	9102      	str	r1, [sp, #8]
 8008efa:	2100      	movs	r1, #0
 8008efc:	9101      	str	r1, [sp, #4]
 8008efe:	2104      	movs	r1, #4
 8008f00:	9100      	str	r1, [sp, #0]
 8008f02:	2102      	movs	r1, #2
 8008f04:	f7fe fa3c 	bl	8007380 <aci_gatt_add_char>
	 *                                2 for RECORDING_STREAM_CHAR +
	 *                                1 for RECORDING_STREAM_CHAR configuration descriptor +
	 *                              = 4
	 */

	COPY_RECORDING_STREAM_SERVICE_UUID(uuid.Char_UUID_128);
 8008f08:	238f      	movs	r3, #143	; 0x8f
 8008f0a:	703b      	strb	r3, [r7, #0]
 8008f0c:	23e5      	movs	r3, #229	; 0xe5
 8008f0e:	707b      	strb	r3, [r7, #1]
 8008f10:	23b3      	movs	r3, #179	; 0xb3
 8008f12:	70bb      	strb	r3, [r7, #2]
 8008f14:	23d5      	movs	r3, #213	; 0xd5
 8008f16:	70fb      	strb	r3, [r7, #3]
 8008f18:	232e      	movs	r3, #46	; 0x2e
 8008f1a:	713b      	strb	r3, [r7, #4]
 8008f1c:	237f      	movs	r3, #127	; 0x7f
 8008f1e:	717b      	strb	r3, [r7, #5]
 8008f20:	234a      	movs	r3, #74	; 0x4a
 8008f22:	71bb      	strb	r3, [r7, #6]
 8008f24:	2398      	movs	r3, #152	; 0x98
 8008f26:	71fb      	strb	r3, [r7, #7]
 8008f28:	232a      	movs	r3, #42	; 0x2a
 8008f2a:	723b      	strb	r3, [r7, #8]
 8008f2c:	2348      	movs	r3, #72	; 0x48
 8008f2e:	727b      	strb	r3, [r7, #9]
 8008f30:	237a      	movs	r3, #122	; 0x7a
 8008f32:	72bb      	strb	r3, [r7, #10]
 8008f34:	23cc      	movs	r3, #204	; 0xcc
 8008f36:	72fb      	strb	r3, [r7, #11]
 8008f38:	2350      	movs	r3, #80	; 0x50
 8008f3a:	733b      	strb	r3, [r7, #12]
 8008f3c:	23fe      	movs	r3, #254	; 0xfe
 8008f3e:	737b      	strb	r3, [r7, #13]
 8008f40:	2300      	movs	r3, #0
 8008f42:	73bb      	strb	r3, [r7, #14]
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_service(UUID_TYPE_128, (Service_UUID_t*) &uuid,
 8008f48:	4639      	mov	r1, r7
 8008f4a:	4b24      	ldr	r3, [pc, #144]	; (8008fdc <SVCCTL_InitCustomSvc+0x268>)
 8008f4c:	9300      	str	r3, [sp, #0]
 8008f4e:	2304      	movs	r3, #4
 8008f50:	2201      	movs	r2, #1
 8008f52:	2002      	movs	r0, #2
 8008f54:	f7fe f965 	bl	8007222 <aci_gatt_add_service>
	PRIMARY_SERVICE, 4, &(CustomContext.CustomRec_Stream_SvcsHdle));

	/**
	 *  RECORDING_STREAM_CHAR
	 */
	COPY_RECORDING_STREAM_CHAR_UUID(uuid.Char_UUID_128);
 8008f58:	2319      	movs	r3, #25
 8008f5a:	703b      	strb	r3, [r7, #0]
 8008f5c:	23ed      	movs	r3, #237	; 0xed
 8008f5e:	707b      	strb	r3, [r7, #1]
 8008f60:	2382      	movs	r3, #130	; 0x82
 8008f62:	70bb      	strb	r3, [r7, #2]
 8008f64:	23ae      	movs	r3, #174	; 0xae
 8008f66:	70fb      	strb	r3, [r7, #3]
 8008f68:	23ed      	movs	r3, #237	; 0xed
 8008f6a:	713b      	strb	r3, [r7, #4]
 8008f6c:	2321      	movs	r3, #33	; 0x21
 8008f6e:	717b      	strb	r3, [r7, #5]
 8008f70:	234c      	movs	r3, #76	; 0x4c
 8008f72:	71bb      	strb	r3, [r7, #6]
 8008f74:	239d      	movs	r3, #157	; 0x9d
 8008f76:	71fb      	strb	r3, [r7, #7]
 8008f78:	2341      	movs	r3, #65	; 0x41
 8008f7a:	723b      	strb	r3, [r7, #8]
 8008f7c:	2345      	movs	r3, #69	; 0x45
 8008f7e:	727b      	strb	r3, [r7, #9]
 8008f80:	2322      	movs	r3, #34	; 0x22
 8008f82:	72bb      	strb	r3, [r7, #10]
 8008f84:	238e      	movs	r3, #142	; 0x8e
 8008f86:	72fb      	strb	r3, [r7, #11]
 8008f88:	2351      	movs	r3, #81	; 0x51
 8008f8a:	733b      	strb	r3, [r7, #12]
 8008f8c:	23fe      	movs	r3, #254	; 0xfe
 8008f8e:	737b      	strb	r3, [r7, #13]
 8008f90:	2300      	movs	r3, #0
 8008f92:	73bb      	strb	r3, [r7, #14]
 8008f94:	2300      	movs	r3, #0
 8008f96:	73fb      	strb	r3, [r7, #15]
	aci_gatt_add_char(CustomContext.CustomRec_Stream_SvcsHdle,
 8008f98:	4b0c      	ldr	r3, [pc, #48]	; (8008fcc <SVCCTL_InitCustomSvc+0x258>)
 8008f9a:	8918      	ldrh	r0, [r3, #8]
 8008f9c:	23f0      	movs	r3, #240	; 0xf0
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	463a      	mov	r2, r7
 8008fa2:	490f      	ldr	r1, [pc, #60]	; (8008fe0 <SVCCTL_InitCustomSvc+0x26c>)
 8008fa4:	9105      	str	r1, [sp, #20]
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	9104      	str	r1, [sp, #16]
 8008faa:	2110      	movs	r1, #16
 8008fac:	9103      	str	r1, [sp, #12]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	9102      	str	r1, [sp, #8]
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	9101      	str	r1, [sp, #4]
 8008fb6:	2110      	movs	r1, #16
 8008fb8:	9100      	str	r1, [sp, #0]
 8008fba:	2102      	movs	r1, #2
 8008fbc:	f7fe f9e0 	bl	8007380 <aci_gatt_add_char>

	/* USER CODE BEGIN SVCCTL_InitCustomSvc_2 */

	/* USER CODE END SVCCTL_InitCustomSvc_2 */

	return;
 8008fc0:	bf00      	nop
}
 8008fc2:	3710      	adds	r7, #16
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	bd80      	pop	{r7, pc}
 8008fc8:	08008d11 	.word	0x08008d11
 8008fcc:	20000104 	.word	0x20000104
 8008fd0:	20000106 	.word	0x20000106
 8008fd4:	20000108 	.word	0x20000108
 8008fd8:	2000010a 	.word	0x2000010a
 8008fdc:	2000010c 	.word	0x2000010c
 8008fe0:	2000010e 	.word	0x2000010e

08008fe4 <LL_PWR_EnableBootC2>:
	__STATIC_INLINE void LL_PWR_EnableBootC2(void) {
 8008fe4:	b480      	push	{r7}
 8008fe6:	af00      	add	r7, sp, #0
		SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 8008fe8:	4b05      	ldr	r3, [pc, #20]	; (8009000 <LL_PWR_EnableBootC2+0x1c>)
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	4a04      	ldr	r2, [pc, #16]	; (8009000 <LL_PWR_EnableBootC2+0x1c>)
 8008fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff2:	60d3      	str	r3, [r2, #12]
	}
 8008ff4:	bf00      	nop
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffc:	4770      	bx	lr
 8008ffe:	bf00      	nop
 8009000:	58000400 	.word	0x58000400

08009004 <LL_C2_EXTI_EnableEvent_32_63>:
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 800900c:	4b06      	ldr	r3, [pc, #24]	; (8009028 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800900e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8009012:	4905      	ldr	r1, [pc, #20]	; (8009028 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4313      	orrs	r3, r2
 8009018:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr
 8009028:	58000800 	.word	0x58000800

0800902c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009034:	4b05      	ldr	r3, [pc, #20]	; (800904c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009036:	6a1a      	ldr	r2, [r3, #32]
 8009038:	4904      	ldr	r1, [pc, #16]	; (800904c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	4313      	orrs	r3, r2
 800903e:	620b      	str	r3, [r1, #32]
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	58000800 	.word	0x58000800

08009050 <LL_AHB3_GRP1_EnableClock>:
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8009058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800905c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800905e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	4313      	orrs	r3, r2
 8009066:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8009068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800906c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4013      	ands	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8009074:	68fb      	ldr	r3, [r7, #12]
}
 8009076:	bf00      	nop
 8009078:	3714      	adds	r7, #20
 800907a:	46bd      	mov	sp, r7
 800907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009080:	4770      	bx	lr

08009082 <LL_C1_IPCC_EnableIT_TXF>:
	 * @brief  Enable Transmit channel free interrupt for processor 1.
	 * @rmtoll C1CR          TXFIE         LL_C1_IPCC_EnableIT_TXF
	 * @param  IPCCx IPCC Instance.
	 * @retval None
	 */
	__STATIC_INLINE void LL_C1_IPCC_EnableIT_TXF(IPCC_TypeDef *IPCCx) {
 8009082:	b480      	push	{r7}
 8009084:	b083      	sub	sp, #12
 8009086:	af00      	add	r7, sp, #0
 8009088:	6078      	str	r0, [r7, #4]
		SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	601a      	str	r2, [r3, #0]
	}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr

080090a2 <LL_C1_IPCC_EnableIT_RXO>:
	 * @brief  Enable Receive channel occupied interrupt for processor 1.
	 * @rmtoll C1CR          RXOIE         LL_C1_IPCC_EnableIT_RXO
	 * @param  IPCCx IPCC Instance.
	 * @retval None
	 */
	__STATIC_INLINE void LL_C1_IPCC_EnableIT_RXO(IPCC_TypeDef *IPCCx) {
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
		SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f043 0201 	orr.w	r2, r3, #1
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	601a      	str	r2, [r3, #0]
	}
 80090b6:	bf00      	nop
 80090b8:	370c      	adds	r7, #12
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr

080090c2 <LL_C1_IPCC_EnableTransmitChannel>:
	 *         @arg @ref LL_IPCC_CHANNEL_5
	 *         @arg @ref LL_IPCC_CHANNEL_6
	 * @retval None
	 */
	__STATIC_INLINE void LL_C1_IPCC_EnableTransmitChannel(IPCC_TypeDef *IPCCx,
			uint32_t Channel) {
 80090c2:	b480      	push	{r7}
 80090c4:	b083      	sub	sp, #12
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
 80090ca:	6039      	str	r1, [r7, #0]
		CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	041b      	lsls	r3, r3, #16
 80090d4:	43db      	mvns	r3, r3
 80090d6:	401a      	ands	r2, r3
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	605a      	str	r2, [r3, #4]
	}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <LL_C1_IPCC_EnableReceiveChannel>:
	 *         @arg @ref LL_IPCC_CHANNEL_5
	 *         @arg @ref LL_IPCC_CHANNEL_6
	 * @retval None
	 */
	__STATIC_INLINE void LL_C1_IPCC_EnableReceiveChannel(IPCC_TypeDef *IPCCx,
			uint32_t Channel) {
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	6039      	str	r1, [r7, #0]
		CLEAR_BIT(IPCCx->C1MR, Channel);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	685a      	ldr	r2, [r3, #4]
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	43db      	mvns	r3, r3
 80090fa:	401a      	ands	r2, r3
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	605a      	str	r2, [r3, #4]
	}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <LL_C1_IPCC_SetFlag_CHx>:
	 *         @arg @ref LL_IPCC_CHANNEL_5
	 *         @arg @ref LL_IPCC_CHANNEL_6
	 * @retval None
	 */
	__STATIC_INLINE void LL_C1_IPCC_SetFlag_CHx(IPCC_TypeDef *IPCCx,
			uint32_t Channel) {
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
		WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	041a      	lsls	r2, r3, #16
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	609a      	str	r2, [r3, #8]
	}
 800911e:	bf00      	nop
 8009120:	370c      	adds	r7, #12
 8009122:	46bd      	mov	sp, r7
 8009124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009128:	4770      	bx	lr

0800912a <LL_C1_IPCC_IsActiveFlag_CHx>:
	 *         @arg @ref LL_IPCC_CHANNEL_5
	 *         @arg @ref LL_IPCC_CHANNEL_6
	 * @retval State of bit (1 or 0).
	 */
	__STATIC_INLINE uint32_t LL_C1_IPCC_IsActiveFlag_CHx(
			IPCC_TypeDef const *const IPCCx, uint32_t Channel) {
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	6078      	str	r0, [r7, #4]
 8009132:	6039      	str	r1, [r7, #0]
		return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68da      	ldr	r2, [r3, #12]
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	4013      	ands	r3, r2
 800913c:	683a      	ldr	r2, [r7, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d101      	bne.n	8009146 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8009142:	2301      	movs	r3, #1
 8009144:	e000      	b.n	8009148 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8009146:	2300      	movs	r3, #0
	}
 8009148:	4618      	mov	r0, r3
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr

08009154 <HW_IPCC_Enable>:
	return;
}
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable(void) {
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
	/**
	 * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
	 */
	LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41);
 8009158:	f44f 7000 	mov.w	r0, #512	; 0x200
 800915c:	f7ff ff52 	bl	8009004 <LL_C2_EXTI_EnableEvent_32_63>
	LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41);
 8009160:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009164:	f7ff ff62 	bl	800902c <LL_EXTI_EnableRisingTrig_32_63>
	 * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
	 * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
	 * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
	 * So, by default, the application shall both set the event flag and set the C2BOOT bit.
	 */
	__SEV(); /* Set the internal event flag and send an event to the CPU2 */
 8009168:	bf40      	sev
	__WFE(); /* Clear the internal event flag */
 800916a:	bf20      	wfe
	LL_PWR_EnableBootC2();
 800916c:	f7ff ff3a 	bl	8008fe4 <LL_PWR_EnableBootC2>

	return;
 8009170:	bf00      	nop
}
 8009172:	bd80      	pop	{r7, pc}

08009174 <HW_IPCC_Init>:

void HW_IPCC_Init(void) {
 8009174:	b580      	push	{r7, lr}
 8009176:	af00      	add	r7, sp, #0
	LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC);
 8009178:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800917c:	f7ff ff68 	bl	8009050 <LL_AHB3_GRP1_EnableClock>

	LL_C1_IPCC_EnableIT_RXO( IPCC);
 8009180:	4806      	ldr	r0, [pc, #24]	; (800919c <HW_IPCC_Init+0x28>)
 8009182:	f7ff ff8e 	bl	80090a2 <LL_C1_IPCC_EnableIT_RXO>
	LL_C1_IPCC_EnableIT_TXF( IPCC);
 8009186:	4805      	ldr	r0, [pc, #20]	; (800919c <HW_IPCC_Init+0x28>)
 8009188:	f7ff ff7b 	bl	8009082 <LL_C1_IPCC_EnableIT_TXF>

	HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 800918c:	202c      	movs	r0, #44	; 0x2c
 800918e:	f7fa f95e 	bl	800344e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8009192:	202d      	movs	r0, #45	; 0x2d
 8009194:	f7fa f95b 	bl	800344e <HAL_NVIC_EnableIRQ>

	return;
 8009198:	bf00      	nop
}
 800919a:	bd80      	pop	{r7, pc}
 800919c:	58000c00 	.word	0x58000c00

080091a0 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init(void) {
 80091a0:	b580      	push	{r7, lr}
 80091a2:	af00      	add	r7, sp, #0
	LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL);
 80091a4:	2101      	movs	r1, #1
 80091a6:	4802      	ldr	r0, [pc, #8]	; (80091b0 <HW_IPCC_BLE_Init+0x10>)
 80091a8:	f7ff ff9e 	bl	80090e8 <LL_C1_IPCC_EnableReceiveChannel>

	return;
 80091ac:	bf00      	nop
}
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	58000c00 	.word	0x58000c00

080091b4 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd(void) {
 80091b4:	b580      	push	{r7, lr}
 80091b6:	af00      	add	r7, sp, #0
	LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL);
 80091b8:	2101      	movs	r1, #1
 80091ba:	4802      	ldr	r0, [pc, #8]	; (80091c4 <HW_IPCC_BLE_SendCmd+0x10>)
 80091bc:	f7ff ffa6 	bl	800910c <LL_C1_IPCC_SetFlag_CHx>

	return;
 80091c0:	bf00      	nop
}
 80091c2:	bd80      	pop	{r7, pc}
 80091c4:	58000c00 	.word	0x58000c00

080091c8 <HW_IPCC_SYS_Init>:
;

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init(void) {
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
	LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL);
 80091cc:	2102      	movs	r1, #2
 80091ce:	4802      	ldr	r0, [pc, #8]	; (80091d8 <HW_IPCC_SYS_Init+0x10>)
 80091d0:	f7ff ff8a 	bl	80090e8 <LL_C1_IPCC_EnableReceiveChannel>

	return;
 80091d4:	bf00      	nop
}
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	58000c00 	.word	0x58000c00

080091dc <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd(void) {
 80091dc:	b580      	push	{r7, lr}
 80091de:	af00      	add	r7, sp, #0
	LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL);
 80091e0:	2102      	movs	r1, #2
 80091e2:	4804      	ldr	r0, [pc, #16]	; (80091f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80091e4:	f7ff ff92 	bl	800910c <LL_C1_IPCC_SetFlag_CHx>
	LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL);
 80091e8:	2102      	movs	r1, #2
 80091ea:	4802      	ldr	r0, [pc, #8]	; (80091f4 <HW_IPCC_SYS_SendCmd+0x18>)
 80091ec:	f7ff ff69 	bl	80090c2 <LL_C1_IPCC_EnableTransmitChannel>

	return;
 80091f0:	bf00      	nop
}
 80091f2:	bd80      	pop	{r7, pc}
 80091f4:	58000c00 	.word	0x58000c00

080091f8 <HW_IPCC_MM_SendFreeBuf>:
#endif /* ZIGBEE_WB */

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf(void (*cb)(void)) {
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b082      	sub	sp, #8
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
	if (LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL)) {
 8009200:	2108      	movs	r1, #8
 8009202:	480c      	ldr	r0, [pc, #48]	; (8009234 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009204:	f7ff ff91 	bl	800912a <LL_C1_IPCC_IsActiveFlag_CHx>
 8009208:	4603      	mov	r3, r0
 800920a:	2b00      	cmp	r3, #0
 800920c:	d007      	beq.n	800921e <HW_IPCC_MM_SendFreeBuf+0x26>
		FreeBufCb = cb;
 800920e:	4a0a      	ldr	r2, [pc, #40]	; (8009238 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6013      	str	r3, [r2, #0]
		LL_C1_IPCC_EnableTransmitChannel( IPCC,
 8009214:	2108      	movs	r1, #8
 8009216:	4807      	ldr	r0, [pc, #28]	; (8009234 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009218:	f7ff ff53 	bl	80090c2 <LL_C1_IPCC_EnableTransmitChannel>
		cb();

		LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL);
	}

	return;
 800921c:	e006      	b.n	800922c <HW_IPCC_MM_SendFreeBuf+0x34>
		cb();
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4798      	blx	r3
		LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL);
 8009222:	2108      	movs	r1, #8
 8009224:	4803      	ldr	r0, [pc, #12]	; (8009234 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8009226:	f7ff ff71 	bl	800910c <LL_C1_IPCC_SetFlag_CHx>
	return;
 800922a:	bf00      	nop
}
 800922c:	3708      	adds	r7, #8
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
 8009232:	bf00      	nop
 8009234:	58000c00 	.word	0x58000c00
 8009238:	20000254 	.word	0x20000254

0800923c <HW_IPCC_TRACES_Init>:
}

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init(void) {
 800923c:	b580      	push	{r7, lr}
 800923e:	af00      	add	r7, sp, #0
	LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL);
 8009240:	2108      	movs	r1, #8
 8009242:	4802      	ldr	r0, [pc, #8]	; (800924c <HW_IPCC_TRACES_Init+0x10>)
 8009244:	f7ff ff50 	bl	80090e8 <LL_C1_IPCC_EnableReceiveChannel>

	return;
 8009248:	bf00      	nop
}
 800924a:	bd80      	pop	{r7, pc}
 800924c:	58000c00 	.word	0x58000c00

08009250 <UTIL_LPM_Init>:

/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_LPM_Init(void) {
 8009250:	b480      	push	{r7}
 8009252:	af00      	add	r7, sp, #0
	StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <UTIL_LPM_Init+0x1c>)
 8009256:	2200      	movs	r2, #0
 8009258:	601a      	str	r2, [r3, #0]
	OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800925a:	4b05      	ldr	r3, [pc, #20]	; (8009270 <UTIL_LPM_Init+0x20>)
 800925c:	2200      	movs	r2, #0
 800925e:	601a      	str	r2, [r3, #0]
	UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8009260:	bf00      	nop
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20000258 	.word	0x20000258
 8009270:	2000025c 	.word	0x2000025c

08009274 <UTIL_LPM_SetOffMode>:
	}

	UTIL_LPM_EXIT_CRITICAL_SECTION();
}

void UTIL_LPM_SetOffMode(UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state) {
 8009274:	b480      	push	{r7}
 8009276:	b087      	sub	sp, #28
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	460b      	mov	r3, r1
 800927e:	70fb      	strb	r3, [r7, #3]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009280:	f3ef 8310 	mrs	r3, PRIMASK
 8009284:	613b      	str	r3, [r7, #16]
	return (result);
 8009286:	693b      	ldr	r3, [r7, #16]
	UTIL_LPM_ENTER_CRITICAL_SECTION();
 8009288:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 800928a:	b672      	cpsid	i
}
 800928c:	bf00      	nop

	switch (state) {
 800928e:	78fb      	ldrb	r3, [r7, #3]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d008      	beq.n	80092a6 <UTIL_LPM_SetOffMode+0x32>
 8009294:	2b01      	cmp	r3, #1
 8009296:	d10e      	bne.n	80092b6 <UTIL_LPM_SetOffMode+0x42>
	case UTIL_LPM_DISABLE: {
		OffModeDisable |= lpm_id_bm;
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <UTIL_LPM_SetOffMode+0x5c>)
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4313      	orrs	r3, r2
 80092a0:	4a0b      	ldr	r2, [pc, #44]	; (80092d0 <UTIL_LPM_SetOffMode+0x5c>)
 80092a2:	6013      	str	r3, [r2, #0]
		break;
 80092a4:	e008      	b.n	80092b8 <UTIL_LPM_SetOffMode+0x44>
	}
	case UTIL_LPM_ENABLE: {
		OffModeDisable &= (~lpm_id_bm);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	43da      	mvns	r2, r3
 80092aa:	4b09      	ldr	r3, [pc, #36]	; (80092d0 <UTIL_LPM_SetOffMode+0x5c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	4013      	ands	r3, r2
 80092b0:	4a07      	ldr	r2, [pc, #28]	; (80092d0 <UTIL_LPM_SetOffMode+0x5c>)
 80092b2:	6013      	str	r3, [r2, #0]
		break;
 80092b4:	e000      	b.n	80092b8 <UTIL_LPM_SetOffMode+0x44>
	}
	default:
		break;
 80092b6:	bf00      	nop
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f383 8810 	msr	PRIMASK, r3
}
 80092c2:	bf00      	nop
	}

	UTIL_LPM_EXIT_CRITICAL_SECTION();
}
 80092c4:	bf00      	nop
 80092c6:	371c      	adds	r7, #28
 80092c8:	46bd      	mov	sp, r7
 80092ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ce:	4770      	bx	lr
 80092d0:	2000025c 	.word	0x2000025c

080092d4 <UTIL_SEQ_Run>:
/**
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run(UTIL_SEQ_bm_t Mask_bm) {
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08c      	sub	sp, #48	; 0x30
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
	/**
	 *  When this function is nested, the mask to be applied cannot be larger than the first call
	 *  The mask is always getting smaller and smaller
	 *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
	 */
	super_mask_backup = SuperMask;
 80092dc:	4b67      	ldr	r3, [pc, #412]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	62bb      	str	r3, [r7, #40]	; 0x28
	SuperMask &= Mask_bm;
 80092e2:	4b66      	ldr	r3, [pc, #408]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 80092e4:	681a      	ldr	r2, [r3, #0]
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4013      	ands	r3, r2
 80092ea:	4a64      	ldr	r2, [pc, #400]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 80092ec:	6013      	str	r3, [r2, #0]
	 * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
	 * SuperMask that comes from UTIL_SEQ_Run
	 * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
	 * waiting task
	 */
	while (((TaskSet & TaskMask & SuperMask) != 0U)
 80092ee:	e083      	b.n	80093f8 <UTIL_SEQ_Run+0x124>
			&& ((EvtSet & EvtWaited) == 0U)) {
		counter = 0U;
 80092f0:	2300      	movs	r3, #0
 80092f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		/**
		 * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
		 * on the priority parameter given from UTIL_SEQ_SetTask()
		 * The while loop is looking for a flag set from the highest priority maskr to the lower
		 */
		while ((TaskPrio[counter].priority & TaskMask & SuperMask) == 0U) {
 80092f4:	e002      	b.n	80092fc <UTIL_SEQ_Run+0x28>
			counter++;
 80092f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092f8:	3301      	adds	r3, #1
 80092fa:	62fb      	str	r3, [r7, #44]	; 0x2c
		while ((TaskPrio[counter].priority & TaskMask & SuperMask) == 0U) {
 80092fc:	4a60      	ldr	r2, [pc, #384]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 80092fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009300:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8009304:	4b5f      	ldr	r3, [pc, #380]	; (8009484 <UTIL_SEQ_Run+0x1b0>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	401a      	ands	r2, r3
 800930a:	4b5c      	ldr	r3, [pc, #368]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	4013      	ands	r3, r2
 8009310:	2b00      	cmp	r3, #0
 8009312:	d0f0      	beq.n	80092f6 <UTIL_SEQ_Run+0x22>
		}

		current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 8009314:	4a5a      	ldr	r2, [pc, #360]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 8009316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009318:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800931c:	4b59      	ldr	r3, [pc, #356]	; (8009484 <UTIL_SEQ_Run+0x1b0>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	401a      	ands	r2, r3
 8009322:	4b56      	ldr	r3, [pc, #344]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4013      	ands	r3, r2
 8009328:	627b      	str	r3, [r7, #36]	; 0x24
		 * so that the second one can be executed.
		 * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
		 *
		 * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
		 */
		if ((TaskPrio[counter].round_robin & current_task_set) == 0U) {
 800932a:	4a55      	ldr	r2, [pc, #340]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 800932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932e:	00db      	lsls	r3, r3, #3
 8009330:	4413      	add	r3, r2
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009336:	4013      	ands	r3, r2
 8009338:	2b00      	cmp	r3, #0
 800933a:	d106      	bne.n	800934a <UTIL_SEQ_Run+0x76>
			TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800933c:	4a50      	ldr	r2, [pc, #320]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 800933e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	4413      	add	r3, r2
 8009344:	f04f 32ff 	mov.w	r2, #4294967295
 8009348:	605a      	str	r2, [r3, #4]
		/** Read the flag index of the task to be executed
		 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
		 *  before task execution.
		 */
		CurrentTaskIdx = (SEQ_BitPosition(
				current_task_set & TaskPrio[counter].round_robin));
 800934a:	4a4d      	ldr	r2, [pc, #308]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	00db      	lsls	r3, r3, #3
 8009350:	4413      	add	r3, r2
 8009352:	685a      	ldr	r2, [r3, #4]
		CurrentTaskIdx = (SEQ_BitPosition(
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	4013      	ands	r3, r2
 8009358:	4618      	mov	r0, r3
 800935a:	f000 f99d 	bl	8009698 <SEQ_BitPosition>
 800935e:	4603      	mov	r3, r0
 8009360:	461a      	mov	r2, r3
 8009362:	4b49      	ldr	r3, [pc, #292]	; (8009488 <UTIL_SEQ_Run+0x1b4>)
 8009364:	601a      	str	r2, [r3, #0]

		/** remove from the roun_robin mask the task that has been selected to be executed */
		TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8009366:	4a46      	ldr	r2, [pc, #280]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 8009368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936a:	00db      	lsls	r3, r3, #3
 800936c:	4413      	add	r3, r2
 800936e:	685a      	ldr	r2, [r3, #4]
 8009370:	4b45      	ldr	r3, [pc, #276]	; (8009488 <UTIL_SEQ_Run+0x1b4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	2101      	movs	r1, #1
 8009376:	fa01 f303 	lsl.w	r3, r1, r3
 800937a:	43db      	mvns	r3, r3
 800937c:	401a      	ands	r2, r3
 800937e:	4940      	ldr	r1, [pc, #256]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 8009380:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009382:	00db      	lsls	r3, r3, #3
 8009384:	440b      	add	r3, r1
 8009386:	605a      	str	r2, [r3, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009388:	f3ef 8310 	mrs	r3, PRIMASK
 800938c:	61bb      	str	r3, [r7, #24]
	return (result);
 800938e:	69bb      	ldr	r3, [r7, #24]

		UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009390:	623b      	str	r3, [r7, #32]
	__ASM volatile ("cpsid i" : : : "memory");
 8009392:	b672      	cpsid	i
}
 8009394:	bf00      	nop
		/** remove from the list or pending task the one that has been selected to be executed */
		TaskSet &= ~(1U << CurrentTaskIdx);
 8009396:	4b3c      	ldr	r3, [pc, #240]	; (8009488 <UTIL_SEQ_Run+0x1b4>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2201      	movs	r2, #1
 800939c:	fa02 f303 	lsl.w	r3, r2, r3
 80093a0:	43da      	mvns	r2, r3
 80093a2:	4b3a      	ldr	r3, [pc, #232]	; (800948c <UTIL_SEQ_Run+0x1b8>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4013      	ands	r3, r2
 80093a8:	4a38      	ldr	r2, [pc, #224]	; (800948c <UTIL_SEQ_Run+0x1b8>)
 80093aa:	6013      	str	r3, [r2, #0]
		/** remove from all priority mask the task that has been selected to be executed */
		for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--) {
 80093ac:	2302      	movs	r3, #2
 80093ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093b0:	e013      	b.n	80093da <UTIL_SEQ_Run+0x106>
			TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80093b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b4:	3b01      	subs	r3, #1
 80093b6:	4a32      	ldr	r2, [pc, #200]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 80093b8:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <UTIL_SEQ_Run+0x1b4>)
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2201      	movs	r2, #1
 80093c2:	fa02 f303 	lsl.w	r3, r2, r3
 80093c6:	43da      	mvns	r2, r3
 80093c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ca:	3b01      	subs	r3, #1
 80093cc:	400a      	ands	r2, r1
 80093ce:	492c      	ldr	r1, [pc, #176]	; (8009480 <UTIL_SEQ_Run+0x1ac>)
 80093d0:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
		for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--) {
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	3b01      	subs	r3, #1
 80093d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d1e8      	bne.n	80093b2 <UTIL_SEQ_Run+0xde>
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	617b      	str	r3, [r7, #20]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	f383 8810 	msr	PRIMASK, r3
}
 80093ea:	bf00      	nop
		}
		UTIL_SEQ_EXIT_CRITICAL_SECTION();
		/** Execute the task */
		TaskCb[CurrentTaskIdx]();
 80093ec:	4b26      	ldr	r3, [pc, #152]	; (8009488 <UTIL_SEQ_Run+0x1b4>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a27      	ldr	r2, [pc, #156]	; (8009490 <UTIL_SEQ_Run+0x1bc>)
 80093f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093f6:	4798      	blx	r3
	while (((TaskSet & TaskMask & SuperMask) != 0U)
 80093f8:	4b24      	ldr	r3, [pc, #144]	; (800948c <UTIL_SEQ_Run+0x1b8>)
 80093fa:	681a      	ldr	r2, [r3, #0]
 80093fc:	4b21      	ldr	r3, [pc, #132]	; (8009484 <UTIL_SEQ_Run+0x1b0>)
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	401a      	ands	r2, r3
 8009402:	4b1e      	ldr	r3, [pc, #120]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4013      	ands	r3, r2
 8009408:	2b00      	cmp	r3, #0
 800940a:	d007      	beq.n	800941c <UTIL_SEQ_Run+0x148>
			&& ((EvtSet & EvtWaited) == 0U)) {
 800940c:	4b21      	ldr	r3, [pc, #132]	; (8009494 <UTIL_SEQ_Run+0x1c0>)
 800940e:	681a      	ldr	r2, [r3, #0]
 8009410:	4b21      	ldr	r3, [pc, #132]	; (8009498 <UTIL_SEQ_Run+0x1c4>)
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4013      	ands	r3, r2
 8009416:	2b00      	cmp	r3, #0
 8009418:	f43f af6a 	beq.w	80092f0 <UTIL_SEQ_Run+0x1c>
	}

	/* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
	CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800941c:	4b1a      	ldr	r3, [pc, #104]	; (8009488 <UTIL_SEQ_Run+0x1b4>)
 800941e:	f04f 32ff 	mov.w	r2, #4294967295
 8009422:	601a      	str	r2, [r3, #0]
	UTIL_SEQ_PreIdle();
 8009424:	f000 f92a 	bl	800967c <UTIL_SEQ_PreIdle>
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009428:	f3ef 8310 	mrs	r3, PRIMASK
 800942c:	613b      	str	r3, [r7, #16]
	return (result);
 800942e:	693b      	ldr	r3, [r7, #16]

	UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009430:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("cpsid i" : : : "memory");
 8009432:	b672      	cpsid	i
}
 8009434:	bf00      	nop
	if (!(((TaskSet & TaskMask & SuperMask) != 0U)
 8009436:	4b15      	ldr	r3, [pc, #84]	; (800948c <UTIL_SEQ_Run+0x1b8>)
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	4b12      	ldr	r3, [pc, #72]	; (8009484 <UTIL_SEQ_Run+0x1b0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	401a      	ands	r2, r3
 8009440:	4b0e      	ldr	r3, [pc, #56]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4013      	ands	r3, r2
 8009446:	2b00      	cmp	r3, #0
 8009448:	d108      	bne.n	800945c <UTIL_SEQ_Run+0x188>
			|| ((EvtSet & EvtWaited) != 0U))) {
 800944a:	4b12      	ldr	r3, [pc, #72]	; (8009494 <UTIL_SEQ_Run+0x1c0>)
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4b12      	ldr	r3, [pc, #72]	; (8009498 <UTIL_SEQ_Run+0x1c4>)
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4013      	ands	r3, r2
	if (!(((TaskSet & TaskMask & SuperMask) != 0U)
 8009454:	2b00      	cmp	r3, #0
 8009456:	d101      	bne.n	800945c <UTIL_SEQ_Run+0x188>
		UTIL_SEQ_Idle();
 8009458:	f7f6 ff4b 	bl	80002f2 <UTIL_SEQ_Idle>
 800945c:	69fb      	ldr	r3, [r7, #28]
 800945e:	60fb      	str	r3, [r7, #12]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f383 8810 	msr	PRIMASK, r3
}
 8009466:	bf00      	nop
	}
	UTIL_SEQ_EXIT_CRITICAL_SECTION();

	UTIL_SEQ_PostIdle();
 8009468:	f000 f90f 	bl	800968a <UTIL_SEQ_PostIdle>

	/** restore the mask from UTIL_SEQ_Run() */
	SuperMask = super_mask_backup;
 800946c:	4a03      	ldr	r2, [pc, #12]	; (800947c <UTIL_SEQ_Run+0x1a8>)
 800946e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009470:	6013      	str	r3, [r2, #0]

	return;
 8009472:	bf00      	nop
}
 8009474:	3730      	adds	r7, #48	; 0x30
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	2000002c 	.word	0x2000002c
 8009480:	200002f0 	.word	0x200002f0
 8009484:	20000028 	.word	0x20000028
 8009488:	2000026c 	.word	0x2000026c
 800948c:	20000260 	.word	0x20000260
 8009490:	20000270 	.word	0x20000270
 8009494:	20000264 	.word	0x20000264
 8009498:	20000268 	.word	0x20000268

0800949c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags,
		void (*Task)(void)) {
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	607a      	str	r2, [r7, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a8:	f3ef 8310 	mrs	r3, PRIMASK
 80094ac:	617b      	str	r3, [r7, #20]
	return (result);
 80094ae:	697b      	ldr	r3, [r7, #20]
	UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80094b0:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("cpsid i" : : : "memory");
 80094b2:	b672      	cpsid	i
}
 80094b4:	bf00      	nop

	TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f000 f8ee 	bl	8009698 <SEQ_BitPosition>
 80094bc:	4603      	mov	r3, r0
 80094be:	4619      	mov	r1, r3
 80094c0:	4a06      	ldr	r2, [pc, #24]	; (80094dc <UTIL_SEQ_RegTask+0x40>)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80094c8:	69fb      	ldr	r3, [r7, #28]
 80094ca:	61bb      	str	r3, [r7, #24]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094cc:	69bb      	ldr	r3, [r7, #24]
 80094ce:	f383 8810 	msr	PRIMASK, r3
}
 80094d2:	bf00      	nop

	UTIL_SEQ_EXIT_CRITICAL_SECTION();

	return;
 80094d4:	bf00      	nop
}
 80094d6:	3720      	adds	r7, #32
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}
 80094dc:	20000270 	.word	0x20000270

080094e0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Task_Prio) {
 80094e0:	b480      	push	{r7}
 80094e2:	b087      	sub	sp, #28
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094ea:	f3ef 8310 	mrs	r3, PRIMASK
 80094ee:	60fb      	str	r3, [r7, #12]
	return (result);
 80094f0:	68fb      	ldr	r3, [r7, #12]
	UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80094f2:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 80094f4:	b672      	cpsid	i
}
 80094f6:	bf00      	nop

	TaskSet |= TaskId_bm;
 80094f8:	4b0d      	ldr	r3, [pc, #52]	; (8009530 <UTIL_SEQ_SetTask+0x50>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4313      	orrs	r3, r2
 8009500:	4a0b      	ldr	r2, [pc, #44]	; (8009530 <UTIL_SEQ_SetTask+0x50>)
 8009502:	6013      	str	r3, [r2, #0]
	TaskPrio[Task_Prio].priority |= TaskId_bm;
 8009504:	4a0b      	ldr	r2, [pc, #44]	; (8009534 <UTIL_SEQ_SetTask+0x54>)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	431a      	orrs	r2, r3
 8009510:	4908      	ldr	r1, [pc, #32]	; (8009534 <UTIL_SEQ_SetTask+0x54>)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	f383 8810 	msr	PRIMASK, r3
}
 8009522:	bf00      	nop

	UTIL_SEQ_EXIT_CRITICAL_SECTION();

	return;
 8009524:	bf00      	nop
}
 8009526:	371c      	adds	r7, #28
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr
 8009530:	20000260 	.word	0x20000260
 8009534:	200002f0 	.word	0x200002f0

08009538 <UTIL_SEQ_PauseTask>:

	UTIL_SEQ_EXIT_CRITICAL_SECTION();
	return _status;
}

void UTIL_SEQ_PauseTask(UTIL_SEQ_bm_t TaskId_bm) {
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009540:	f3ef 8310 	mrs	r3, PRIMASK
 8009544:	60fb      	str	r3, [r7, #12]
	return (result);
 8009546:	68fb      	ldr	r3, [r7, #12]
	UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009548:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 800954a:	b672      	cpsid	i
}
 800954c:	bf00      	nop

	TaskMask &= (~TaskId_bm);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	43da      	mvns	r2, r3
 8009552:	4b08      	ldr	r3, [pc, #32]	; (8009574 <UTIL_SEQ_PauseTask+0x3c>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4013      	ands	r3, r2
 8009558:	4a06      	ldr	r2, [pc, #24]	; (8009574 <UTIL_SEQ_PauseTask+0x3c>)
 800955a:	6013      	str	r3, [r2, #0]
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	f383 8810 	msr	PRIMASK, r3
}
 8009566:	bf00      	nop

	UTIL_SEQ_EXIT_CRITICAL_SECTION();

	return;
 8009568:	bf00      	nop
}
 800956a:	371c      	adds	r7, #28
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr
 8009574:	20000028 	.word	0x20000028

08009578 <UTIL_SEQ_ResumeTask>:

	UTIL_SEQ_EXIT_CRITICAL_SECTION();
	return _status;
}

void UTIL_SEQ_ResumeTask(UTIL_SEQ_bm_t TaskId_bm) {
 8009578:	b480      	push	{r7}
 800957a:	b087      	sub	sp, #28
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009580:	f3ef 8310 	mrs	r3, PRIMASK
 8009584:	60fb      	str	r3, [r7, #12]
	return (result);
 8009586:	68fb      	ldr	r3, [r7, #12]
	UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8009588:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 800958a:	b672      	cpsid	i
}
 800958c:	bf00      	nop

	TaskMask |= TaskId_bm;
 800958e:	4b09      	ldr	r3, [pc, #36]	; (80095b4 <UTIL_SEQ_ResumeTask+0x3c>)
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4313      	orrs	r3, r2
 8009596:	4a07      	ldr	r2, [pc, #28]	; (80095b4 <UTIL_SEQ_ResumeTask+0x3c>)
 8009598:	6013      	str	r3, [r2, #0]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800959e:	693b      	ldr	r3, [r7, #16]
 80095a0:	f383 8810 	msr	PRIMASK, r3
}
 80095a4:	bf00      	nop

	UTIL_SEQ_EXIT_CRITICAL_SECTION();

	return;
 80095a6:	bf00      	nop
}
 80095a8:	371c      	adds	r7, #28
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	20000028 	.word	0x20000028

080095b8 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt(UTIL_SEQ_bm_t EvtId_bm) {
 80095b8:	b480      	push	{r7}
 80095ba:	b087      	sub	sp, #28
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
	__ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80095c0:	f3ef 8310 	mrs	r3, PRIMASK
 80095c4:	60fb      	str	r3, [r7, #12]
	return (result);
 80095c6:	68fb      	ldr	r3, [r7, #12]
	UTIL_SEQ_ENTER_CRITICAL_SECTION();
 80095c8:	617b      	str	r3, [r7, #20]
	__ASM volatile ("cpsid i" : : : "memory");
 80095ca:	b672      	cpsid	i
}
 80095cc:	bf00      	nop

	EvtSet |= EvtId_bm;
 80095ce:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <UTIL_SEQ_SetEvt+0x3c>)
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4313      	orrs	r3, r2
 80095d6:	4a07      	ldr	r2, [pc, #28]	; (80095f4 <UTIL_SEQ_SetEvt+0x3c>)
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	613b      	str	r3, [r7, #16]
	__ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	f383 8810 	msr	PRIMASK, r3
}
 80095e4:	bf00      	nop

	UTIL_SEQ_EXIT_CRITICAL_SECTION();

	return;
 80095e6:	bf00      	nop
}
 80095e8:	371c      	adds	r7, #28
 80095ea:	46bd      	mov	sp, r7
 80095ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f0:	4770      	bx	lr
 80095f2:	bf00      	nop
 80095f4:	20000264 	.word	0x20000264

080095f8 <UTIL_SEQ_WaitEvt>:
	UTIL_SEQ_EXIT_CRITICAL_SECTION();

	return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm) {
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b086      	sub	sp, #24
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
	UTIL_SEQ_bm_t current_task_idx;
	UTIL_SEQ_bm_t wait_task_idx;
	/** store in local the current_task_id_bm as the global variable CurrentTaskIdx
	 *  may be overwritten in case there are nested call of UTIL_SEQ_Run()
	 */
	current_task_idx = CurrentTaskIdx;
 8009600:	4b1b      	ldr	r3, [pc, #108]	; (8009670 <UTIL_SEQ_WaitEvt+0x78>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	613b      	str	r3, [r7, #16]
	if (UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx) {
 8009606:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <UTIL_SEQ_WaitEvt+0x78>)
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800960e:	d102      	bne.n	8009616 <UTIL_SEQ_WaitEvt+0x1e>
		wait_task_idx = 0;
 8009610:	2300      	movs	r3, #0
 8009612:	617b      	str	r3, [r7, #20]
 8009614:	e005      	b.n	8009622 <UTIL_SEQ_WaitEvt+0x2a>
	} else {
		wait_task_idx = 1 << CurrentTaskIdx;
 8009616:	4b16      	ldr	r3, [pc, #88]	; (8009670 <UTIL_SEQ_WaitEvt+0x78>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2201      	movs	r2, #1
 800961c:	fa02 f303 	lsl.w	r3, r2, r3
 8009620:	617b      	str	r3, [r7, #20]
	}

	/** backup the event id that was currently waited */
	event_waited_id_backup = EvtWaited;
 8009622:	4b14      	ldr	r3, [pc, #80]	; (8009674 <UTIL_SEQ_WaitEvt+0x7c>)
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	60fb      	str	r3, [r7, #12]
	EvtWaited = EvtId_bm;
 8009628:	4a12      	ldr	r2, [pc, #72]	; (8009674 <UTIL_SEQ_WaitEvt+0x7c>)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6013      	str	r3, [r2, #0]
	 *  the while loop below.
	 *  The system is waiting only for the last waited event.
	 *  When it will go out, it will wait again from the previous one.
	 *  It case it occurs while waiting for the second one, the while loop will exit immediately
	 */
	while ((EvtSet & EvtWaited) == 0U) {
 800962e:	e005      	b.n	800963c <UTIL_SEQ_WaitEvt+0x44>
		UTIL_SEQ_EvtIdle(wait_task_idx, EvtWaited);
 8009630:	4b10      	ldr	r3, [pc, #64]	; (8009674 <UTIL_SEQ_WaitEvt+0x7c>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4619      	mov	r1, r3
 8009636:	6978      	ldr	r0, [r7, #20]
 8009638:	f7f6 fe62 	bl	8000300 <UTIL_SEQ_EvtIdle>
	while ((EvtSet & EvtWaited) == 0U) {
 800963c:	4b0e      	ldr	r3, [pc, #56]	; (8009678 <UTIL_SEQ_WaitEvt+0x80>)
 800963e:	681a      	ldr	r2, [r3, #0]
 8009640:	4b0c      	ldr	r3, [pc, #48]	; (8009674 <UTIL_SEQ_WaitEvt+0x7c>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	4013      	ands	r3, r2
 8009646:	2b00      	cmp	r3, #0
 8009648:	d0f2      	beq.n	8009630 <UTIL_SEQ_WaitEvt+0x38>
	/**
	 * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
	 * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
	 * in the call of UTIL_SEQ_EvtIdle()
	 */
	CurrentTaskIdx = current_task_idx;
 800964a:	4a09      	ldr	r2, [pc, #36]	; (8009670 <UTIL_SEQ_WaitEvt+0x78>)
 800964c:	693b      	ldr	r3, [r7, #16]
 800964e:	6013      	str	r3, [r2, #0]

	EvtSet &= (~EvtWaited);
 8009650:	4b08      	ldr	r3, [pc, #32]	; (8009674 <UTIL_SEQ_WaitEvt+0x7c>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	43da      	mvns	r2, r3
 8009656:	4b08      	ldr	r3, [pc, #32]	; (8009678 <UTIL_SEQ_WaitEvt+0x80>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4013      	ands	r3, r2
 800965c:	4a06      	ldr	r2, [pc, #24]	; (8009678 <UTIL_SEQ_WaitEvt+0x80>)
 800965e:	6013      	str	r3, [r2, #0]
	EvtWaited = event_waited_id_backup;
 8009660:	4a04      	ldr	r2, [pc, #16]	; (8009674 <UTIL_SEQ_WaitEvt+0x7c>)
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	6013      	str	r3, [r2, #0]

	return;
 8009666:	bf00      	nop
}
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	2000026c 	.word	0x2000026c
 8009674:	20000268 	.word	0x20000268
 8009678:	20000264 	.word	0x20000264

0800967c <UTIL_SEQ_PreIdle>:

__WEAK void UTIL_SEQ_Idle(void) {
	return;
}

__WEAK void UTIL_SEQ_PreIdle(void) {
 800967c:	b480      	push	{r7}
 800967e:	af00      	add	r7, sp, #0
	/**
	 * Unless specified by the application, there is nothing to be done
	 */
	return;
 8009680:	bf00      	nop
}
 8009682:	46bd      	mov	sp, r7
 8009684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009688:	4770      	bx	lr

0800968a <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle(void) {
 800968a:	b480      	push	{r7}
 800968c:	af00      	add	r7, sp, #0
	/**
	 * Unless specified by the application, there is nothing to be done
	 */
	return;
 800968e:	bf00      	nop
}
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <SEQ_BitPosition>:
/**
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value) {
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	uint8_t n = 0U;
 80096a0:	2300      	movs	r3, #0
 80096a2:	73fb      	strb	r3, [r7, #15]

	if ((Value & 0xFFFF0000U) == 0U) {
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	0c1b      	lsrs	r3, r3, #16
 80096a8:	041b      	lsls	r3, r3, #16
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d104      	bne.n	80096b8 <SEQ_BitPosition+0x20>
		n = 16U;
 80096ae:	2310      	movs	r3, #16
 80096b0:	73fb      	strb	r3, [r7, #15]
		Value <<= 16U;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	041b      	lsls	r3, r3, #16
 80096b6:	607b      	str	r3, [r7, #4]
	}
	if ((Value & 0xFF000000U) == 0U) {
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d105      	bne.n	80096ce <SEQ_BitPosition+0x36>
		n += 8U;
 80096c2:	7bfb      	ldrb	r3, [r7, #15]
 80096c4:	3308      	adds	r3, #8
 80096c6:	73fb      	strb	r3, [r7, #15]
		Value <<= 8U;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	021b      	lsls	r3, r3, #8
 80096cc:	607b      	str	r3, [r7, #4]
	}
	if ((Value & 0xF0000000U) == 0U) {
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d105      	bne.n	80096e4 <SEQ_BitPosition+0x4c>
		n += 4U;
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	3304      	adds	r3, #4
 80096dc:	73fb      	strb	r3, [r7, #15]
		Value <<= 4U;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	011b      	lsls	r3, r3, #4
 80096e2:	607b      	str	r3, [r7, #4]
	}

	n += SEQ_clz_table_4bit[Value >> (32 - 4)];
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	0f1b      	lsrs	r3, r3, #28
 80096e8:	4a07      	ldr	r2, [pc, #28]	; (8009708 <SEQ_BitPosition+0x70>)
 80096ea:	5cd2      	ldrb	r2, [r2, r3]
 80096ec:	7bfb      	ldrb	r3, [r7, #15]
 80096ee:	4413      	add	r3, r2
 80096f0:	73fb      	strb	r3, [r7, #15]

	return (uint8_t) (31U - n);
 80096f2:	7bfb      	ldrb	r3, [r7, #15]
 80096f4:	f1c3 031f 	rsb	r3, r3, #31
 80096f8:	b2db      	uxtb	r3, r3
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	080099d8 	.word	0x080099d8

0800970c <__libc_init_array>:
 800970c:	b570      	push	{r4, r5, r6, lr}
 800970e:	4d0d      	ldr	r5, [pc, #52]	; (8009744 <__libc_init_array+0x38>)
 8009710:	4c0d      	ldr	r4, [pc, #52]	; (8009748 <__libc_init_array+0x3c>)
 8009712:	1b64      	subs	r4, r4, r5
 8009714:	10a4      	asrs	r4, r4, #2
 8009716:	2600      	movs	r6, #0
 8009718:	42a6      	cmp	r6, r4
 800971a:	d109      	bne.n	8009730 <__libc_init_array+0x24>
 800971c:	4d0b      	ldr	r5, [pc, #44]	; (800974c <__libc_init_array+0x40>)
 800971e:	4c0c      	ldr	r4, [pc, #48]	; (8009750 <__libc_init_array+0x44>)
 8009720:	f000 f82e 	bl	8009780 <_init>
 8009724:	1b64      	subs	r4, r4, r5
 8009726:	10a4      	asrs	r4, r4, #2
 8009728:	2600      	movs	r6, #0
 800972a:	42a6      	cmp	r6, r4
 800972c:	d105      	bne.n	800973a <__libc_init_array+0x2e>
 800972e:	bd70      	pop	{r4, r5, r6, pc}
 8009730:	f855 3b04 	ldr.w	r3, [r5], #4
 8009734:	4798      	blx	r3
 8009736:	3601      	adds	r6, #1
 8009738:	e7ee      	b.n	8009718 <__libc_init_array+0xc>
 800973a:	f855 3b04 	ldr.w	r3, [r5], #4
 800973e:	4798      	blx	r3
 8009740:	3601      	adds	r6, #1
 8009742:	e7f2      	b.n	800972a <__libc_init_array+0x1e>
 8009744:	080099e8 	.word	0x080099e8
 8009748:	080099e8 	.word	0x080099e8
 800974c:	080099e8 	.word	0x080099e8
 8009750:	080099ec 	.word	0x080099ec

08009754 <memcpy>:
 8009754:	440a      	add	r2, r1
 8009756:	4291      	cmp	r1, r2
 8009758:	f100 33ff 	add.w	r3, r0, #4294967295
 800975c:	d100      	bne.n	8009760 <memcpy+0xc>
 800975e:	4770      	bx	lr
 8009760:	b510      	push	{r4, lr}
 8009762:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009766:	f803 4f01 	strb.w	r4, [r3, #1]!
 800976a:	4291      	cmp	r1, r2
 800976c:	d1f9      	bne.n	8009762 <memcpy+0xe>
 800976e:	bd10      	pop	{r4, pc}

08009770 <memset>:
 8009770:	4402      	add	r2, r0
 8009772:	4603      	mov	r3, r0
 8009774:	4293      	cmp	r3, r2
 8009776:	d100      	bne.n	800977a <memset+0xa>
 8009778:	4770      	bx	lr
 800977a:	f803 1b01 	strb.w	r1, [r3], #1
 800977e:	e7f9      	b.n	8009774 <memset+0x4>

08009780 <_init>:
 8009780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009782:	bf00      	nop
 8009784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009786:	bc08      	pop	{r3}
 8009788:	469e      	mov	lr, r3
 800978a:	4770      	bx	lr

0800978c <_fini>:
 800978c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800978e:	bf00      	nop
 8009790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009792:	bc08      	pop	{r3}
 8009794:	469e      	mov	lr, r3
 8009796:	4770      	bx	lr
