<?xml version="1.0" encoding="utf-8"?>
<device schemaVersion="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="CMSIS-SVD_Schema_1_0.xsd">
  <name>CYBLE_416045_02</name>
  <version>0.1</version>
  <description>PSoC 63</description>
  <addressUnitBits>8</addressUnitBits>
  <width>32</width>
  <peripherals>
    <peripheral>
      <name>VDAC_1</name>
      <description>No description available</description>
      <baseAddress>0x0</baseAddress>
      <addressBlock>
        <offset>0</offset>
        <size>0x0</size>
        <usage>registers</usage>
      </addressBlock>
      <registers>
        <register>
          <name>CTDAC_CTDAC_CTRL</name>
          <description>Global CTDAC control</description>
          <addressOffset>0x40000</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>DEGLITCH_CNT</name>
              <description>To prevent glitches after VALUE changes from propagating, the output switch can be opened for DEGLITCH_CNT+1 clk_ctdac clock cycles.</description>
              <lsb>0</lsb>
              <msb>5</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>DEGLITCH_CO6</name>
              <description>Force CTDAC.CO6 switch open after each VALUE change for the set number of clock cycles.</description>
              <lsb>8</lsb>
              <msb>8</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>DEGLITCH_COS</name>
              <description>Force CTB.COS switch open after each VALUE change for the set number of clock cycles.</description>
              <lsb>9</lsb>
              <msb>9</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>OUT_EN</name>
              <description>Output enable, intended to be used during the Hold phase of the Sample and Hold when power cycling :?0: output disabled, the output is either: ?       - Tri-state (DISABLED_MODE=0) ?       - or Vssa (DISABLED_MODE=1 &amp;&amp; CTDAC_RANGE=0)  ?       - or Vref (DISABLED_MODE=1 &amp;&amp; CTDAC_RANGE=1) ?1: output enabled, CTDAC output drives the programmed VALUE</description>
              <lsb>22</lsb>
              <msb>22</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>CTDAC_RANGE</name>
              <description>By closing the bottom switch in the R2R network the output is lifted by one LSB, effectively adding 1?0: Range is [0, 4095] * Vref / 4096 ?1: Range is [1, 4096] * Vref / 4096</description>
              <lsb>23</lsb>
              <msb>23</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>CTDAC_MODE</name>
              <description>DAC mode, this determines the Value decoding</description>
              <lsb>24</lsb>
              <msb>25</msb>
              <access>read-write</access>
              <enumeratedValues>
                <enumeratedValue>
                  <name>UNSIGNED12</name>
                  <description>Unsigned 12-bit VDAC, i.e. no value decoding.</description>
                  <value>0</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>VIRT_SIGNED12</name>
                  <description>Virtual signed 12-bits' VDAC. Value decoding: ?add 0x800 to the 12-bit Value (=invert MSB), to convert the lowest signed number 0x800 to the lowest unsigned number 0x000. This is the same as the SAR handles 12-bit 'virtual' signed numbers.</description>
                  <value>1</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESERVED2</name>
                  <description>No description available</description>
                  <value>2</value>
                </enumeratedValue>
                <enumeratedValue>
                  <name>RESERVED3</name>
                  <description>No description available</description>
                  <value>3</value>
                </enumeratedValue>
              </enumeratedValues>
            </field>
            <field>
              <name>DISABLED_MODE</name>
              <description>Select the output value when the output is disabled (OUT_EN=0) (for risk mitigation)?0: Tri-state CTDAC output when disabled?1: output Vssa or Vref when disabled (see OUT_EN description)</description>
              <lsb>27</lsb>
              <msb>27</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>DSI_STROBE_EN</name>
              <description>DSI strobe input Enable. This enables CTDAC updates to be further throttled by DSI.?0: Ignore DSI strobe input?1: Only do a CTDAC update if alllowed by the DSI stobe (throttle), see below for level or edge</description>
              <lsb>28</lsb>
              <msb>28</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>DSI_STROBE_LEVEL</name>
              <description>Select level or edge detect for DSI strobe?- 0: DSI strobe signal is a pulse input, after a positive edge is detected on the DSI strobe signal the next DAC value update is done on the next CTDAC clock?- 1: DSI strobe signal is a level input, as long as the DSI strobe signal remains high the CTDAC will do a next DAC value update on each CTDAC clock.</description>
              <lsb>29</lsb>
              <msb>29</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>DEEPSLEEP_ON</name>
              <description>- 0: CTDAC IP disabled off during DeepSleep power mode?- 1: CTDAC IP remains enabled during DeepSleep power mode (if ENABLED=1)</description>
              <lsb>30</lsb>
              <msb>30</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>ENABLED</name>
              <description>0: CTDAC IP disabled (put analog in power down, open all switches)?1: CTDAC IP enabled</description>
              <lsb>31</lsb>
              <msb>31</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_INTR</name>
          <description>Interrupt request register</description>
          <addressOffset>0x40020</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>VDAC_EMPTY</name>
              <description>VDAC Interrupt: hardware sets this interrupt when VDAC next value field is empty, i.e. was copied to the current VALUE. Write with '1' to clear bit.</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_INTR_SET</name>
          <description>Interrupt request set register</description>
          <addressOffset>0x40024</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>VDAC_EMPTY_SET</name>
              <description>Write with '1' to set corresponding bit in interrupt request register.</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_INTR_MASK</name>
          <description>Interrupt request mask</description>
          <addressOffset>0x40028</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>VDAC_EMPTY_MASK</name>
              <description>Mask bit for corresponding bit in interrupt request register.</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_INTR_MASKED</name>
          <description>Interrupt request masked</description>
          <addressOffset>0x4002C</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>VDAC_EMPTY_MASKED</name>
              <description>Logical and of corresponding request and mask bits.</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <access>read-only</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_CTDAC_SW</name>
          <description>CTDAC switch control</description>
          <addressOffset>0x400B0</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>CTDD_CVD</name>
              <description>VDDA supply to ctdrefdrive</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>CTDO_CO6</name>
              <description>ctdvout to P6 pin. Note this switch will temporarily be opened for deglitching if DEGLITCH_CO6 is set</description>
              <lsb>8</lsb>
              <msb>8</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_CTDAC_SW_CLEAR</name>
          <description>CTDAC switch control clear</description>
          <addressOffset>0x400B4</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>CTDD_CVD</name>
              <description>see corresponding bit in CTD_SW</description>
              <lsb>0</lsb>
              <msb>0</msb>
              <access>read-write</access>
            </field>
            <field>
              <name>CTDO_CO6</name>
              <description>see corresponding bit in CTD_SW</description>
              <lsb>8</lsb>
              <msb>8</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_CTDAC_VAL</name>
          <description>DAC Value</description>
          <addressOffset>0x40100</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>Value, in CTDAC_MODE 1 this value is decoded</description>
              <lsb>0</lsb>
              <msb>11</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
        <register>
          <name>CTDAC_CTDAC_VAL_NXT</name>
          <description>Next DAC value (double buffering)</description>
          <addressOffset>0x40104</addressOffset>
          <size>32</size>
          <access>read-write</access>
          <resetValue>0</resetValue>
          <resetMask>0</resetMask>
          <fields>
            <field>
              <name>VALUE</name>
              <description>Next value for CTDAC_VAL.VALUE</description>
              <lsb>0</lsb>
              <msb>11</msb>
              <access>read-write</access>
            </field>
          </fields>
        </register>
      </registers>
    </peripheral>
  </peripherals>
</device>